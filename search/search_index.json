{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CWHQ Documentation \u00b6 Welcome to the CodeWizardsHQ documentation page! This documentation is a reference for most of the libraries and languages we use in CodeWizardsHQ courses. It is not meant to be an exhaustive reference, but rather a handy tool that covers the basics. You'll find links to further reading throughout if you want to explore a topic in more detail. Usage \u00b6 Use the navigation menu on the left-hand side of the page to browse the available documentation. Each documentation section will have a table of contents on the right-hand side for easy browsing of the major topics contained in the section. You can also use the Search bar if you have a specific topic in mind. Contributing \u00b6 If you spot a typo or have a suggestion, you can file an issue here and the project maintainers will reach out to you.","title":"Home"},{"location":"#cwhq-documentation","text":"Welcome to the CodeWizardsHQ documentation page! This documentation is a reference for most of the libraries and languages we use in CodeWizardsHQ courses. It is not meant to be an exhaustive reference, but rather a handy tool that covers the basics. You'll find links to further reading throughout if you want to explore a topic in more detail.","title":"CWHQ Documentation"},{"location":"#usage","text":"Use the navigation menu on the left-hand side of the page to browse the available documentation. Each documentation section will have a table of contents on the right-hand side for easy browsing of the major topics contained in the section. You can also use the Search bar if you have a specific topic in mind.","title":"Usage"},{"location":"#contributing","text":"If you spot a typo or have a suggestion, you can file an issue here and the project maintainers will reach out to you.","title":"Contributing"},{"location":"css/css/","text":"CSS Language \u00b6 CSS (Cascading Stylesheets) is used to define the style of a webpage. Think of it like the choice of paint, wood, window curtains, etc. when building a house. When you visit a website, the CSS is what the gives the webpage its fancy design! We use CSS in the following courses at CWHQ: Elementary Middle School High School Fundamental Programming Concepts Webpages with HTML & CSS Fundamentals of Web Development Web Development For Kids - 1 Capstone 1 User Interface Development Web Development For Kids - 2 User Interface Development Capstone 1 Creating Websites with HTML/CSS Responsive Web Development APIs and Databases Responsive Websites with HTML/CSS Interactive JavaScript Professional Web App Development Interactive Websites with JavaScript Web Interfaces Modern CSS Frameworks Capstone 3 Capstone 2 Capstone 2 Mastering APIs Mastering MVC Framework Capstone 3 Object Relational Mapping DevOps and Software Engineering Capstone 3 In this section of our documentation, you'll find references to most of the core CSS language features that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent CSS resources: MDN CSS Docs web.dev Learn CSS CSS Tricks Including CSS In HTML Documents \u00b6 In order for CSS style rules to apply to an HTML document, you must include them in the document in some way. Including CSS In The <head> \u00b6 Generally, CSS is added in the <head> of an HTML document. You can link an external CSS file using a <link> tag, or you can write CSS directly in an HTML document using the <style> tag. Both methods are shown below. /* style.css */ h1 { color : red ; } <!DOCTYPE html> < html > < head > < title > Including CSS in HTML Documents </ title > <!-- This is an external stylesheet --> < link rel = \"stylesheet\" href = \"style.css\" /> < style > p { color : blue ; } </ style > </ head > < body > < h1 > This is red because of the CSS in style.css </ h1 > < p > This is blue because of the CSS in the style tag </ p > </ body > </ html > Inline CSS \u00b6 You can also write CSS style rules directly in an HTML tag using the style attribute, but this is generally discouraged. <!DOCTYPE html> < html > < head > < title > Including CSS in HTML Documents </ title > </ head > < body > < h1 style = \"color: red;\" > This is red because of the CSS in this element's style attribute </ h1 > </ body > </ html > Further Reading MDN - Applying CSS to HTML CSS Tricks - The Second \"S\" In CSS Borders \u00b6 The border property can create a styled border for elements. Below are some border examples: <!DOCTYPE html> < html > < head > < title > Borders </ title > < style > . box { width : 150 px ; height : 150 px ; border : 10 px solid yellowgreen ; display : inline-block ; margin : 10 px ; margin-top : 100 px ; background-color : rgba ( 176 , 166 , 181 , 0.787 ); } . box-1 { border : 10 px dotted teal ; } . box-2 { border : 10 px dashed violet ; } . box-3 { border : 10 px groove cyan ; } /* border-radius property can be used to round edges or make a complete circle for an element */ . box-4 { border-radius : 50 % ; } . box-5 { border-radius : 10 px ; } /* Below are some longhand border properties */ . box-6 { /* Border Style Longhand */ border-style : double ; /* Border Width Longhand */ border-width : 20 px ; /* Border Color Longhand */ border-color : rgb ( 24 , 237 , 173 ); /* Border Bottom Longhand */ border-bottom : 20 px double green ; } </ style > </ head > < body > < div class = \"container\" > < div class = \"box box-1\" ></ div > < div class = \"box box-2\" ></ div > < div class = \"box box-3\" ></ div > < div class = \"box box-4\" ></ div > < div class = \"box box-5\" ></ div > < div class = \"box box-6\" ></ div > </ div > </ body > </ html > Box Model \u00b6 The box model is used by every HTML element. The box model has margin, border, padding, and content and is used to form a visual \"box\". <!DOCTYPE html> < html > < head > < title > Box Model </ title > < style > . box { margin : auto ; border : 10 px solid red ; padding : 20 px ; text-align : center ; width : 300 px ; height : 300 px ; } </ style > </ head > < body > < div class = \"box\" > < p > Content </ p > </ div > </ body > </ html > Block and Inline \u00b6 The terms block and inline refer to two different types of boxes. The width and height properties can be used on elements with the display property set to block (which is also the default display property). If the value of an element is inline , the box will not break on a new line, and the width and height properties will be ignored. <!DOCTYPE html> < html > < head > < title > Box Model </ title > < style > . box { margin : auto ; border : 5 px solid red ; padding : 20 px ; text-align : center ; width : 300 px ; height : 300 px ; } . inline-box { display : inline ; } . block-box { display : inline-block ; } </ style > </ head > < body > < div class = \"box\" > < p > Content </ p > </ div > < div class = \"box\" > < p > Content </ p > </ div > < div class = \"box inline-box\" > < p > Content </ p > </ div > < div class = \"box inline-box\" > < p > Content </ p > </ div > < div class = \"box block-box\" > < p > Content </ p > </ div > < div class = \"box block-box\" > < p > Content </ p > </ div > </ body > </ html > Longhand Properties \u00b6 Margin and Padding can also be used to create specified spacing using the longhand properties: <!DOCTYPE html> < html > < head > < title > Box Model </ title > < style > . box { border : 5 px solid red ; padding : 20 px ; text-align : center ; width : 200 px ; height : 200 px ; font-size : 30 px ; /* Margin Longhand Properties */ margin-top : 2 px ; margin-bottom : 4 px ; margin-left : 6 px ; margin-right : 8 px ; /* Padding Longhand Properties */ padding-top : 2 px ; padding-bottom : 4 px ; padding-left : 6 px ; padding-right : 8 px ; } </ style > </ head > < body > < div class = \"box\" > < p > Content </ p > </ div > </ body > </ html > Further Reading MDN - The Box Model web.dev - Box Model CSS Tricks - The CSS Box Model Comments \u00b6 In CSS you can create comments between /* */ blocks. They can be single line or multiline. <!DOCTYPE html> < html > < head > < title > CSS Comments </ title > < style > /* This is a single line comment */ /* This spans multiple lines */ </ style > </ head > < body ></ body > </ html > Further Reading MDN - Comments CSS Rule Basics \u00b6 CSS works by selecting one or more HTML elements and then applying styles to those HTML elements. The way to select elements can be as simple as writing the HTML tag name, targeting tags with a common class or id, or even targeting tags based on some state such as being hovered over. The basic syntax is: selector { property : value ; otherproperty : otherValue ; anotherproperty : value1 value2 value3 ; } Notice that property/value pairs can be one-to-one or one-to-many. Here's an example of targeting a few elements and applying styles to them: <!DOCTYPE html> < html > < head > < title > CSS Rule Basics </ title > < style > # page-title { color : green ; text-shadow : 20 px 15 px 4 px black ; } p { color : blue ; text-decoration : underline ; border : 10 px solid red ; padding : 24 px ; font-size : 42 px ; } </ style > </ head > < body > < h1 id = \"page-title\" > This text is green and has a text shadow added. </ h1 > < p > Each paragraph tag has the same styles because we targeted the \"p\" selector. </ p > < p > See what I mean? </ p > </ body > </ html > Dealing with Overflow Issues \u00b6 When you constrain the size of an HTML element and add content into it, there's a chance that the content can overflow. The overflow property gives you the ability to control how overflow issues are dealt with in an element with a constrained width and/or height. <!DOCTYPE html> < html > < head > < title > Dealing With Overflow Issues </ title > < style > . box { width : 200 px ; height : 200 px ; border : 1 px solid black ; display : inline-block ; } /* * The `overflow` property's `scroll` setting adds a scrollbar * to an element when the content overflows which allows them * to scroll through the content. */ # box-2 { overflow : scroll ; } /* * The `overflow` property's `hidden` setting hides any content * that overflows an HTML element. */ # box-3 { overflow : hidden ; } </ style > </ head > < body > <!-- This text will overflow outside of the box since we don't use `overflow` to control it . --> < div id = \"box-1\" class = \"box\" > < p > Bacon ipsum dolor amet kevin pancetta landjaeger beef doner, turducken frankfurter burgdoggen spare ribs brisket chuck sirloin. Picanha jowl meatloaf meatball sausage kevin frankfurter buffalo ball tip strip steak jerky. Swine biltong tenderloin, turducken short loin kevin filet mignon chislic pig pork belly chicken meatball shank capicola. Sirloin turkey frankfurter pig. </ p > </ div > < div id = \"box-2\" class = \"box\" > < p > Bacon ipsum dolor amet kevin pancetta landjaeger beef doner, turducken frankfurter burgdoggen spare ribs brisket chuck sirloin. Picanha jowl meatloaf meatball sausage kevin frankfurter buffalo ball tip strip steak jerky. Swine biltong tenderloin, turducken short loin kevin filet mignon chislic pig pork belly chicken meatball shank capicola. Sirloin turkey frankfurter pig. </ p > </ div > < div id = \"box-3\" class = \"box\" > < p > Bacon ipsum dolor amet kevin pancetta landjaeger beef doner, turducken frankfurter burgdoggen spare ribs brisket chuck sirloin. Picanha jowl meatloaf meatball sausage kevin frankfurter buffalo ball tip strip steak jerky. Swine biltong tenderloin, turducken short loin kevin filet mignon chislic pig pork belly chicken meatball shank capicola. Sirloin turkey frankfurter pig. </ p > </ div > </ body > </ html > Further Reading MDN - Overflowing Content web.dev - Overflow CSS Tricks - The CSS Overflow Property Inheritance \u00b6 Some CSS properties are passed on to children of HTML elements. For example, the color property will be passed to child elements. You can still override styles that are inherited by using a more specific selector for a child element. <!DOCTYPE html> < html > < head > < title > inheritance </ title > < style > div { color : blue ; font-size : 32 px ; } . warning { color : red ; } </ style > </ head > < body > < div > < p > This is blue because of inheritance! </ p > < p class = \"warning\" > This is red because of specificity. </ p > </ div > </ body > </ html > Further Reading MDN - Understanding Inheritance web.dev - Inheritance Layouts \u00b6 The following layout properties allow you position elements in the web page. The Position property \u00b6 The position property allows you to position an element in the document. You may use top , left , right , bottom properties to position the element. Position Static \u00b6 Default position property, can be moved with margin but will affect adjoining elements. <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . box { width : 300 px ; height : 200 px ; margin : 10 px ; display : inline-block ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : static ; margin-top : 50 px ; margin-left : 100 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: static </ h1 > < div id = \"box-1\" class = \"box static\" ></ div > < div id = \"box-2\" class = \"box static\" ></ div > < div id = \"box-3\" class = \"box static\" ></ div > < div id = \"box-4\" class = \"box static\" ></ div > </ div > </ body > </ html > Position Relative \u00b6 Position relative changes the position of the element in respect to the adjoining elements. It overlaps over adjoining elements: <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . box { width : 300 px ; height : 200 px ; margin : 10 px ; display : inline-block ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : relative ; top : 100 px ; left : 40 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: relative </ h1 > < div id = \"box-1\" class = \"box relative\" ></ div > < div id = \"box-2\" class = \"box relative\" ></ div > < div id = \"box-3\" class = \"box relative\" ></ div > < div id = \"box-4\" class = \"box relative\" ></ div > </ div > </ body > </ html > Position Absolute \u00b6 Position absolute changes the element's position in relation to the whole page: <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . box { width : 300 px ; height : 200 px ; margin : 10 px ; display : inline-block ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : absolute ; top : 100 px ; right : 40 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: absolute </ h1 > < div id = \"box-1\" class = \"box absolute\" ></ div > < div id = \"box-2\" class = \"box absolute\" ></ div > < div id = \"box-3\" class = \"box absolute\" ></ div > < div id = \"box-4\" class = \"box absolute\" ></ div > </ div > </ body > </ html > Position Absolute inside of parent element with position relative \u00b6 We can also give relative position the parent element, which will position the element in respect to the parent element rather than the whole page. <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . container { width : 850 px ; min-height : 400 px ; border-radius : 15 px ; padding : 20 px ; margin : auto ; cursor : pointer ; /* Give position relative the parent element*/ position : relative ; } . box { width : 300 px ; height : 200 px ; margin : 10 px ; display : inline-block ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : absolute ; left : 100 px ; bottom : 100 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: absolute with relative parent </ h1 > < div id = \"box-1\" class = \"box\" ></ div > < div id = \"box-2\" class = \"box\" ></ div > < div id = \"box-3\" class = \"box\" ></ div > < div id = \"box-4\" class = \"box\" ></ div > </ div > </ body > </ html > Position Fixed \u00b6 Position fixed will position the element in respect to the window and will not move it's position: <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . box { width : 300 px ; height : 200 px ; margin : 10 px ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : fixed ; top : 100 px ; left : 100 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: fixed </ h1 > < div id = \"box-1\" class = \"box fixed\" ></ div > < div id = \"box-2\" class = \"box fixed\" ></ div > < div id = \"box-3\" class = \"box fixed\" ></ div > < div id = \"box-4\" class = \"box fixed\" ></ div > </ div > </ body > </ html > Further Reading MDN - Positioning web.dev - Positioning CSS Tricks - Absolute, Relative, Fixed Positioning: How Do They Differ? Flexbox layout \u00b6 CSS flexbox allows you to create a flexible layout: <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . container { width : 850 px ; min-height : 400 px ; border-radius : 15 px ; padding : 20 px ; margin : auto ; cursor : pointer ; /* Set the display property to flex for the parent element */ display : flex ; /* Grid type: Properties: row, row-reverse, column, column-reverse*/ flex-direction : row ; /* Avoid having all children elements in the same row: Properties: no-wrap, wrap, wrap-reverse */ flex-wrap : wrap ; /* Justify Content defines the alignment of the flex-items: Properties: flex-start, flex-end, center, space-between, space-around, space-evenly*/ justify-content : space-around ; } . box { width : 300 px ; height : 200 px ; margin : 10 px ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } </ style > </ head > < body > < h1 > Flexbox </ h1 > < div class = \"container\" > < div id = \"box-1\" class = \"box\" ></ div > < div id = \"box-2\" class = \"box\" ></ div > < div id = \"box-3\" class = \"box\" ></ div > < div id = \"box-4\" class = \"box\" ></ div > </ div > </ body > </ html > Further Reading MDN - Flexbox CSS Tricks - A Complete Guide to Flexbox web.dev - Flexbox Responsive Design \u00b6 You can use Media Queries to define styling based on the device type, such as device width. You may use the @media rule to make your websites responsive by creating conditions based on device breakpoints. The condition is created using the properties min-width and max-width. Note Browsers by default zoom out the page to fit on the screen you open. For media queries to work, we don't want this zooming out. To disable this zooming out we need to use <meta> tag. <!DOCTYPE html> < html > < head > < title > Responsive Design </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < style > # insect { height : 100 % ; background-size : contain ; background-repeat : no-repeat ; background-position : bottom ; width : 100 px ; margin : auto ; margin-top : -100 px ; background-image : url ( \"larve.png\" ); transition : 1 s all ease ; } @ media ( min-width : 400px ) and ( max-width : 768px ) { # insect { width : 150 px ; background-image : url ( \"caterpillar.png\" ); } } @ media ( min-width : 768px ) and ( max-width : 1100px ) { # insect { width : 170 px ; background-image : url ( \"butterfly1.png\" ); } } @ media ( min-width : 1100px ) { # insect { width : 250 px ; background-image : url ( \"butterfly2.png\" ); } } </ style > </ head > < body > < div id = \"insect\" ></ div > </ body > </ html > Further Reading MDN - Beginners Guide to Media Queries CSS Tricks - A Complete Guide to CSS Media Queries Selectors \u00b6 CSS Selectors allow you to access HTML elements to style. Below are some of the common CSS selectors you may use. <!DOCTYPE html> < html > < head > < title > Selectors </ title > < style > /* Element Selector*/ div { border : 3 px groove black ; } /* Class Selector */ . object { border-width : 10 px ; border-color : blueviolet ; } /* ID Selector */ # heading { color : red ; } /* Element+class */ div . container { box-shadow : 10 px 10 px 10 px black ; } /* Attribute Selector */ input [ type = \"text\" ] { border : none ; border-bottom : 2 px solid black ; } /* Targeting Multiple Selectors */ em , span { color : rgb ( 252 , 106 , 206 ); } /* Combinators */ /* Descendent Combinator */ p em : hover { font-size : 30 px ; } /* Adjacent Sibling Combinator */ li + li { color : rgb ( 4 , 255 , 0 ); } /* Child Combinator */ . combinator > p { color : red ; } </ style > </ head > < body > < div class = \"container\" > < div class = \"object\" > < h1 id = \"heading\" > Hello! </ h1 > < p > Some text < em > goes here </ em ></ p > < span > Hello </ span > </ div > < div class = \"list\" > < ol > < li > One </ li > < li > Two </ li > < li > Three </ li > </ ol > < input type = \"text\" placeholder = \"Name\" /> < input type = \"submit\" value = \"Enter\" /> </ div > < div class = \"combinator\" > < h2 > Heading 2 </ h2 > < p > Some text < em > here </ em > yay! </ p > </ div > </ div > </ body > </ html > Further Reading MDN - CSS Selectors web.dev - Selectors CSS Tricks - Beginner Concepts: How CSS Selectors Work Specificity And The Cascade \u00b6 When applying styles to HTML elements there are two principles, specificity and the cascade, that can influence which styles are applied to a given element. Specificity \u00b6 Specificity is calculated by how you selected an element or group of HTML elements. For example, the element with the id danger below has red text, even though there's a style rule selecting all <p> elements and turning them blue: <!DOCTYPE html> < html > < head > < title > Specificity and the Cascade </ title > < style > p { color : blue ; font-size : 32 px ; } # danger { color : red ; } </ style > </ head > < body > < p > This is blue. </ p > < p id = \"danger\" > This is red! </ p > < p > This is also blue. </ p > < p > But, we're all the same size. </ p > </ body > </ html > The Cascade \u00b6 The cascade applies to where in the CSS styles a style rule lies. If you are targeting a selector in two places, the one furthest down the page wins for any style rules that are conflicting. Note how there are no blue <p> tags in the example below because the second CSS rule overwrites the color property of the first: <!DOCTYPE html> < html > < head > < title > Specificity and the Cascade </ title > < style > p { color : blue ; font-size : 32 px ; } p { color : red ; } </ style > </ head > < body > < p > This is red, the blue color was overwritten! </ p > < p > This is also red! </ p > < p > But, we're all the same size. </ p > </ body > </ html > Further Reading MDN - Understanding the Cascade web.dev - The Cascade web.dev - Specificity CSS Tricks - Specifics on CSS Specificity CSS Tricks - The \"C\" in CSS: The Cascade Styling Elements Based on State \u00b6 CSS allows you to change the styling of an element depending on its state . When an element is hovered over or visited, you can modify its styling. <!DOCTYPE html> < html > < head > < title > Styling based on state </ title > < style > a : link { color : red ; } a : hover { color : green ; font-size : 65 px ; } a : visited { color : teal ; } </ style > </ head > < body > < div class = \"container\" > < a href = \"page2.html\" > Link </ a > </ div > </ body > </ html > Further Reading MDN - Pseudo-classes MDN - Styling some links web.dev - Pseudo-classes CSS Tricks - Pseudo-class Selectors Styling Text \u00b6 Text styling can be one of the most enjoyable aspects of web development! To add styling to the text, you can use properties like color , font-size , and font-family . <!DOCTYPE html> < html > < head > < title > Text Styling </ title > < link href = \"https://fonts.googleapis.com/css2?family=Amatic+SC&family=Chakra+Petch:wght@300&display=swap\" rel = \"stylesheet\" /> < style > body { /* Changes the font style */ font-family : \"Amatic SC\" , cursive ; /*Changes the alignment of text */ text-align : center ; } h1 { /* Changes the color of text */ color : olivedrab ; /* Changes the size of text */ font-size : 60 px ; /* Adds shadow styling to text */ text-shadow : 10 px 10 px 10 px greenyellow ; } p { text-align : left ; font-family : \"Chakra Petch\" , sans-serif ; font-size : 20 px ; /*Changes the height of text */ line-height : 25 px ; width : 50 % ; margin : auto ; padding : 10 px ; } span { /* Adds decoration to text */ text-decoration : line-through ; text-decoration-color : red ; padding : 10 px ; } </ style > </ head > < body > < div class = \"container\" > < h1 > Hello! </ h1 > < h2 > Welcome to my website! </ h2 > < img src = \"tacos.png\" /> < p > Every day is taco ipsum tuesday. Fish tacos: lettuce or cabbage, pico de gallo, avocado and a sour cream or citrus/mayonnaise sauce, all placed on top of a corn or flour tortilla. Tacos, again? This will be 5 times this week and it\u2019s only Tuesday. 50 cent tacos! I\u2019ll take 30. It\u2019s raining tacos, from out of the sky, tacos, don\u2019t even ask why. </ p > < p > Um, < span > Tabasco? </ span > No thanks, do you have any Cholula? Shrimp tacos are tasty tacos! Does guac cost extra? Tacos Al pastor/De Adobada are made of thin pork steaks seasoned with adobo seasoning, then skewered and overlapped on one another on a vertical rotisserie cooked and flame-broiled as it spins. Carne asada on corn tortillas. Give me all the tacos, immediately. </ p > </ div > </ body > </ html > Further Reading MDN - Fundamental Text and Font Styling web.dev - Text and Typography Values and Units \u00b6 There are different types of values that CSS properties accept with varying units of measurement for those values. Size Units \u00b6 When measuring size, we generally use px (pixels) or % (percentage): <!DOCTYPE html> < html > < head > < title > Measuring Size </ title > < style > /* * The `width` and `height` properties measure the size of the box, * so `px` is a good unit of measurement. */ # red-box { width : 200 px ; height : 200 px ; background-color : red ; } /* * The `%` unit is nice when you want something sized relative * to something else. Since the #blue-box is inside the #red-box * this will build a blue box that is exactly half the width and * height of the red box. */ # blue-box { width : 50 % ; height : 50 % ; background-color : blue ; } /* * The `%` unit also works well with the `border-radius` property * when you want to build a circle out of a `<div>`. */ # green-circle { width : 200 px ; height : 200 px ; border-radius : 50 % ; background-color : green ; } /* * The `font-size` property measures how big the font will * be, and this is also a size which makes sense in `px`. */ # about-me { font-size : 24 px ; } </ style > </ head > < body > < div id = \"red-box\" > < div id = \"blue-box\" ></ div > </ div > < div id = \"green-circle\" ></ div > < p id = \"about-me\" > I like to code, eat tacos, and read! </ p > </ body > </ html > Color Units \u00b6 Measuring color is generally done using a color keyword, hex value, or RGB value. The color keywords are easier to read but give you less control over the final color. The hex/RGB values are harder to read but give you many more options for coloring an element. <!DOCTYPE html> < html > < head > < title > Measuring Color </ title > < style > /* * Using a color keyword like `red` makes it easy to read * which color an element will be. */ # red-box { width : 200 px ; height : 200 px ; background-color : red ; } /* * The `rgb()` function allows you to express a color as * a mix of three numbers: * * 1. The amount of red in the color * 2. The amount of green in the color * 3. The amount of blue in the color */ # blue-box { width : 50 % ; height : 50 % ; background-color : rgb ( 54 , 54 , 233 ); } /* * The `rgba()` function allows you to express a color as * a mix of three numbers with the addition of Alpha value which allows for the color to become transparent: * * 1. The amount of red in the color * 2. The amount of green in the color * 3. The amount of blue in the color 4. Decimal value between 0 and 1 */ # pink-box { width : 50 % ; height : 50 % ; background-color : rgba ( 54 , 54 , 233 , 0.4 ); } /* * Hexadecimal values (Hex for short) can express the same * variations in color that `rgb()` values do, but in a more * concise notation. */ # green-circle { width : 200 px ; height : 200 px ; border-radius : 50 % ; background-color : #40ff73 ; } </ style > </ head > < body > < div id = \"red-box\" > < div id = \"blue-box\" ></ div > </ div > < div id = \"pink-box\" ></ div > < div id = \"green-circle\" ></ div > </ body > </ html > Time Units \u00b6 For animations, you need to be able to measure the amount of time an animation should run. This uses the s (seconds) unit of measurement: <!DOCTYPE html> < html > < head > < title > Measuring Time </ title > < style > /* * The `animation-duration` property is measured in seconds. */ # red-box { width : 200 px ; height : 200 px ; position : absolute ; background-color : red ; animation-name : backAndForth ; animation-duration : 3 s ; animation-iteration-count : infinite ; animation-direction : alternate ; } @ keyframes backAndForth { from { left : 0 px ; } to { left : 200 px ; } } </ style > </ head > < body > < div id = \"red-box\" ></ div > </ body > </ html > Measurements Without Units \u00b6 Some properties don't have a unit of measurement but instead use a regular number. The opacity property is one of the common properties you'll use that use a regular number instead of a unit. <!DOCTYPE html> < html > < head > < title > Measurements With No Units </ title > < style > . box { width : 200 px ; height : 200 px ; background-color : red ; margin : 12 px ; } /* * This will allow 25% of the background to shine through * the red box. */ # box-1 { opacity : 0.75 ; } /* * This will allow 50% of the background to shine through * the red box. */ # box-2 { opacity : 0.5 ; } /* * This will allow 75% of the background to shine through * the red box. */ # box-3 { opacity : 0.25 ; } </ style > </ head > < body > < div id = \"box-1\" class = \"box\" ></ div > < div id = \"box-2\" class = \"box\" ></ div > < div id = \"box-3\" class = \"box\" ></ div > </ body > </ html > Further Reading MDN - Values and Units web.dev - Sizing Units CSS Tricks - The Lengths of CSS Working with Backgrounds \u00b6 HTML elements can have colors, images, or both as their backgrounds: <!DOCTYPE html> < html > < head > < title > Working with Backgrounds </ title > < style > . box { width : 200 px ; height : 200 px ; border : 1 px solid black ; margin : 10 px auto ; } /* * The `background-color` property allows you to add a * color to the entire background of an element. */ # box-1 { background-color : red ; } /* * The `background-image` property allows you to add an * image to the background. It will repeat by default if * it is smaller than the box it is contained in. */ # box-2 { background-image : url ( taco.png ); } /* * The `background-repeat` and `background-position` properties * give you more control over a background image in an element. */ # box-3 { background-image : url ( hot-dog.jpeg ); background-repeat : no-repeat ; background-position : center ; background-color : blue ; } </ style > </ head > < body > < div id = \"box-1\" class = \"box\" ></ div > < div id = \"box-2\" class = \"box\" ></ div > < div id = \"box-3\" class = \"box\" ></ div > </ body > </ html > Further Reading MDN - Backgrounds and Borders web.dev - Backgrounds CSS Tricks - Using Multiple Backgrounds CSS Animations \u00b6 CSS animation properties allow you to create animation on elements. <!DOCTYPE html> < html > < head > < title > Animations </ title > < style > . animate { width : 200 px ; height : 200 px ; margin : auto ; position : absolute ; } # green-circle { border-radius : 50 % ; background-color : #40ff73 ; box-shadow : inset -5 px -5 px 10 px rgb ( 57 , 57 , 57 ); /* shorthand animation property combines all 6 animation properties */ /* duration easing-function delay iteration-count direction name */ animation : 1 s ease-in 1 s infinite alternate bounce ; } # red-box { border-radius : 10 % ; top : 100 px ; left : 600 px ; background-color : #ff1141 ; box-shadow : inset 5 px 5 px 10 px rgb ( 57 , 57 , 57 ); background-image : linear-gradient ( rgb ( 255 , 173 , 187 ), rgb ( 80 , 255 , 211 )); /* longhand animation properties*/ animation-name : rotate_box ; animation-duration : 4 s ; animation-iteration-count : infinite ; animation-direction : alternate-reverse ; } /* @keyframes controls the steps of the animations */ @ keyframes bounce { from { top : 0 px ; } to { top : 400 px ; box-shadow : inset -5 px -5 px 10 px rgb ( 57 , 57 , 57 ), -5 px 10 px 20 px black ; } } @ keyframes rotate_box { 0 % { transform : rotate ( 0 deg ); } 50 % { width : 150 px ; height : 150 px ; } 100 % { transform : rotate ( 180 deg ); background-image : linear-gradient ( rgb ( 80 , 255 , 211 ), rgb ( 255 , 173 , 187 )); } } </ style > </ head > < body > < div class = \"container\" > < div class = \"animate\" id = \"red-box\" ></ div > < div class = \"animate\" id = \"green-circle\" ></ div > </ div > </ body > </ html >","title":"CSS Language"},{"location":"css/css/#css-language","text":"CSS (Cascading Stylesheets) is used to define the style of a webpage. Think of it like the choice of paint, wood, window curtains, etc. when building a house. When you visit a website, the CSS is what the gives the webpage its fancy design! We use CSS in the following courses at CWHQ: Elementary Middle School High School Fundamental Programming Concepts Webpages with HTML & CSS Fundamentals of Web Development Web Development For Kids - 1 Capstone 1 User Interface Development Web Development For Kids - 2 User Interface Development Capstone 1 Creating Websites with HTML/CSS Responsive Web Development APIs and Databases Responsive Websites with HTML/CSS Interactive JavaScript Professional Web App Development Interactive Websites with JavaScript Web Interfaces Modern CSS Frameworks Capstone 3 Capstone 2 Capstone 2 Mastering APIs Mastering MVC Framework Capstone 3 Object Relational Mapping DevOps and Software Engineering Capstone 3 In this section of our documentation, you'll find references to most of the core CSS language features that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent CSS resources: MDN CSS Docs web.dev Learn CSS CSS Tricks","title":"CSS Language"},{"location":"css/css/#including-css-in-html-documents","text":"In order for CSS style rules to apply to an HTML document, you must include them in the document in some way.","title":"Including CSS In HTML Documents"},{"location":"css/css/#including-css-in-the-head","text":"Generally, CSS is added in the <head> of an HTML document. You can link an external CSS file using a <link> tag, or you can write CSS directly in an HTML document using the <style> tag. Both methods are shown below. /* style.css */ h1 { color : red ; } <!DOCTYPE html> < html > < head > < title > Including CSS in HTML Documents </ title > <!-- This is an external stylesheet --> < link rel = \"stylesheet\" href = \"style.css\" /> < style > p { color : blue ; } </ style > </ head > < body > < h1 > This is red because of the CSS in style.css </ h1 > < p > This is blue because of the CSS in the style tag </ p > </ body > </ html >","title":"Including CSS In The &lt;head&gt;"},{"location":"css/css/#inline-css","text":"You can also write CSS style rules directly in an HTML tag using the style attribute, but this is generally discouraged. <!DOCTYPE html> < html > < head > < title > Including CSS in HTML Documents </ title > </ head > < body > < h1 style = \"color: red;\" > This is red because of the CSS in this element's style attribute </ h1 > </ body > </ html > Further Reading MDN - Applying CSS to HTML CSS Tricks - The Second \"S\" In CSS","title":"Inline CSS"},{"location":"css/css/#borders","text":"The border property can create a styled border for elements. Below are some border examples: <!DOCTYPE html> < html > < head > < title > Borders </ title > < style > . box { width : 150 px ; height : 150 px ; border : 10 px solid yellowgreen ; display : inline-block ; margin : 10 px ; margin-top : 100 px ; background-color : rgba ( 176 , 166 , 181 , 0.787 ); } . box-1 { border : 10 px dotted teal ; } . box-2 { border : 10 px dashed violet ; } . box-3 { border : 10 px groove cyan ; } /* border-radius property can be used to round edges or make a complete circle for an element */ . box-4 { border-radius : 50 % ; } . box-5 { border-radius : 10 px ; } /* Below are some longhand border properties */ . box-6 { /* Border Style Longhand */ border-style : double ; /* Border Width Longhand */ border-width : 20 px ; /* Border Color Longhand */ border-color : rgb ( 24 , 237 , 173 ); /* Border Bottom Longhand */ border-bottom : 20 px double green ; } </ style > </ head > < body > < div class = \"container\" > < div class = \"box box-1\" ></ div > < div class = \"box box-2\" ></ div > < div class = \"box box-3\" ></ div > < div class = \"box box-4\" ></ div > < div class = \"box box-5\" ></ div > < div class = \"box box-6\" ></ div > </ div > </ body > </ html >","title":"Borders"},{"location":"css/css/#box-model","text":"The box model is used by every HTML element. The box model has margin, border, padding, and content and is used to form a visual \"box\". <!DOCTYPE html> < html > < head > < title > Box Model </ title > < style > . box { margin : auto ; border : 10 px solid red ; padding : 20 px ; text-align : center ; width : 300 px ; height : 300 px ; } </ style > </ head > < body > < div class = \"box\" > < p > Content </ p > </ div > </ body > </ html >","title":"Box Model"},{"location":"css/css/#block-and-inline","text":"The terms block and inline refer to two different types of boxes. The width and height properties can be used on elements with the display property set to block (which is also the default display property). If the value of an element is inline , the box will not break on a new line, and the width and height properties will be ignored. <!DOCTYPE html> < html > < head > < title > Box Model </ title > < style > . box { margin : auto ; border : 5 px solid red ; padding : 20 px ; text-align : center ; width : 300 px ; height : 300 px ; } . inline-box { display : inline ; } . block-box { display : inline-block ; } </ style > </ head > < body > < div class = \"box\" > < p > Content </ p > </ div > < div class = \"box\" > < p > Content </ p > </ div > < div class = \"box inline-box\" > < p > Content </ p > </ div > < div class = \"box inline-box\" > < p > Content </ p > </ div > < div class = \"box block-box\" > < p > Content </ p > </ div > < div class = \"box block-box\" > < p > Content </ p > </ div > </ body > </ html >","title":"Block and Inline"},{"location":"css/css/#longhand-properties","text":"Margin and Padding can also be used to create specified spacing using the longhand properties: <!DOCTYPE html> < html > < head > < title > Box Model </ title > < style > . box { border : 5 px solid red ; padding : 20 px ; text-align : center ; width : 200 px ; height : 200 px ; font-size : 30 px ; /* Margin Longhand Properties */ margin-top : 2 px ; margin-bottom : 4 px ; margin-left : 6 px ; margin-right : 8 px ; /* Padding Longhand Properties */ padding-top : 2 px ; padding-bottom : 4 px ; padding-left : 6 px ; padding-right : 8 px ; } </ style > </ head > < body > < div class = \"box\" > < p > Content </ p > </ div > </ body > </ html > Further Reading MDN - The Box Model web.dev - Box Model CSS Tricks - The CSS Box Model","title":"Longhand Properties"},{"location":"css/css/#comments","text":"In CSS you can create comments between /* */ blocks. They can be single line or multiline. <!DOCTYPE html> < html > < head > < title > CSS Comments </ title > < style > /* This is a single line comment */ /* This spans multiple lines */ </ style > </ head > < body ></ body > </ html > Further Reading MDN - Comments","title":"Comments"},{"location":"css/css/#css-rule-basics","text":"CSS works by selecting one or more HTML elements and then applying styles to those HTML elements. The way to select elements can be as simple as writing the HTML tag name, targeting tags with a common class or id, or even targeting tags based on some state such as being hovered over. The basic syntax is: selector { property : value ; otherproperty : otherValue ; anotherproperty : value1 value2 value3 ; } Notice that property/value pairs can be one-to-one or one-to-many. Here's an example of targeting a few elements and applying styles to them: <!DOCTYPE html> < html > < head > < title > CSS Rule Basics </ title > < style > # page-title { color : green ; text-shadow : 20 px 15 px 4 px black ; } p { color : blue ; text-decoration : underline ; border : 10 px solid red ; padding : 24 px ; font-size : 42 px ; } </ style > </ head > < body > < h1 id = \"page-title\" > This text is green and has a text shadow added. </ h1 > < p > Each paragraph tag has the same styles because we targeted the \"p\" selector. </ p > < p > See what I mean? </ p > </ body > </ html >","title":"CSS Rule Basics"},{"location":"css/css/#dealing-with-overflow-issues","text":"When you constrain the size of an HTML element and add content into it, there's a chance that the content can overflow. The overflow property gives you the ability to control how overflow issues are dealt with in an element with a constrained width and/or height. <!DOCTYPE html> < html > < head > < title > Dealing With Overflow Issues </ title > < style > . box { width : 200 px ; height : 200 px ; border : 1 px solid black ; display : inline-block ; } /* * The `overflow` property's `scroll` setting adds a scrollbar * to an element when the content overflows which allows them * to scroll through the content. */ # box-2 { overflow : scroll ; } /* * The `overflow` property's `hidden` setting hides any content * that overflows an HTML element. */ # box-3 { overflow : hidden ; } </ style > </ head > < body > <!-- This text will overflow outside of the box since we don't use `overflow` to control it . --> < div id = \"box-1\" class = \"box\" > < p > Bacon ipsum dolor amet kevin pancetta landjaeger beef doner, turducken frankfurter burgdoggen spare ribs brisket chuck sirloin. Picanha jowl meatloaf meatball sausage kevin frankfurter buffalo ball tip strip steak jerky. Swine biltong tenderloin, turducken short loin kevin filet mignon chislic pig pork belly chicken meatball shank capicola. Sirloin turkey frankfurter pig. </ p > </ div > < div id = \"box-2\" class = \"box\" > < p > Bacon ipsum dolor amet kevin pancetta landjaeger beef doner, turducken frankfurter burgdoggen spare ribs brisket chuck sirloin. Picanha jowl meatloaf meatball sausage kevin frankfurter buffalo ball tip strip steak jerky. Swine biltong tenderloin, turducken short loin kevin filet mignon chislic pig pork belly chicken meatball shank capicola. Sirloin turkey frankfurter pig. </ p > </ div > < div id = \"box-3\" class = \"box\" > < p > Bacon ipsum dolor amet kevin pancetta landjaeger beef doner, turducken frankfurter burgdoggen spare ribs brisket chuck sirloin. Picanha jowl meatloaf meatball sausage kevin frankfurter buffalo ball tip strip steak jerky. Swine biltong tenderloin, turducken short loin kevin filet mignon chislic pig pork belly chicken meatball shank capicola. Sirloin turkey frankfurter pig. </ p > </ div > </ body > </ html > Further Reading MDN - Overflowing Content web.dev - Overflow CSS Tricks - The CSS Overflow Property","title":"Dealing with Overflow Issues"},{"location":"css/css/#inheritance","text":"Some CSS properties are passed on to children of HTML elements. For example, the color property will be passed to child elements. You can still override styles that are inherited by using a more specific selector for a child element. <!DOCTYPE html> < html > < head > < title > inheritance </ title > < style > div { color : blue ; font-size : 32 px ; } . warning { color : red ; } </ style > </ head > < body > < div > < p > This is blue because of inheritance! </ p > < p class = \"warning\" > This is red because of specificity. </ p > </ div > </ body > </ html > Further Reading MDN - Understanding Inheritance web.dev - Inheritance","title":"Inheritance"},{"location":"css/css/#layouts","text":"The following layout properties allow you position elements in the web page.","title":"Layouts"},{"location":"css/css/#the-position-property","text":"The position property allows you to position an element in the document. You may use top , left , right , bottom properties to position the element.","title":"The Position property"},{"location":"css/css/#position-static","text":"Default position property, can be moved with margin but will affect adjoining elements. <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . box { width : 300 px ; height : 200 px ; margin : 10 px ; display : inline-block ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : static ; margin-top : 50 px ; margin-left : 100 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: static </ h1 > < div id = \"box-1\" class = \"box static\" ></ div > < div id = \"box-2\" class = \"box static\" ></ div > < div id = \"box-3\" class = \"box static\" ></ div > < div id = \"box-4\" class = \"box static\" ></ div > </ div > </ body > </ html >","title":"Position Static"},{"location":"css/css/#position-relative","text":"Position relative changes the position of the element in respect to the adjoining elements. It overlaps over adjoining elements: <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . box { width : 300 px ; height : 200 px ; margin : 10 px ; display : inline-block ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : relative ; top : 100 px ; left : 40 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: relative </ h1 > < div id = \"box-1\" class = \"box relative\" ></ div > < div id = \"box-2\" class = \"box relative\" ></ div > < div id = \"box-3\" class = \"box relative\" ></ div > < div id = \"box-4\" class = \"box relative\" ></ div > </ div > </ body > </ html >","title":"Position Relative"},{"location":"css/css/#position-absolute","text":"Position absolute changes the element's position in relation to the whole page: <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . box { width : 300 px ; height : 200 px ; margin : 10 px ; display : inline-block ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : absolute ; top : 100 px ; right : 40 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: absolute </ h1 > < div id = \"box-1\" class = \"box absolute\" ></ div > < div id = \"box-2\" class = \"box absolute\" ></ div > < div id = \"box-3\" class = \"box absolute\" ></ div > < div id = \"box-4\" class = \"box absolute\" ></ div > </ div > </ body > </ html >","title":"Position Absolute"},{"location":"css/css/#position-absolute-inside-of-parent-element-with-position-relative","text":"We can also give relative position the parent element, which will position the element in respect to the parent element rather than the whole page. <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . container { width : 850 px ; min-height : 400 px ; border-radius : 15 px ; padding : 20 px ; margin : auto ; cursor : pointer ; /* Give position relative the parent element*/ position : relative ; } . box { width : 300 px ; height : 200 px ; margin : 10 px ; display : inline-block ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : absolute ; left : 100 px ; bottom : 100 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: absolute with relative parent </ h1 > < div id = \"box-1\" class = \"box\" ></ div > < div id = \"box-2\" class = \"box\" ></ div > < div id = \"box-3\" class = \"box\" ></ div > < div id = \"box-4\" class = \"box\" ></ div > </ div > </ body > </ html >","title":"Position Absolute inside of parent element with position relative"},{"location":"css/css/#position-fixed","text":"Position fixed will position the element in respect to the window and will not move it's position: <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . box { width : 300 px ; height : 200 px ; margin : 10 px ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } # box-1 { position : fixed ; top : 100 px ; left : 100 px ; background-color : rgba ( 11 , 255 , 113 , 0.5 ); } </ style > </ head > < body > < div class = \"container\" > < h1 > position: fixed </ h1 > < div id = \"box-1\" class = \"box fixed\" ></ div > < div id = \"box-2\" class = \"box fixed\" ></ div > < div id = \"box-3\" class = \"box fixed\" ></ div > < div id = \"box-4\" class = \"box fixed\" ></ div > </ div > </ body > </ html > Further Reading MDN - Positioning web.dev - Positioning CSS Tricks - Absolute, Relative, Fixed Positioning: How Do They Differ?","title":"Position Fixed"},{"location":"css/css/#flexbox-layout","text":"CSS flexbox allows you to create a flexible layout: <!DOCTYPE html> < html > < head > < title > Layouts </ title > < style > . container { width : 850 px ; min-height : 400 px ; border-radius : 15 px ; padding : 20 px ; margin : auto ; cursor : pointer ; /* Set the display property to flex for the parent element */ display : flex ; /* Grid type: Properties: row, row-reverse, column, column-reverse*/ flex-direction : row ; /* Avoid having all children elements in the same row: Properties: no-wrap, wrap, wrap-reverse */ flex-wrap : wrap ; /* Justify Content defines the alignment of the flex-items: Properties: flex-start, flex-end, center, space-between, space-around, space-evenly*/ justify-content : space-around ; } . box { width : 300 px ; height : 200 px ; margin : 10 px ; border : 3 px solid rgb ( 0 , 204 , 255 ); background : rgba ( 65 , 60 , 198 , 0.5 ); } </ style > </ head > < body > < h1 > Flexbox </ h1 > < div class = \"container\" > < div id = \"box-1\" class = \"box\" ></ div > < div id = \"box-2\" class = \"box\" ></ div > < div id = \"box-3\" class = \"box\" ></ div > < div id = \"box-4\" class = \"box\" ></ div > </ div > </ body > </ html > Further Reading MDN - Flexbox CSS Tricks - A Complete Guide to Flexbox web.dev - Flexbox","title":"Flexbox layout"},{"location":"css/css/#responsive-design","text":"You can use Media Queries to define styling based on the device type, such as device width. You may use the @media rule to make your websites responsive by creating conditions based on device breakpoints. The condition is created using the properties min-width and max-width. Note Browsers by default zoom out the page to fit on the screen you open. For media queries to work, we don't want this zooming out. To disable this zooming out we need to use <meta> tag. <!DOCTYPE html> < html > < head > < title > Responsive Design </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < style > # insect { height : 100 % ; background-size : contain ; background-repeat : no-repeat ; background-position : bottom ; width : 100 px ; margin : auto ; margin-top : -100 px ; background-image : url ( \"larve.png\" ); transition : 1 s all ease ; } @ media ( min-width : 400px ) and ( max-width : 768px ) { # insect { width : 150 px ; background-image : url ( \"caterpillar.png\" ); } } @ media ( min-width : 768px ) and ( max-width : 1100px ) { # insect { width : 170 px ; background-image : url ( \"butterfly1.png\" ); } } @ media ( min-width : 1100px ) { # insect { width : 250 px ; background-image : url ( \"butterfly2.png\" ); } } </ style > </ head > < body > < div id = \"insect\" ></ div > </ body > </ html > Further Reading MDN - Beginners Guide to Media Queries CSS Tricks - A Complete Guide to CSS Media Queries","title":"Responsive Design"},{"location":"css/css/#selectors","text":"CSS Selectors allow you to access HTML elements to style. Below are some of the common CSS selectors you may use. <!DOCTYPE html> < html > < head > < title > Selectors </ title > < style > /* Element Selector*/ div { border : 3 px groove black ; } /* Class Selector */ . object { border-width : 10 px ; border-color : blueviolet ; } /* ID Selector */ # heading { color : red ; } /* Element+class */ div . container { box-shadow : 10 px 10 px 10 px black ; } /* Attribute Selector */ input [ type = \"text\" ] { border : none ; border-bottom : 2 px solid black ; } /* Targeting Multiple Selectors */ em , span { color : rgb ( 252 , 106 , 206 ); } /* Combinators */ /* Descendent Combinator */ p em : hover { font-size : 30 px ; } /* Adjacent Sibling Combinator */ li + li { color : rgb ( 4 , 255 , 0 ); } /* Child Combinator */ . combinator > p { color : red ; } </ style > </ head > < body > < div class = \"container\" > < div class = \"object\" > < h1 id = \"heading\" > Hello! </ h1 > < p > Some text < em > goes here </ em ></ p > < span > Hello </ span > </ div > < div class = \"list\" > < ol > < li > One </ li > < li > Two </ li > < li > Three </ li > </ ol > < input type = \"text\" placeholder = \"Name\" /> < input type = \"submit\" value = \"Enter\" /> </ div > < div class = \"combinator\" > < h2 > Heading 2 </ h2 > < p > Some text < em > here </ em > yay! </ p > </ div > </ div > </ body > </ html > Further Reading MDN - CSS Selectors web.dev - Selectors CSS Tricks - Beginner Concepts: How CSS Selectors Work","title":"Selectors"},{"location":"css/css/#specificity-and-the-cascade","text":"When applying styles to HTML elements there are two principles, specificity and the cascade, that can influence which styles are applied to a given element.","title":"Specificity And The Cascade"},{"location":"css/css/#specificity","text":"Specificity is calculated by how you selected an element or group of HTML elements. For example, the element with the id danger below has red text, even though there's a style rule selecting all <p> elements and turning them blue: <!DOCTYPE html> < html > < head > < title > Specificity and the Cascade </ title > < style > p { color : blue ; font-size : 32 px ; } # danger { color : red ; } </ style > </ head > < body > < p > This is blue. </ p > < p id = \"danger\" > This is red! </ p > < p > This is also blue. </ p > < p > But, we're all the same size. </ p > </ body > </ html >","title":"Specificity"},{"location":"css/css/#the-cascade","text":"The cascade applies to where in the CSS styles a style rule lies. If you are targeting a selector in two places, the one furthest down the page wins for any style rules that are conflicting. Note how there are no blue <p> tags in the example below because the second CSS rule overwrites the color property of the first: <!DOCTYPE html> < html > < head > < title > Specificity and the Cascade </ title > < style > p { color : blue ; font-size : 32 px ; } p { color : red ; } </ style > </ head > < body > < p > This is red, the blue color was overwritten! </ p > < p > This is also red! </ p > < p > But, we're all the same size. </ p > </ body > </ html > Further Reading MDN - Understanding the Cascade web.dev - The Cascade web.dev - Specificity CSS Tricks - Specifics on CSS Specificity CSS Tricks - The \"C\" in CSS: The Cascade","title":"The Cascade"},{"location":"css/css/#styling-elements-based-on-state","text":"CSS allows you to change the styling of an element depending on its state . When an element is hovered over or visited, you can modify its styling. <!DOCTYPE html> < html > < head > < title > Styling based on state </ title > < style > a : link { color : red ; } a : hover { color : green ; font-size : 65 px ; } a : visited { color : teal ; } </ style > </ head > < body > < div class = \"container\" > < a href = \"page2.html\" > Link </ a > </ div > </ body > </ html > Further Reading MDN - Pseudo-classes MDN - Styling some links web.dev - Pseudo-classes CSS Tricks - Pseudo-class Selectors","title":"Styling Elements Based on State"},{"location":"css/css/#styling-text","text":"Text styling can be one of the most enjoyable aspects of web development! To add styling to the text, you can use properties like color , font-size , and font-family . <!DOCTYPE html> < html > < head > < title > Text Styling </ title > < link href = \"https://fonts.googleapis.com/css2?family=Amatic+SC&family=Chakra+Petch:wght@300&display=swap\" rel = \"stylesheet\" /> < style > body { /* Changes the font style */ font-family : \"Amatic SC\" , cursive ; /*Changes the alignment of text */ text-align : center ; } h1 { /* Changes the color of text */ color : olivedrab ; /* Changes the size of text */ font-size : 60 px ; /* Adds shadow styling to text */ text-shadow : 10 px 10 px 10 px greenyellow ; } p { text-align : left ; font-family : \"Chakra Petch\" , sans-serif ; font-size : 20 px ; /*Changes the height of text */ line-height : 25 px ; width : 50 % ; margin : auto ; padding : 10 px ; } span { /* Adds decoration to text */ text-decoration : line-through ; text-decoration-color : red ; padding : 10 px ; } </ style > </ head > < body > < div class = \"container\" > < h1 > Hello! </ h1 > < h2 > Welcome to my website! </ h2 > < img src = \"tacos.png\" /> < p > Every day is taco ipsum tuesday. Fish tacos: lettuce or cabbage, pico de gallo, avocado and a sour cream or citrus/mayonnaise sauce, all placed on top of a corn or flour tortilla. Tacos, again? This will be 5 times this week and it\u2019s only Tuesday. 50 cent tacos! I\u2019ll take 30. It\u2019s raining tacos, from out of the sky, tacos, don\u2019t even ask why. </ p > < p > Um, < span > Tabasco? </ span > No thanks, do you have any Cholula? Shrimp tacos are tasty tacos! Does guac cost extra? Tacos Al pastor/De Adobada are made of thin pork steaks seasoned with adobo seasoning, then skewered and overlapped on one another on a vertical rotisserie cooked and flame-broiled as it spins. Carne asada on corn tortillas. Give me all the tacos, immediately. </ p > </ div > </ body > </ html > Further Reading MDN - Fundamental Text and Font Styling web.dev - Text and Typography","title":"Styling Text"},{"location":"css/css/#values-and-units","text":"There are different types of values that CSS properties accept with varying units of measurement for those values.","title":"Values and Units"},{"location":"css/css/#size-units","text":"When measuring size, we generally use px (pixels) or % (percentage): <!DOCTYPE html> < html > < head > < title > Measuring Size </ title > < style > /* * The `width` and `height` properties measure the size of the box, * so `px` is a good unit of measurement. */ # red-box { width : 200 px ; height : 200 px ; background-color : red ; } /* * The `%` unit is nice when you want something sized relative * to something else. Since the #blue-box is inside the #red-box * this will build a blue box that is exactly half the width and * height of the red box. */ # blue-box { width : 50 % ; height : 50 % ; background-color : blue ; } /* * The `%` unit also works well with the `border-radius` property * when you want to build a circle out of a `<div>`. */ # green-circle { width : 200 px ; height : 200 px ; border-radius : 50 % ; background-color : green ; } /* * The `font-size` property measures how big the font will * be, and this is also a size which makes sense in `px`. */ # about-me { font-size : 24 px ; } </ style > </ head > < body > < div id = \"red-box\" > < div id = \"blue-box\" ></ div > </ div > < div id = \"green-circle\" ></ div > < p id = \"about-me\" > I like to code, eat tacos, and read! </ p > </ body > </ html >","title":"Size Units"},{"location":"css/css/#color-units","text":"Measuring color is generally done using a color keyword, hex value, or RGB value. The color keywords are easier to read but give you less control over the final color. The hex/RGB values are harder to read but give you many more options for coloring an element. <!DOCTYPE html> < html > < head > < title > Measuring Color </ title > < style > /* * Using a color keyword like `red` makes it easy to read * which color an element will be. */ # red-box { width : 200 px ; height : 200 px ; background-color : red ; } /* * The `rgb()` function allows you to express a color as * a mix of three numbers: * * 1. The amount of red in the color * 2. The amount of green in the color * 3. The amount of blue in the color */ # blue-box { width : 50 % ; height : 50 % ; background-color : rgb ( 54 , 54 , 233 ); } /* * The `rgba()` function allows you to express a color as * a mix of three numbers with the addition of Alpha value which allows for the color to become transparent: * * 1. The amount of red in the color * 2. The amount of green in the color * 3. The amount of blue in the color 4. Decimal value between 0 and 1 */ # pink-box { width : 50 % ; height : 50 % ; background-color : rgba ( 54 , 54 , 233 , 0.4 ); } /* * Hexadecimal values (Hex for short) can express the same * variations in color that `rgb()` values do, but in a more * concise notation. */ # green-circle { width : 200 px ; height : 200 px ; border-radius : 50 % ; background-color : #40ff73 ; } </ style > </ head > < body > < div id = \"red-box\" > < div id = \"blue-box\" ></ div > </ div > < div id = \"pink-box\" ></ div > < div id = \"green-circle\" ></ div > </ body > </ html >","title":"Color Units"},{"location":"css/css/#time-units","text":"For animations, you need to be able to measure the amount of time an animation should run. This uses the s (seconds) unit of measurement: <!DOCTYPE html> < html > < head > < title > Measuring Time </ title > < style > /* * The `animation-duration` property is measured in seconds. */ # red-box { width : 200 px ; height : 200 px ; position : absolute ; background-color : red ; animation-name : backAndForth ; animation-duration : 3 s ; animation-iteration-count : infinite ; animation-direction : alternate ; } @ keyframes backAndForth { from { left : 0 px ; } to { left : 200 px ; } } </ style > </ head > < body > < div id = \"red-box\" ></ div > </ body > </ html >","title":"Time Units"},{"location":"css/css/#measurements-without-units","text":"Some properties don't have a unit of measurement but instead use a regular number. The opacity property is one of the common properties you'll use that use a regular number instead of a unit. <!DOCTYPE html> < html > < head > < title > Measurements With No Units </ title > < style > . box { width : 200 px ; height : 200 px ; background-color : red ; margin : 12 px ; } /* * This will allow 25% of the background to shine through * the red box. */ # box-1 { opacity : 0.75 ; } /* * This will allow 50% of the background to shine through * the red box. */ # box-2 { opacity : 0.5 ; } /* * This will allow 75% of the background to shine through * the red box. */ # box-3 { opacity : 0.25 ; } </ style > </ head > < body > < div id = \"box-1\" class = \"box\" ></ div > < div id = \"box-2\" class = \"box\" ></ div > < div id = \"box-3\" class = \"box\" ></ div > </ body > </ html > Further Reading MDN - Values and Units web.dev - Sizing Units CSS Tricks - The Lengths of CSS","title":"Measurements Without Units"},{"location":"css/css/#working-with-backgrounds","text":"HTML elements can have colors, images, or both as their backgrounds: <!DOCTYPE html> < html > < head > < title > Working with Backgrounds </ title > < style > . box { width : 200 px ; height : 200 px ; border : 1 px solid black ; margin : 10 px auto ; } /* * The `background-color` property allows you to add a * color to the entire background of an element. */ # box-1 { background-color : red ; } /* * The `background-image` property allows you to add an * image to the background. It will repeat by default if * it is smaller than the box it is contained in. */ # box-2 { background-image : url ( taco.png ); } /* * The `background-repeat` and `background-position` properties * give you more control over a background image in an element. */ # box-3 { background-image : url ( hot-dog.jpeg ); background-repeat : no-repeat ; background-position : center ; background-color : blue ; } </ style > </ head > < body > < div id = \"box-1\" class = \"box\" ></ div > < div id = \"box-2\" class = \"box\" ></ div > < div id = \"box-3\" class = \"box\" ></ div > </ body > </ html > Further Reading MDN - Backgrounds and Borders web.dev - Backgrounds CSS Tricks - Using Multiple Backgrounds","title":"Working with Backgrounds"},{"location":"css/css/#css-animations","text":"CSS animation properties allow you to create animation on elements. <!DOCTYPE html> < html > < head > < title > Animations </ title > < style > . animate { width : 200 px ; height : 200 px ; margin : auto ; position : absolute ; } # green-circle { border-radius : 50 % ; background-color : #40ff73 ; box-shadow : inset -5 px -5 px 10 px rgb ( 57 , 57 , 57 ); /* shorthand animation property combines all 6 animation properties */ /* duration easing-function delay iteration-count direction name */ animation : 1 s ease-in 1 s infinite alternate bounce ; } # red-box { border-radius : 10 % ; top : 100 px ; left : 600 px ; background-color : #ff1141 ; box-shadow : inset 5 px 5 px 10 px rgb ( 57 , 57 , 57 ); background-image : linear-gradient ( rgb ( 255 , 173 , 187 ), rgb ( 80 , 255 , 211 )); /* longhand animation properties*/ animation-name : rotate_box ; animation-duration : 4 s ; animation-iteration-count : infinite ; animation-direction : alternate-reverse ; } /* @keyframes controls the steps of the animations */ @ keyframes bounce { from { top : 0 px ; } to { top : 400 px ; box-shadow : inset -5 px -5 px 10 px rgb ( 57 , 57 , 57 ), -5 px 10 px 20 px black ; } } @ keyframes rotate_box { 0 % { transform : rotate ( 0 deg ); } 50 % { width : 150 px ; height : 150 px ; } 100 % { transform : rotate ( 180 deg ); background-image : linear-gradient ( rgb ( 80 , 255 , 211 ), rgb ( 255 , 173 , 187 )); } } </ style > </ head > < body > < div class = \"container\" > < div class = \"animate\" id = \"red-box\" ></ div > < div class = \"animate\" id = \"green-circle\" ></ div > </ div > </ body > </ html >","title":"CSS Animations"},{"location":"html/html/","text":"HTML Language \u00b6 HTML (HyperText Markup Language) is used to define the structure of a webpage. Think of it like the frame of a house. When you visit a website, an HTML page is what the browser parses to display all of the content on the page! We use HTML in the following courses at CWHQ: Elementary Middle School High School Fundamental Programming Concepts Webpages with HTML & CSS Fundamentals of Web Development Web Development For Kids - 1 Capstone 1 User Interface Development Web Development For Kids - 2 User Interface Development Capstone 1 Creating Websites with HTML/CSS Responsive Web Development APIs and Databases Responsive Websites with HTML/CSS Interactive JavaScript Professional Web App Development Interactive Websites with JavaScript Web Interfaces Modern CSS Frameworks Capstone 3 Capstone 2 Capstone 2 Mastering APIs Mastering MVC Framework Capstone 3 Object Relational Mapping DevOps and Software Engineering Capstone 3 In this section of our documentation, you'll find references to most of the core HTML language features that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from this excellent HTML resource: MDN HTML Docs Basic HTML Structure \u00b6 HTML documents have a standard basic form which looks like this: <!DOCTYPE html> < html > < head > < title > [INSERT TILE HERE] </ title > </ head > < body > <!-- INSERT HTML CONTENT TAGS HERE --> </ body > </ html > The DOCTYPE tag \u00b6 The DOCTYPE is the first tag in an HTML document, and it's required to ensure the browser parses an HTML document correctly. If you leave it out, strange things can happen depending on the user's browser settings: <!DOCTYPE html> The <html> tag \u00b6 The <html> tag is used to hold the contents of an HTML document, which will consist of a <head> and a <body> . The HTML document ends at the </html> tag. <!DOCTYPE html> < html > <!-- Everything in here is part of the HTML document --> </ html > The <head> tag \u00b6 The <head> tag is used to hold information about the HTML document that shouldn't appear on the page (like the title, character encoding, etc.) and is also used to pull in external resources (like CSS or JavaScript). <!DOCTYPE html> < html > < head > <!-- This is for information about the document or linking external resources --> </ head > </ html > The <title> tag \u00b6 The <title> tag appears in the browser tab and should be included in all HTML documents. <!DOCTYPE html> < html > < head > < title > This appears in the browser tab </ title > </ head > </ html > The <body> tag \u00b6 The <body> tag holds all of the HTML content that will appear on the page. This is the content you want the user to see. <!DOCTYPE html> < html > < head > < title > This appears in the browser tab </ title > </ head > < body > < h1 > This appears on the page </ h1 > < p > So does this </ p > </ body > </ html > Further Reading MDN - Anatomy of an HTML Document Common Additions To The Basic HTML Structure \u00b6 If you explore HTML documents on your favorite websites, you'll see that there are many variations on the basic HTML structure shown above. We'll discuss a few common additional tags that you'll see at CWHQ in this section, such as the <style> , <link> , <script> , and <meta> tags. <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link rel = \"stylesheet\" href = \"style.css\" /> < script src = \"game-logic.js\" ></ script > < style > h1 { color : red ; } </ style > </ head > < body > < h1 > This appears on the page, and is red! </ h1 > < p > This appears on the page and is black (the default color for text) </ p > < script > var paragraphElement = document . createElement ( \"p\" ); paragraphElement . textContent = \"I can build HTML from JavaScript!\" ; document . body . append ( paragraphElement ); </ script > </ body > </ html > The <meta> tag \u00b6 The <meta> tag can be used to add different information about the document, such as the author, character encoding, whether it should be responsive to different screen sizes, etc. In the example below, we tell the browser that it should be responsive to different screen sizes using the <meta> tag: <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > <!-- Please take into consideration the device I'm being viewed on for sizing things! --> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> </ head > < body ></ body > </ html > The <link> tag \u00b6 The <link> tag is commonly used to include an external CSS stylesheet, either from your own filesystem or externally from somewhere like Google Fonts. In the example below, we include a stylesheet from our filesystem called style.css : <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > <!-- Include all the CSS style rules from `style.css` in this HTML document --> < link rel = \"stylesheet\" href = \"style.css\" /> </ head > < body ></ body > </ html > The <script> tag \u00b6 You can include a <script> tag in the <head> or at the end of the <body> in an HTML document. If you use the src attribute, the <script> tag pulls JavaScript data from an external file. If you don't use the src attribute, you write the JavaScript directly in the HTML document. <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > <!-- Please add the JavaScript code from `game-logic.js` into this file --> < script src = \"game-logic.js\" ></ script > </ head > < body > <!-- Add all HTML content here --> < script > // This JavaScript logic can be written directly in the HTML file var paragraphElement = document . createElement ( \"p\" ); paragraphElement . textContent = \"I can build HTML from JavaScript!\" ; document . body . append ( paragraphElement ); </ script > </ body > </ html > The <style> tag \u00b6 The <style> tag can be used to add CSS directly in an HTML document instead of pulling it from an external file. <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > <!-- Please add these CSS styles to anything in the `<body>` that I target with a CSS selector --> < style > h1 { color : red ; } </ style > </ head > < body > < h1 > This appears on the page, and is red! </ h1 > < p > This appears on the page and is black (the default color for text) </ p > </ body > </ html > Further Reading MDN - Metadata in HTML Elements Give Text Meaning \u00b6 HTML elements (or tags) that you use in the <body> of an HTML document should be used to give text structure and meaning. Use the right tag for the right job! For example, the <p> tag is used to display generic text while the <h1> tag is used to display the top-level title or headline of your page. You use the <img> tag to display images. Well-Structured HTML \u00b6 If we were making a page about tacos and wanted to have a title, some text, and an image, this would be a good structure: <!DOCTYPE html> < html > < head > < title > Tacos - Homepage </ title > </ head > < body > < h1 > My Favorite Taco </ h1 > < p > I think that all tacos are amazing, but my favorite is probably the Carne Asada taco. It's filled with steak, and you can add onions/cilantro/lime to the top. You can optionally add guacamole as well, which I highly recommend! </ p > < img src = \"taco.jpg\" /> </ body > </ html > Poorly-Structured HTML \u00b6 In contrast, we could make the same page like this: <!DOCTYPE html> < html > < head > < title > Tacos - Homepage </ title > < style > p { font-size : 42 px ; } h1 { font-size : 16 px ; } # taco-image { background-image : url ( taco.jpg ); background-size : contain ; background-repeat : no-repeat ; width : 500 px ; height : 500 px ; display : block ; } </ style > </ head > < body > < p > My Favorite Taco </ p > < h1 > I think that all tacos are amazing, but my favorite is probably the Carne Asada taco. It's filled with steak, and you can add onions/cilantro/lime to the top. You can optionally add guacamole as well, which I highly recommend! </ h1 > < span id = \"taco-image\" ></ span > </ body > </ html > This is not well-structured HTML because we're not using the right element for the right job anywhere! Instead, we're trying to use CSS to make the <p> tag big and the <h1> tag small, and the <span> is holding an image instead of an <img> tag. Why use all of that CSS when you could use the natural element for the job? As a rule, always structure your page with the correct tags first, and then you can add CSS to style them later. Two Broad Categories Of Elements \u00b6 HTML elements fall into two broad categories, block-level and inline-level. Block-level elements appear on their own lines, and inline-level elements do not. Block-Level Elements \u00b6 Some standard block elements are <p> , all of the heading tags ( <h1> through <h6> ), the <div> , <form> elements, and many more: <!DOCTYPE html> < html > < head > < title > Block-Level Elements </ title > </ head > < body > < h1 > All headings are block-level elements. </ h1 > < p > Paragraph tags too. </ p > < form > < p > Everything in this form is a single block </ p > < input placeholder = \"Enter your name\" /> < button > Submit </ button > </ form > </ body > </ html > Inline-Level Elements \u00b6 Some standard inline elements are <span> , <img> , <button> , and <input> elements, along with many others: <!DOCTYPE html> < html > < head > < title > Inline-Level Elements </ title > < style > span { color : red ; } </ style > </ head > < body > < h1 > All headings are block-level elements. </ h1 > < p > The < span > span element is inline. </ span > We also added some CSS to make it stand out. </ p > < form > < p > Everything in this form is a single block, but notice how the input, image, and button are all on the same line. </ p > < img src = \"taco.jpg\" /> < input placeholder = \"Enter your name\" /> < button > Submit </ button > </ form > </ body > </ html > Directory Navigation \u00b6 When linking external files like images, audio, video, or JavaScript/CSS, you need to understand where the asset is located in your project folder. Programmers generally call folders directories , and we'll use that term throughout this section. Example Directory Structure \u00b6 Consider the following directory structure: my-website \u251c\u2500\u2500 home \u2502 \u251c\u2500\u2500 home.html \u2502 \u251c\u2500\u2500 never-gonna-give-you-up.mp3 \u2502 \u2514\u2500\u2500 scripts \u2502 \u2514\u2500\u2500 loader.js \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 profile-pic.jpg \u2514\u2500\u2500 style.css my-website is what's known as the root of this directory tree. To navigate to directories or files in this directory tree, you use a path , which is a series of directories/files separated by / characters. Examples Of Different Directory Paths \u00b6 There are a four common ways to navigate between directories: Downwards Upwards Upwards and Downwards Same Directory If we're thinking from index.html for all of these examples, then loader.js is downwards from that file. So, the path to loader.js from index.html is: scripts/loader.js You can also navigate upward using ../ . So, the path from index.html to style.css is: ../style.css Navigating upwards and downwards combines the two techniques shown above. So, the path from index.html to profile-pic.jpg is: ../images/profile-pic.jpg Finally, if the asset you want to include is in the same project folder, you don't need any / or ../ , you just reference the name of the asset. So, the path from index.html to never-gonna-give-you-up.mp3 is: never-gonna-give-you-up.mp3 Putting this all together, here's how we could include loader.js , style.css , profile-pic.jpg , and never-gonna-give-you-up.mp3 in our index.html file: <!DOCTYPE html> < html > < head > < title > Home </ title > < link href = \"../style.css\" rel = \"stylesheet\" /> </ head > < body > < div > < h1 > Directory Navigation Example </ h1 > < img src = \"../images/profile-pic.jpg\" /> < audio src = \"never-gonna-give-you-up.mp3\" controls ></ audio > </ div > < script src = \"scripts/loader.js\" ></ script > </ body > </ html > HTML Element References \u00b6 Below are some of the common HTML Elements you may use: Element Description <html> Holds content of HTML Document <head> Holds information about the HTML Document <title> Title appears on browser tab <body> Holds all HTML Content <link> Link external resource like CSS stylesheet <meta> Holds metadata about document <style> Apply CSS styling to elements <h1> - <h6> 6 levels of section headings <div> Creates a division within the HTML Document <br> Line Break <ol> Defines an Ordered List <ul> Defines an Unordered List <li> Defines list items <p> Defines paragraphs in the document <a> Creates hyperlink to other webpages <audio> Add audio <img> Add images <video> Add video <iframe> Embeds other HTML pages in the current webpage <script> Embeds or refers to Javascript in the document <table> Create tables <form> Create a section for submitting a form <button> Adds a button used for interactivity <input> Creates an input field <select> Creates drop down menu <option> Defines an item within the select element Attributes \u00b6 HTML attributes allow you to provide additional information about each element. Here are a few examples of common attributes: <!DOCTYPE html> < html > < head > < title > Attributes </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div > < h1 style = \"color: green;\" > Tacos!! </ h1 > < hr /> < img src = \"tacos.png\" id = \"taco\" /> < hr /> < p contenteditable = \"true\" > This paragraph can be edited! </ p > < a href = \"tacos.html\" > Click here for more tacos! </ a > </ div > </ body > </ html > Further Reading MDN - Attributes Body Text \u00b6 In the <body> of an HTML document, you can add elements that contain text which the user sees on the page. The <p> tag is a generic text element, but you can also use elements like <em> , <strong> and <cite> to give your body text meaning. <!DOCTYPE html> < html > < head > < title > Body Text </ title > < link href = \"style.css\" rel = \"stylesheet\" /> < style > em { color : red ; } </ style > </ head > < body > < div class = \"container\" > < p > < em > Coding </ em > teaches children how to resolve complex problems by breaking them down into smaller problems. A mastery of this process, called decomposition, is an integral life skill that benefits students whether they pursue a profession in technology or in any other field. Making mistakes, testing work, and correcting errors give kids the confidence to move beyond the problem with resilience.\" </ p > < p > Learning to code is often described as tackling a new language and it may seem that this translation of symbols and information stems from the language processing part of the brain. < strong > Computer programming </ strong > is also thought to employ the same skills as learning complex math problems, thereby exercising the left hemisphere. </ p > < p > Read more < cite >< a href = \"https://www.codewizardshq.com/coding-cognitive-development/\" > 4 Ways That Coding Fuels Cognitive Development </ a >< cite > </ p > </ div > </ body > </ html > Further Reading MDN - HTML Text Fundamentals Comments \u00b6 HTML comments allow us to write notes, hide content, and disable code in the event of a bug. They are not visible to viewers of your HTML page unless they view the page's source code. <!DOCTYPE html> < html > < head > < title > Comments </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div > <!-- This is an important note! --> < h1 > HTML Comments </ h1 > <!-- <p> This tag is now \"turned off\" </p> --> <!-- You can also make multi-line comments as well! --> </ div > </ body > </ html > Further Reading MDN - Comments Containers \u00b6 HTML containers allow you to divide your content into sections. The <div> element is a good illustration of how to divide two containers. They can use the class property to share styling, but they can also have their own styling and content. <!DOCTYPE html> < html > < head > < title > Containers </ title > < link href = \"style.css\" rel = \"stylesheet\" /> < style > . division { display : inline-block ; text-align : center ; } # team1 { background-color : rgba ( 255 , 0 , 0 , 0.466 ); } # team2 { background-color : rgba ( 30 , 0 , 255 , 0.425 ); } </ style > </ head > < body > < div class = \"container\" > < div class = \"division\" id = \"team1\" > < h2 > Bob </ h2 > < img src = \"monster1.png\" /> < p > Rank: 50 </ p > </ div > < div class = \"division\" id = \"team2\" > < h2 > Jack </ h2 > < img src = \"monster2.png\" /> < p > Rank: 100 </ p > </ div > </ div > </ body > </ html > Further Reading MDN - Non-semantic Wrappers Forms and Buttons \u00b6 You can create a form section to submit information using the HTML <form> element. The <input> element is used within the form element, and the type attribute can be used to display different types of inputs. We are also using the <button> tag to submit the form. <!DOCTYPE html> < html > < head > < title > Forms and Buttons </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < h2 > Contact </ h2 > < form > < input type = \"text\" placeholder = \"Enter Name\" id = \"name\" required /> < input type = \"email\" id = \"senderEmail\" placeholder = \"Enter Email\" required /> < input type = \"number\" id = \"senderNumber\" placeholder = \"Enter Number\" required /> < label > Choose Programming Language </ label > < select > < option > Javascript </ option > < option > Python </ option > < option > Java </ option > </ select > < button > Submit </ button > </ form > </ div > </ body > </ html > Further Reading MDN - Forms Heading Elements \u00b6 HTML headings allow you to define headings using section levels. <h1> Represents the highest level <h6> represents the lowest level. <!DOCTYPE html> < html > < head > < title > Headings </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < div class = \"info\" > <!-- Note: Using only one h1 is recommended --> < h1 > Welcome to my page! </ h1 > < h2 > Bob the < em > Epic </ em > programmer! </ h2 > </ div > < div class = \"section2\" > < h3 > Favorite Programming Languages </ h3 > < p > Javascript </ p > < p > Python </ p > < h4 > Favorite Games </ h4 > < p > Roblox </ p > < p > Minecraft </ p > </ div > < div class = \"projects\" > < h5 > Python Project </ h5 > < a href = \"pythonproject.html\" > Link </ a > < h6 > Javascript Project </ h6 > < a href = \"javascriptproject.html\" > Link </ a > </ div > </ div > </ body > </ html > Further Reading MDN - Headings and Paragraphs Image, Video and Audio \u00b6 The <img> , <video> , <audio> elements can be used to embed specific media. The src attribute is used by all elements. <!DOCTYPE html> < html > < head > < title > Image, Video and Audio </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < h1 > Taco Party! </ h1 > <!-- This image is located in the child folder images --> < img src = \"images/tacos.png\" /> <!-- The Video Element uses additional attributes controls and poster --> < video src = \"videos/tacos.mp4\" controls poster = \"images/tacos.png\" ></ video > <!-- The Audio Element uses additional attributes controls, loop, autoplay --> < audio src = \"audio/never-gonna-give-you-up.mp3\" controls loop autoplay ></ audio > </ div > </ body > </ html > Further Reading MDN - Images in HTML MDN - Video and Audio Content Line Break Elements \u00b6 For creating breaks in the content, use the line break <br> tag or the <hr> tag, which makes a horizontal line break. <!DOCTYPE html> < html > < head > < title > Line Break </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < h1 > Line Break </ h1 > < hr > < img src = \"taco.jpg\" /> < p > The line break < br > tag or the < hr > tag, which generates a horizontal line break, are two more useful single tag elements. </ p > </ div > </ body > </ html > Further Reading MDN - The Line Break Element Links \u00b6 HTML Links allow you to link to other webpages using <a> tag with the href attribute. <!DOCTYPE html> < html > < head > < title > Links </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > <!-- Inline vs Block Links --> <!-- Inline --> < a href = \"https://www.codewizardshq.com\" > CodeWizardsHQ </ a > <!-- Block, makes the <img> tag clickable --> < a href = \"https://www.codewizardshq.com\" > < img src = \"cwhq.png\" id = \"cwhq\" /> </ a > <!-- Document fragment by id, will jump to the section of the document with the `summer` id --> < a href = \"#summer\" > Check out our Program Section! </ a > < p id = \"summer\" > Elementary, Middle School, High School </ p > < hr /> <!-- Relative vs Absolute URLs --> <!-- Relative URL --> < a href = \"index/index.html\" > This will link us to a file within the same directory. </ a > <!-- Absolute URL --> < a href = \"https://www.codewizardshq.com\" > This will link us to any web page using the absolute url. </ a > </ div > </ body > </ html > Further Reading MDN - Creating hyperlinks List Elements \u00b6 HTML lists allow you to make a structured list. Both list elements use the <li> tag to define each item. <!DOCTYPE html> < html > < head > < title > Lists </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > <!-- This is an unordered list element. The items on this list will be bulleted. --> < div class = \"list1\" > < h1 > Favorite Foods </ h1 > < ul > < li > Tacos </ li > < li > Pasta </ li > < li > Pizza </ li > </ ul > </ div > <!-- This is an ordered list element. The 'type' attribute can be used to adjust the order of this list, which can be either alphabetical or numerical. --> < div class = \"list2\" > < h1 > Favorite Snacks </ h1 > < ol > < li > Dark Chocolate </ li > < li > Sugar Cookies </ li > < li > BBQ Chips </ li > </ ol > </ div > </ div > </ body > </ html > Further Reading MDN - Lists Nesting Elements \u00b6 Elements can be nested inside each other. This is most common with elements like the <div> and <form> , but you can also nest other tags, like adding content inside the <a> tag to make elements into links: <!DOCTYPE html> < html > < head > < title > Nesting Elements </ title > </ head > < body > < div > < h2 > It's common to nest things inside of a div. </ h2 > < p > Especially when you want content to be grouped together. </ p > </ div > < form > < p > Forms rely on input elements being nested inside them so the information can be sent to a webserver </ p > < input placeholder = \"Enter your name\" /> < input placeholder = \"Enter your password\" /> < button > Login </ button > </ form > < a href = \"https://www.example.com\" > < p > You can nest stuff inside of anchor tags to create links. </ p > < p > Click on anything in this green box to get taken to www.example.com </ p > < img src = \"taco.jpg\" /> </ a > </ body > </ html > Single Tag Elements \u00b6 Elements can also be single tag elements. There is no need for a closing tag for these tags because there is no content between them. The most common single tag elements are <img> and <link> : <!DOCTYPE html> < html > < head > < title > Single Tag Elements </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div > < h1 > Below is the img tag, which uses the src attribute to display the image </ h1 > < hr > < img src = \"taco.jpg\" /> < p > The line break < br > tag or the < hr > tag, which generates a horizontal line break, are two more useful single tag elements. </ p > </ div > </ body > </ html > Table \u00b6 You can use the following table elements to create a structured table. <!DOCTYPE html> < html > < head > < title > Tables </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < h1 > Tables </ h1 > < table > <!-- Table Row --> < tr > <!-- Table Headers --> < th > Name </ th > < th > Subject </ th > < th > Grade </ th > </ tr > < tr > <!-- Table Data --> < td > Bob </ td > < td > Math </ td > < td > 85 </ td > </ tr > < tr > <!-- Table Data --> < td > Abigail </ td > < td > Programming </ td > < td > 99 </ td > </ tr > </ table > </ div > </ body > </ html > Further Reading MDN - Table Basics","title":"HTML Language"},{"location":"html/html/#html-language","text":"HTML (HyperText Markup Language) is used to define the structure of a webpage. Think of it like the frame of a house. When you visit a website, an HTML page is what the browser parses to display all of the content on the page! We use HTML in the following courses at CWHQ: Elementary Middle School High School Fundamental Programming Concepts Webpages with HTML & CSS Fundamentals of Web Development Web Development For Kids - 1 Capstone 1 User Interface Development Web Development For Kids - 2 User Interface Development Capstone 1 Creating Websites with HTML/CSS Responsive Web Development APIs and Databases Responsive Websites with HTML/CSS Interactive JavaScript Professional Web App Development Interactive Websites with JavaScript Web Interfaces Modern CSS Frameworks Capstone 3 Capstone 2 Capstone 2 Mastering APIs Mastering MVC Framework Capstone 3 Object Relational Mapping DevOps and Software Engineering Capstone 3 In this section of our documentation, you'll find references to most of the core HTML language features that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from this excellent HTML resource: MDN HTML Docs","title":"HTML Language"},{"location":"html/html/#basic-html-structure","text":"HTML documents have a standard basic form which looks like this: <!DOCTYPE html> < html > < head > < title > [INSERT TILE HERE] </ title > </ head > < body > <!-- INSERT HTML CONTENT TAGS HERE --> </ body > </ html >","title":"Basic HTML Structure"},{"location":"html/html/#the-doctype-tag","text":"The DOCTYPE is the first tag in an HTML document, and it's required to ensure the browser parses an HTML document correctly. If you leave it out, strange things can happen depending on the user's browser settings: <!DOCTYPE html>","title":"The DOCTYPE tag"},{"location":"html/html/#the-html-tag","text":"The <html> tag is used to hold the contents of an HTML document, which will consist of a <head> and a <body> . The HTML document ends at the </html> tag. <!DOCTYPE html> < html > <!-- Everything in here is part of the HTML document --> </ html >","title":"The &lt;html&gt; tag"},{"location":"html/html/#the-head-tag","text":"The <head> tag is used to hold information about the HTML document that shouldn't appear on the page (like the title, character encoding, etc.) and is also used to pull in external resources (like CSS or JavaScript). <!DOCTYPE html> < html > < head > <!-- This is for information about the document or linking external resources --> </ head > </ html >","title":"The &lt;head&gt; tag"},{"location":"html/html/#the-title-tag","text":"The <title> tag appears in the browser tab and should be included in all HTML documents. <!DOCTYPE html> < html > < head > < title > This appears in the browser tab </ title > </ head > </ html >","title":"The &lt;title&gt; tag"},{"location":"html/html/#the-body-tag","text":"The <body> tag holds all of the HTML content that will appear on the page. This is the content you want the user to see. <!DOCTYPE html> < html > < head > < title > This appears in the browser tab </ title > </ head > < body > < h1 > This appears on the page </ h1 > < p > So does this </ p > </ body > </ html > Further Reading MDN - Anatomy of an HTML Document","title":"The &lt;body&gt; tag"},{"location":"html/html/#common-additions-to-the-basic-html-structure","text":"If you explore HTML documents on your favorite websites, you'll see that there are many variations on the basic HTML structure shown above. We'll discuss a few common additional tags that you'll see at CWHQ in this section, such as the <style> , <link> , <script> , and <meta> tags. <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link rel = \"stylesheet\" href = \"style.css\" /> < script src = \"game-logic.js\" ></ script > < style > h1 { color : red ; } </ style > </ head > < body > < h1 > This appears on the page, and is red! </ h1 > < p > This appears on the page and is black (the default color for text) </ p > < script > var paragraphElement = document . createElement ( \"p\" ); paragraphElement . textContent = \"I can build HTML from JavaScript!\" ; document . body . append ( paragraphElement ); </ script > </ body > </ html >","title":"Common Additions To The Basic HTML Structure"},{"location":"html/html/#the-meta-tag","text":"The <meta> tag can be used to add different information about the document, such as the author, character encoding, whether it should be responsive to different screen sizes, etc. In the example below, we tell the browser that it should be responsive to different screen sizes using the <meta> tag: <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > <!-- Please take into consideration the device I'm being viewed on for sizing things! --> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> </ head > < body ></ body > </ html >","title":"The &lt;meta&gt; tag"},{"location":"html/html/#the-link-tag","text":"The <link> tag is commonly used to include an external CSS stylesheet, either from your own filesystem or externally from somewhere like Google Fonts. In the example below, we include a stylesheet from our filesystem called style.css : <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > <!-- Include all the CSS style rules from `style.css` in this HTML document --> < link rel = \"stylesheet\" href = \"style.css\" /> </ head > < body ></ body > </ html >","title":"The &lt;link&gt; tag"},{"location":"html/html/#the-script-tag","text":"You can include a <script> tag in the <head> or at the end of the <body> in an HTML document. If you use the src attribute, the <script> tag pulls JavaScript data from an external file. If you don't use the src attribute, you write the JavaScript directly in the HTML document. <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > <!-- Please add the JavaScript code from `game-logic.js` into this file --> < script src = \"game-logic.js\" ></ script > </ head > < body > <!-- Add all HTML content here --> < script > // This JavaScript logic can be written directly in the HTML file var paragraphElement = document . createElement ( \"p\" ); paragraphElement . textContent = \"I can build HTML from JavaScript!\" ; document . body . append ( paragraphElement ); </ script > </ body > </ html >","title":"The &lt;script&gt; tag"},{"location":"html/html/#the-style-tag","text":"The <style> tag can be used to add CSS directly in an HTML document instead of pulling it from an external file. <!DOCTYPE html> < html > < head > < title > Common Additions To The Basic HTML Structure </ title > <!-- Please add these CSS styles to anything in the `<body>` that I target with a CSS selector --> < style > h1 { color : red ; } </ style > </ head > < body > < h1 > This appears on the page, and is red! </ h1 > < p > This appears on the page and is black (the default color for text) </ p > </ body > </ html > Further Reading MDN - Metadata in HTML","title":"The &lt;style&gt; tag"},{"location":"html/html/#elements-give-text-meaning","text":"HTML elements (or tags) that you use in the <body> of an HTML document should be used to give text structure and meaning. Use the right tag for the right job! For example, the <p> tag is used to display generic text while the <h1> tag is used to display the top-level title or headline of your page. You use the <img> tag to display images.","title":"Elements Give Text Meaning"},{"location":"html/html/#well-structured-html","text":"If we were making a page about tacos and wanted to have a title, some text, and an image, this would be a good structure: <!DOCTYPE html> < html > < head > < title > Tacos - Homepage </ title > </ head > < body > < h1 > My Favorite Taco </ h1 > < p > I think that all tacos are amazing, but my favorite is probably the Carne Asada taco. It's filled with steak, and you can add onions/cilantro/lime to the top. You can optionally add guacamole as well, which I highly recommend! </ p > < img src = \"taco.jpg\" /> </ body > </ html >","title":"Well-Structured HTML"},{"location":"html/html/#poorly-structured-html","text":"In contrast, we could make the same page like this: <!DOCTYPE html> < html > < head > < title > Tacos - Homepage </ title > < style > p { font-size : 42 px ; } h1 { font-size : 16 px ; } # taco-image { background-image : url ( taco.jpg ); background-size : contain ; background-repeat : no-repeat ; width : 500 px ; height : 500 px ; display : block ; } </ style > </ head > < body > < p > My Favorite Taco </ p > < h1 > I think that all tacos are amazing, but my favorite is probably the Carne Asada taco. It's filled with steak, and you can add onions/cilantro/lime to the top. You can optionally add guacamole as well, which I highly recommend! </ h1 > < span id = \"taco-image\" ></ span > </ body > </ html > This is not well-structured HTML because we're not using the right element for the right job anywhere! Instead, we're trying to use CSS to make the <p> tag big and the <h1> tag small, and the <span> is holding an image instead of an <img> tag. Why use all of that CSS when you could use the natural element for the job? As a rule, always structure your page with the correct tags first, and then you can add CSS to style them later.","title":"Poorly-Structured HTML"},{"location":"html/html/#two-broad-categories-of-elements","text":"HTML elements fall into two broad categories, block-level and inline-level. Block-level elements appear on their own lines, and inline-level elements do not.","title":"Two Broad Categories Of Elements"},{"location":"html/html/#block-level-elements","text":"Some standard block elements are <p> , all of the heading tags ( <h1> through <h6> ), the <div> , <form> elements, and many more: <!DOCTYPE html> < html > < head > < title > Block-Level Elements </ title > </ head > < body > < h1 > All headings are block-level elements. </ h1 > < p > Paragraph tags too. </ p > < form > < p > Everything in this form is a single block </ p > < input placeholder = \"Enter your name\" /> < button > Submit </ button > </ form > </ body > </ html >","title":"Block-Level Elements"},{"location":"html/html/#inline-level-elements","text":"Some standard inline elements are <span> , <img> , <button> , and <input> elements, along with many others: <!DOCTYPE html> < html > < head > < title > Inline-Level Elements </ title > < style > span { color : red ; } </ style > </ head > < body > < h1 > All headings are block-level elements. </ h1 > < p > The < span > span element is inline. </ span > We also added some CSS to make it stand out. </ p > < form > < p > Everything in this form is a single block, but notice how the input, image, and button are all on the same line. </ p > < img src = \"taco.jpg\" /> < input placeholder = \"Enter your name\" /> < button > Submit </ button > </ form > </ body > </ html >","title":"Inline-Level Elements"},{"location":"html/html/#directory-navigation","text":"When linking external files like images, audio, video, or JavaScript/CSS, you need to understand where the asset is located in your project folder. Programmers generally call folders directories , and we'll use that term throughout this section.","title":"Directory Navigation"},{"location":"html/html/#example-directory-structure","text":"Consider the following directory structure: my-website \u251c\u2500\u2500 home \u2502 \u251c\u2500\u2500 home.html \u2502 \u251c\u2500\u2500 never-gonna-give-you-up.mp3 \u2502 \u2514\u2500\u2500 scripts \u2502 \u2514\u2500\u2500 loader.js \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 profile-pic.jpg \u2514\u2500\u2500 style.css my-website is what's known as the root of this directory tree. To navigate to directories or files in this directory tree, you use a path , which is a series of directories/files separated by / characters.","title":"Example Directory Structure"},{"location":"html/html/#examples-of-different-directory-paths","text":"There are a four common ways to navigate between directories: Downwards Upwards Upwards and Downwards Same Directory If we're thinking from index.html for all of these examples, then loader.js is downwards from that file. So, the path to loader.js from index.html is: scripts/loader.js You can also navigate upward using ../ . So, the path from index.html to style.css is: ../style.css Navigating upwards and downwards combines the two techniques shown above. So, the path from index.html to profile-pic.jpg is: ../images/profile-pic.jpg Finally, if the asset you want to include is in the same project folder, you don't need any / or ../ , you just reference the name of the asset. So, the path from index.html to never-gonna-give-you-up.mp3 is: never-gonna-give-you-up.mp3 Putting this all together, here's how we could include loader.js , style.css , profile-pic.jpg , and never-gonna-give-you-up.mp3 in our index.html file: <!DOCTYPE html> < html > < head > < title > Home </ title > < link href = \"../style.css\" rel = \"stylesheet\" /> </ head > < body > < div > < h1 > Directory Navigation Example </ h1 > < img src = \"../images/profile-pic.jpg\" /> < audio src = \"never-gonna-give-you-up.mp3\" controls ></ audio > </ div > < script src = \"scripts/loader.js\" ></ script > </ body > </ html >","title":"Examples Of Different Directory Paths"},{"location":"html/html/#html-element-references","text":"Below are some of the common HTML Elements you may use: Element Description <html> Holds content of HTML Document <head> Holds information about the HTML Document <title> Title appears on browser tab <body> Holds all HTML Content <link> Link external resource like CSS stylesheet <meta> Holds metadata about document <style> Apply CSS styling to elements <h1> - <h6> 6 levels of section headings <div> Creates a division within the HTML Document <br> Line Break <ol> Defines an Ordered List <ul> Defines an Unordered List <li> Defines list items <p> Defines paragraphs in the document <a> Creates hyperlink to other webpages <audio> Add audio <img> Add images <video> Add video <iframe> Embeds other HTML pages in the current webpage <script> Embeds or refers to Javascript in the document <table> Create tables <form> Create a section for submitting a form <button> Adds a button used for interactivity <input> Creates an input field <select> Creates drop down menu <option> Defines an item within the select element","title":"HTML Element References"},{"location":"html/html/#attributes","text":"HTML attributes allow you to provide additional information about each element. Here are a few examples of common attributes: <!DOCTYPE html> < html > < head > < title > Attributes </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div > < h1 style = \"color: green;\" > Tacos!! </ h1 > < hr /> < img src = \"tacos.png\" id = \"taco\" /> < hr /> < p contenteditable = \"true\" > This paragraph can be edited! </ p > < a href = \"tacos.html\" > Click here for more tacos! </ a > </ div > </ body > </ html > Further Reading MDN - Attributes","title":"Attributes"},{"location":"html/html/#body-text","text":"In the <body> of an HTML document, you can add elements that contain text which the user sees on the page. The <p> tag is a generic text element, but you can also use elements like <em> , <strong> and <cite> to give your body text meaning. <!DOCTYPE html> < html > < head > < title > Body Text </ title > < link href = \"style.css\" rel = \"stylesheet\" /> < style > em { color : red ; } </ style > </ head > < body > < div class = \"container\" > < p > < em > Coding </ em > teaches children how to resolve complex problems by breaking them down into smaller problems. A mastery of this process, called decomposition, is an integral life skill that benefits students whether they pursue a profession in technology or in any other field. Making mistakes, testing work, and correcting errors give kids the confidence to move beyond the problem with resilience.\" </ p > < p > Learning to code is often described as tackling a new language and it may seem that this translation of symbols and information stems from the language processing part of the brain. < strong > Computer programming </ strong > is also thought to employ the same skills as learning complex math problems, thereby exercising the left hemisphere. </ p > < p > Read more < cite >< a href = \"https://www.codewizardshq.com/coding-cognitive-development/\" > 4 Ways That Coding Fuels Cognitive Development </ a >< cite > </ p > </ div > </ body > </ html > Further Reading MDN - HTML Text Fundamentals","title":"Body Text"},{"location":"html/html/#comments","text":"HTML comments allow us to write notes, hide content, and disable code in the event of a bug. They are not visible to viewers of your HTML page unless they view the page's source code. <!DOCTYPE html> < html > < head > < title > Comments </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div > <!-- This is an important note! --> < h1 > HTML Comments </ h1 > <!-- <p> This tag is now \"turned off\" </p> --> <!-- You can also make multi-line comments as well! --> </ div > </ body > </ html > Further Reading MDN - Comments","title":"Comments"},{"location":"html/html/#containers","text":"HTML containers allow you to divide your content into sections. The <div> element is a good illustration of how to divide two containers. They can use the class property to share styling, but they can also have their own styling and content. <!DOCTYPE html> < html > < head > < title > Containers </ title > < link href = \"style.css\" rel = \"stylesheet\" /> < style > . division { display : inline-block ; text-align : center ; } # team1 { background-color : rgba ( 255 , 0 , 0 , 0.466 ); } # team2 { background-color : rgba ( 30 , 0 , 255 , 0.425 ); } </ style > </ head > < body > < div class = \"container\" > < div class = \"division\" id = \"team1\" > < h2 > Bob </ h2 > < img src = \"monster1.png\" /> < p > Rank: 50 </ p > </ div > < div class = \"division\" id = \"team2\" > < h2 > Jack </ h2 > < img src = \"monster2.png\" /> < p > Rank: 100 </ p > </ div > </ div > </ body > </ html > Further Reading MDN - Non-semantic Wrappers","title":"Containers"},{"location":"html/html/#forms-and-buttons","text":"You can create a form section to submit information using the HTML <form> element. The <input> element is used within the form element, and the type attribute can be used to display different types of inputs. We are also using the <button> tag to submit the form. <!DOCTYPE html> < html > < head > < title > Forms and Buttons </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < h2 > Contact </ h2 > < form > < input type = \"text\" placeholder = \"Enter Name\" id = \"name\" required /> < input type = \"email\" id = \"senderEmail\" placeholder = \"Enter Email\" required /> < input type = \"number\" id = \"senderNumber\" placeholder = \"Enter Number\" required /> < label > Choose Programming Language </ label > < select > < option > Javascript </ option > < option > Python </ option > < option > Java </ option > </ select > < button > Submit </ button > </ form > </ div > </ body > </ html > Further Reading MDN - Forms","title":"Forms and Buttons"},{"location":"html/html/#heading-elements","text":"HTML headings allow you to define headings using section levels. <h1> Represents the highest level <h6> represents the lowest level. <!DOCTYPE html> < html > < head > < title > Headings </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < div class = \"info\" > <!-- Note: Using only one h1 is recommended --> < h1 > Welcome to my page! </ h1 > < h2 > Bob the < em > Epic </ em > programmer! </ h2 > </ div > < div class = \"section2\" > < h3 > Favorite Programming Languages </ h3 > < p > Javascript </ p > < p > Python </ p > < h4 > Favorite Games </ h4 > < p > Roblox </ p > < p > Minecraft </ p > </ div > < div class = \"projects\" > < h5 > Python Project </ h5 > < a href = \"pythonproject.html\" > Link </ a > < h6 > Javascript Project </ h6 > < a href = \"javascriptproject.html\" > Link </ a > </ div > </ div > </ body > </ html > Further Reading MDN - Headings and Paragraphs","title":"Heading Elements"},{"location":"html/html/#image-video-and-audio","text":"The <img> , <video> , <audio> elements can be used to embed specific media. The src attribute is used by all elements. <!DOCTYPE html> < html > < head > < title > Image, Video and Audio </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < h1 > Taco Party! </ h1 > <!-- This image is located in the child folder images --> < img src = \"images/tacos.png\" /> <!-- The Video Element uses additional attributes controls and poster --> < video src = \"videos/tacos.mp4\" controls poster = \"images/tacos.png\" ></ video > <!-- The Audio Element uses additional attributes controls, loop, autoplay --> < audio src = \"audio/never-gonna-give-you-up.mp3\" controls loop autoplay ></ audio > </ div > </ body > </ html > Further Reading MDN - Images in HTML MDN - Video and Audio Content","title":"Image, Video and Audio"},{"location":"html/html/#line-break-elements","text":"For creating breaks in the content, use the line break <br> tag or the <hr> tag, which makes a horizontal line break. <!DOCTYPE html> < html > < head > < title > Line Break </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < h1 > Line Break </ h1 > < hr > < img src = \"taco.jpg\" /> < p > The line break < br > tag or the < hr > tag, which generates a horizontal line break, are two more useful single tag elements. </ p > </ div > </ body > </ html > Further Reading MDN - The Line Break Element","title":"Line Break Elements"},{"location":"html/html/#links","text":"HTML Links allow you to link to other webpages using <a> tag with the href attribute. <!DOCTYPE html> < html > < head > < title > Links </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > <!-- Inline vs Block Links --> <!-- Inline --> < a href = \"https://www.codewizardshq.com\" > CodeWizardsHQ </ a > <!-- Block, makes the <img> tag clickable --> < a href = \"https://www.codewizardshq.com\" > < img src = \"cwhq.png\" id = \"cwhq\" /> </ a > <!-- Document fragment by id, will jump to the section of the document with the `summer` id --> < a href = \"#summer\" > Check out our Program Section! </ a > < p id = \"summer\" > Elementary, Middle School, High School </ p > < hr /> <!-- Relative vs Absolute URLs --> <!-- Relative URL --> < a href = \"index/index.html\" > This will link us to a file within the same directory. </ a > <!-- Absolute URL --> < a href = \"https://www.codewizardshq.com\" > This will link us to any web page using the absolute url. </ a > </ div > </ body > </ html > Further Reading MDN - Creating hyperlinks","title":"Links"},{"location":"html/html/#list-elements","text":"HTML lists allow you to make a structured list. Both list elements use the <li> tag to define each item. <!DOCTYPE html> < html > < head > < title > Lists </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > <!-- This is an unordered list element. The items on this list will be bulleted. --> < div class = \"list1\" > < h1 > Favorite Foods </ h1 > < ul > < li > Tacos </ li > < li > Pasta </ li > < li > Pizza </ li > </ ul > </ div > <!-- This is an ordered list element. The 'type' attribute can be used to adjust the order of this list, which can be either alphabetical or numerical. --> < div class = \"list2\" > < h1 > Favorite Snacks </ h1 > < ol > < li > Dark Chocolate </ li > < li > Sugar Cookies </ li > < li > BBQ Chips </ li > </ ol > </ div > </ div > </ body > </ html > Further Reading MDN - Lists","title":"List Elements"},{"location":"html/html/#nesting-elements","text":"Elements can be nested inside each other. This is most common with elements like the <div> and <form> , but you can also nest other tags, like adding content inside the <a> tag to make elements into links: <!DOCTYPE html> < html > < head > < title > Nesting Elements </ title > </ head > < body > < div > < h2 > It's common to nest things inside of a div. </ h2 > < p > Especially when you want content to be grouped together. </ p > </ div > < form > < p > Forms rely on input elements being nested inside them so the information can be sent to a webserver </ p > < input placeholder = \"Enter your name\" /> < input placeholder = \"Enter your password\" /> < button > Login </ button > </ form > < a href = \"https://www.example.com\" > < p > You can nest stuff inside of anchor tags to create links. </ p > < p > Click on anything in this green box to get taken to www.example.com </ p > < img src = \"taco.jpg\" /> </ a > </ body > </ html >","title":"Nesting Elements"},{"location":"html/html/#single-tag-elements","text":"Elements can also be single tag elements. There is no need for a closing tag for these tags because there is no content between them. The most common single tag elements are <img> and <link> : <!DOCTYPE html> < html > < head > < title > Single Tag Elements </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div > < h1 > Below is the img tag, which uses the src attribute to display the image </ h1 > < hr > < img src = \"taco.jpg\" /> < p > The line break < br > tag or the < hr > tag, which generates a horizontal line break, are two more useful single tag elements. </ p > </ div > </ body > </ html >","title":"Single Tag Elements"},{"location":"html/html/#table","text":"You can use the following table elements to create a structured table. <!DOCTYPE html> < html > < head > < title > Tables </ title > < link href = \"style.css\" rel = \"stylesheet\" /> </ head > < body > < div class = \"container\" > < h1 > Tables </ h1 > < table > <!-- Table Row --> < tr > <!-- Table Headers --> < th > Name </ th > < th > Subject </ th > < th > Grade </ th > </ tr > < tr > <!-- Table Data --> < td > Bob </ td > < td > Math </ td > < td > 85 </ td > </ tr > < tr > <!-- Table Data --> < td > Abigail </ td > < td > Programming </ td > < td > 99 </ td > </ tr > </ table > </ div > </ body > </ html > Further Reading MDN - Table Basics","title":"Table"},{"location":"javascript/browser-apis-and-jquery/","text":"Browser APIs and jQuery \u00b6 JavaScript is the language that powers the interactive web! We use JavaScript as the primary language in these courses at CodeWizardsHQ: Elementary Middle School High School Interactive Websites with JavaScript Interactive JavaScript Fundamentals of Web Development Capstone 3 Web Interfaces User Interface Development Capstone 2 Capstone 1 Mastering APIs APIs and Databases Capstone 3 Capstone 2 DevOps and Software Engineering Capstone 3 In this section of our documentation, you'll find references on how to use the built-in browser APIs and the jQuery library to manipulate webpages. You'll also find many Further reading sections, which pull from these excellent JavaScript resources: MDN JavaScript Docs The Modern JavaScript Tutorial Eloquent JavaScript Learn jQuery jQuery API Adding JavaScript to Webpages \u00b6 JavaScript programs at CWHQ are all run in a web browser, and they need to be included in an HTML document in order to run in the browser. There are several ways to do this, which will be outlined below. Using a <script> tag in the <body> \u00b6 The <script> tag is used to insert JavaScript programs directly into an HTML page. You should make the <script> tag the last tag in the <body> of an HTML document: <!DOCTYPE html> < html > < head > < title > Inserting JavaScript with a script tag in the body </ title > </ head > < body > < h1 > This is HTML </ h1 > < script > // Everything in here is JavaScript </ script > </ body > </ html > Using a <script> tag in the <head> \u00b6 You can link an external JavaScript file to an HTML document using the <script> tag in the <head> of the document: my-awesome-script.js console . log ( \"Hello, world!\" ); index.html <!DOCTYPE html> < html > < head > < title > Inserting JavaScript with a script tag in the head </ title > < script src = \"my-awesome-script.js\" ></ script > </ head > < body > < h1 > This is HTML </ h1 > </ body > </ html > Further Reading MDN - Use JavaScript Within A Webpage The Modern JavaScript Tutorial - Hello World Eloquent JavaScript - HTML and JavaScript Adding jQuery to Webpages \u00b6 The jQuery library is not part of the core Browser APIs and must be loaded in the <head> of your HTML document. You can find the most recent version of the jQuery library on their website . Generally, you want the minified version of the library, as that has all the core functionality in a smaller payload (which improves browser load times). <!DOCTYPE html> < html > < head > < title > Adding jQuery to a webpage </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < h1 > This is HTML </ h1 > </ body > </ html > Further Reading Using jQuery With A CDN Using The Browser's Dev Tools \u00b6 When working with JavaScript, the developer tools (dev tools for short) are your best friend! You should spend some time reading the documentation for the dev tools in your browser of choice. We'll use Chrome in these examples, and they have excellent documentation here . The JavaScript console \u00b6 Once you've opened the dev tools in your browser of choice (look up how to do it for your browser) you'll have access to a Console tab. You can write JavaScript code here to test things out: Modifying the DOM from the console \u00b6 You have access to the DOM on the page and can edit it from the Console tab, just like if you were in a JavaScript program: Debugging errors from the console \u00b6 If something is not working as you expect, you should open the Console tab in the dev tools and see if there are any errors. This can save you hours of debugging time if you learn to do it well! Often, you'll be given a link that opens the offending file and points at the exact line that caused the issue, as in this example: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > </ head > < body > < h1 > Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler </ h1 > <!-- HTML abbreviated since it's not important --> < script > function thisHasAnError () { // uh oh, this will throw an error! vra rightBehindThis ; } </ script > </ body > </ html > Testing variables and functions from the console \u00b6 You have access to any global variables and functions in the Console tab and can mess around with them to see if they are doing what you expect: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > </ head > < body > < h1 > Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler </ h1 > <!-- HTML abbreviated since it's not important --> < script > var myFavoriteFood = \"Tacos\" ; function sayHello ( name ) { console . log ( \"Hello, \" + name ); } </ script > </ body > </ html > Further Reading Using the Chrome Devtools Adding Elements To A Webpage \u00b6 jQuery has two methods to add elements to a webpage. One adds the element before the selected element and one adds it after. <!DOCTYPE html> < html > < head > < title > Adding Elements To A Webpage </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > button { margin : 48 px auto ; font-size : 24 px ; } </ style > </ head > < body > < div id = \"button-1-container\" > < button id = \"button-1\" > Button 1 </ button > </ div > < button onclick = \"addButtonBefore();\" > Add a button before button 1 </ button > < button onclick = \"addButtonAfter();\" > Add a button after button 1 </ button > < script > var button1Container = $ ( \"#button-1-container\" ); function addButtonBefore () { button1Container . prepend ( \"<button>Before Button 1</button>\" ); } function addButtonAfter () { button1Container . append ( \"<button>After Button 1</button>\" ); } </ script > </ body > </ html > Animations \u00b6 animate() \u00b6 jQuery's animate() method allows us to create animations on CSS properties. Function signature: animate(properties, duration, callback) Parameters: properties ( object ): The CSS properties to animate duration ( number ): The duration of the animation in milliseconds (optional) callback ( function ): The function to call once animation completes (optional) <!DOCTYPE html> < html > < head > < title > Animations </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < script > function tinyFadeOut () { var animateCSS = { opacity : 0 , }; $ ( \".object\" ). animate ( animateCSS ); } $ ( \".object\" ). click ( tinyFadeOut ); </ script > </ body > </ html > Setting an animation time \u00b6 You can optionally pass in the time (in milliseconds) that an animation should run as the second parameter to the animate() method: function tinyFadeOut () { var animateCSS = { opacity : 0 , }; // Here we can control the duration of the animation var animationTime = 5000 ; // 5 seconds $ ( \".object\" ). animate ( animateCSS , animationTime ); } $ ( \".object\" ). click ( tinyFadeOut ); Running a function when the animation finishes \u00b6 You can optionally pass a function as the third argument to animate() . This function will run when the animation is complete: function moveRight () { var animateCSS = { // Here we are adding 200px to the left property left : \"+=200\" , }; var animationTime = 5000 ; // Once the animation is complete, we run the callback function `moveLeft()` $ ( \".object\" ). animate ( animateCSS , animationTime , moveLeft ); } function moveLeft () { var animateCSS = { // Here we are subtracting 200px to the left property left : \"-=200\" , }; $ ( \".object\" ). animate ( animateCSS ); } $ ( \".object\" ). click ( moveRight ); Further Reading jQuery API - .animate() Learn jQuery - Custom Effects with .animate() jQuery Events \u00b6 The following event methods handle events on our webpage. They all have a similar function signature (except the on() method): $ ( \"cssSelector\" ). methodName ( callbackFunction ); change() \u00b6 The change() method will execute a function when the input value has changed. <!DOCTYPE html> < html > < head > < title > The Change Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function vanishInput () { $ ( \"form\" ). fadeOut (); } /* * Run the `vanishInput()` function when any `<input>` * element in the `<form>` is changed. */ $ ( \"form\" ). change ( vanishInput ); </ script > </ body > </ html > click() \u00b6 The click() method allows you to execute a function when element is clicked. <!DOCTYPE html> < html > < head > < title > The Click Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function clickHeading () { $ ( \"#heading\" ). show (); $ ( \"form\" ). show (); } /* * When the button with the id of `name` is clicked, * the `clickHeading()` function will run. */ $ ( \"#name\" ). click ( clickHeading ); </ script > </ body > </ html > hover() \u00b6 The hover() method allows you to execute a function when the cursor hovers over an element. <!DOCTYPE html> < html > < head > < title > The Hover Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function turnToGold () { var headingCSS = { color : \"gold\" , }; $ ( \"#heading\" ). css ( headingCss ); } /* * When you hover over the element with the id of `#heading`, * call the `turnToGold()` function. */ $ ( \"#heading\" ). hover ( turnToGold ); </ script > </ body > </ html > mousemove() \u00b6 The mousemove() method allows you to execute a function when the mouse moves on top of the given element. <!DOCTYPE html> < html > < head > < title > The Mousemove Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function changeLogo () { var changeLogoCSS = { color : \"blue\" , }; $ ( \"#wave\" ). css ( changeLogoCSS ); } /* * When the mouse moves around the element with an * id of `#wave`, run the `changeLogo()` function. */ $ ( \"#wave\" ). mousemove ( changeLogo ); </ script > </ body > </ html > mouseover() \u00b6 The mouseover() method allows you to execute a function when the mouse is over the element. <!DOCTYPE html> < html > < head > < title > The Mouseover Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function changeLogo () { var changeLogoCSS = { fontSize : \"100px\" , }; $ ( \"#wave\" ). animate ( changeLogoCSS , \"2s\" ); } /* * When the mouse moves over the element with an * id of `#wave`, run the `changeLogo()` function. */ $ ( \"#wave\" ). mouseover ( changeLogo ); </ script > </ body > </ html > submit() \u00b6 The submit() method allows you to submit form values. <!DOCTYPE html> < html > < head > < title > Submitting Form Values </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function submitWizardName ( event ) { event . preventDefault (); var wizardName = $ ( \"#wizardName\" ). val (); $ ( \"#heading\" ). text ( `Welcome ${ wizardName } !` ); } /* * When the `<form>` is submitted, run the * the `submitWizardName()` function. */ $ ( \"form\" ). submit ( submitWizardName ); </ script > </ body > </ html > on() \u00b6 The on() method allows you to run any event on an element. Syntax: $ ( \"cssSelector\" ). on ( \"eventName\" , callbackFunction ); Example Output: function clickedBody () { alert ( \"You clicked on the body!\" ); } $ ( \"body\" ). on ( \"click\" , clickedBody ); off() \u00b6 To remove any events from an element use the off() method function removeEvent () { $ ( \"body\" ). off ( \"click\" ); alert ( \"Click has been deactivated!\" ); } // setTimeout() will call removeEvent() after 5000 milliseconds(5 seconds) setTimeout ( removeEvent , 5000 ); Further Reading Learn jQuery - Events Getting And Setting An Element's Content \u00b6 element.textContent \u00b6 The textContent property sets or returns the text content of an element. <!DOCTYPE html> < html > < head > < title > Changing The Text Of An Element </ title > </ head > < body > < div > < div class = \"object\" id = \"one\" > One </ div > < div class = \"object\" id = \"two\" > Two </ div > </ div > < script > function changeText () { var element = document . querySelector ( \"#one\" ); /* * Here we are setting the text content of the element with the * id `one` to the new text. */ element . textContent = \"New Text\" ; } changeText (); </ script > </ body > </ html > $(element).text() \u00b6 jQuery's text() method allows you to get or set the text of an HTML element. <!DOCTYPE html> < html > < head > < title > Setting The Text Of An Element </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function submitName ( event ) { event . preventDefault (); var wizardName = $ ( \"#wizardName\" ). val (); /* * Here we are setting the text of element with the * ID `one` to the value of the input text in the `<input>`. */ $ ( \"#one\" ). text ( `Welcome ${ wizardName } !` ); } $ ( \"form\" ). submit ( submitName ); </ script > </ body > </ html > element.innerHtml \u00b6 The innerHtml property sets or returns the HTML of an element. <!DOCTYPE html> < html > < head > < title > Changing The HTML Of An Element </ title > </ head > < body > < div > < div class = \"container\" > < div class = \"object\" id = \"one\" > One </ div > < div class = \"object\" id = \"two\" > Two </ div > </ div > </ div > < script > // Here we are adding an HTML element to the existing .container element var element3 = document . querySelector ( \".container\" ); element3 . innerHTML += \"<div class='object'>Three</div>\" ; </ script > </ body > </ html > $(element).html() \u00b6 jQuery's html() method allows you to change the innerHTML of an element. <!DOCTYPE html> < html > < head > < title > Changing The HTML Of An Element </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > # one { color : blue ; } </ style > </ head > < body > < div > < div class = \"container\" > < div class = \"object\" id = \"one\" > One </ div > < div class = \"object\" id = \"two\" > Two </ div > < button id = \"change-html-button\" > Submit </ button > </ div > </ div > < script > function changeHTML () { /* * Here we are returning the HTML of the element with the * ID `one` and replacing the HTML of the element with the * id `two`. */ var newContent = $ ( \"#one\" ). html (); $ ( \"#two\" ). html ( newContent ); } $ ( \"#change-html-button\" ). click ( changeHTML ); </ script > </ body > </ html > element.value \u00b6 When using <form> elements like <input> and <textarea> , the element.value property gives you the text inside the element. You can also use this to set the value of a <form> element's text. <!DOCTYPE html> < html > < head > < title > Getting The Value Of A Form Element </ title > < style > form { width : 256 px ; margin : 100 px auto ; } # greeting { text-align : center ; margin-top : 12 px ; } </ style > </ head > < body > < form > < input type = \"text\" id = \"username\" /> < button > Register </ button > < div id = \"greeting\" ></ div > </ form > < script > var usernameElement = document . querySelector ( \"#username\" ); var formElement = document . querySelector ( \"form\" ); var greetingElement = document . querySelector ( \"#greeting\" ); formElement . addEventListener ( \"submit\" , registerUser ); function registerUser ( event ) { event . preventDefault (); var username = usernameElement . value ; greetingElement . textContent = `Greetings ${ username } !` ; } </ script > </ body > </ html > $(element).val() \u00b6 jQuery's .val() method allows you to get or set the value of a <form> element such as an <input> or <textarea> . <!DOCTYPE html> < html > < head > < title > Getting The Value Of A Form Element </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > form { width : 256 px ; margin : 100 px auto ; } # greeting { text-align : center ; margin-top : 12 px ; } </ style > </ head > < body > < form > < input type = \"text\" id = \"username\" /> < button > Register </ button > < div id = \"greeting\" ></ div > </ form > < script > $ ( \"form\" ). on ( \"submit\" , registerUser ); function registerUser ( event ) { event . preventDefault (); var username = $ ( \"#username\" ). val (); $ ( \"#greeting\" ). text ( `Greetings ${ username } !` ); } </ script > </ body > </ html > Further Reading MDN - textContent MDN - innerHTML MDN - HTMLDataElement.value Eloquent JavaScript - Node Properties Learn jQuery - Manipulating Elements jQuery API - text jQuery API - html jQuery API - val Getting and Setting Attributes \u00b6 getAttribute() \u00b6 The getAttribute() function allows you to access the attribute of an element <!DOCTYPE html> < html > < head > < title > Getting Attributes </ title > </ head > < body > < div > < div class = \"object\" id = \"one\" ></ div > < img class = \"object\" id = \"two\" src = \"\" /> < input type = \"text\" placeholder = \"Dog Name\" id = \"three\" /> </ div > < script > var element = document . querySelector ( \"#three\" ); var elementAttribute = element . getAttribute ( \"type\" ); console . log ( \"The input type is \" + elementAttribute ); </ script > </ body > </ html > Example Output: The input type is text setAttribute() \u00b6 The setAttribute() function allows you to set or update the attribute of an element <!DOCTYPE html> < html > < head > < title > Setting Attributes </ title > </ head > < body > < div > < div class = \"object\" id = \"one\" ></ div > < img class = \"object\" id = \"two\" src = \"\" /> </ div > < script > var imageElement = document . getElementById ( \"two\" ); imageElement . setAttribute ( \"src\" , \"dog.png\" ); </ script > </ body > </ html > Example Output: attr() \u00b6 jQuery's attr() function allows you access or add the attribute to an element <!DOCTYPE html> < html > < head > < title > Working With Attributes </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < img class = \"object\" id = \"one\" src = \"\" /> < img class = \"object\" id = \"two\" src = \"\" /> </ div > < script > function clickedPicture ( event ) { var clicked = event . target ; // Here we are grabbing the id attribute of the clicked image var id = $ ( clicked ). attr ( \"id\" ); if ( id == \"one\" ) { $ ( \"#one\" ). attr ( \"src\" , \"dog.jpg\" ); } else if ( id == \"two\" ) { $ ( \"#two\" ). attr ( \"src\" , \"cat.jpg\" ); } } $ ( \".object\" ). click ( clickedPicture ); </ script > </ body > </ html > Using attributes as properties \u00b6 When you select an element from the DOM, there are many properties that live on the element. These can be accessed with dot notation (.), and some common attributes (like style , id , and src ) are easy to get and set as a property. <!DOCTYPE html> < html > < head > < title > Setting Attributes Through Element Properties </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < img class = \"object\" id = \"one\" src = \"\" /> < img class = \"object\" id = \"two\" src = \"\" /> </ div > < script > var imageOne = document . getElementById ( \"one\" ); var imageTwo = document . getElementById ( \"two\" ); function clickedPicture ( event ) { var clicked = event . target ; // Here we are grabbing the id attribute of the clicked image var id = clicked . id ; if ( id == \"one\" ) { // We can use the `src` attribute directly imageOne . src = \"dog.jpg\" ; } else if ( id == \"two\" ) { imageTwo . src = \"cat.jpg\" ; } } $ ( \".object\" ). click ( clickedPicture ); </ script > </ body > </ html > Further Reading MDN - getAttribute MDN - setAttribute The Modern JavaScript Tutorial - Attributes and Properties Eloquent JavaScript - Attributes Getting the size and position of an element \u00b6 The following properties return the size and position of an element: <!DOCTYPE html> < html > < head > < title > Size & Position </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > # one { width : 300 px ; height : 200 px ; position : absolute ; left : 250 px ; top : 100 px ; } </ style > </ head > < body > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < script > var element = document . querySelector ( \"#one\" ); // The offsetWidth property returns an integer value for an element's width. var elementWidth = element . offsetWidth ; console . log ( ` Element width: ${ elementWidth } px` ); // The offsetHeight property returns an integer value for an element's height. var elementHeight = element . offsetHeight ; console . log ( ` Element height: ${ elementHeight } px` ); // The offsetLeft property returns an integer value for an element's left position. var elementLeft = element . offsetLeft ; console . log ( ` Element left position: ${ elementLeft } px` ); // The offsetTop property returns an integer value for an element's top position. var elementTop = element . offsetTop ; console . log ( ` Element top position: ${ elementTop } px` ); </ script > </ body > </ html > Example Output: Element width: 300px Element height: 200px Element left position: 250px Element top position: 100px Further Reading The Modern JavaScript Tutorial - Element Size and Scrolling Eloquent JavaScript - Layout Hiding and Showing Elements \u00b6 jQuery has a few different methods for hiding/showing elements. Depending on your needs, you may want the element to fade in/out or not. <!DOCTYPE html> < html > < head > < title > Hiding and Showing Elements </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > button { margin : 48 px auto ; font-size : 24 px ; } # button-1 { position : fixed ; top : 100 px ; left : 400 px ; } </ style > </ head > < body > < button id = \"button-1\" > Button 1 </ button > < button onclick = \"hideButton1();\" > Hide Button 1 </ button > < button onclick = \"showButton1();\" > Show Button 1 </ button > < button onclick = \"fadeOutButton1();\" > Fade Out Button 1 </ button > < button onclick = \"fadeInButton1();\" > Fade In Button 1 </ button > < script > var button1 = $ ( \"#button-1\" ); function hideButton1 () { button1 . hide (); } function showButton1 () { button1 . show (); } function fadeOutButton1 () { button1 . fadeOut (); } function fadeInButton1 () { button1 . fadeIn (); } </ script > </ body > </ html > Saving Items In localStorage \u00b6 Web browsers allow you to save information in localStorage . This data will exist between page loads as long as the user doesn't clear the browser's cookies. <!DOCTYPE html> < html > < head > < title > Adding Elements To A Webpage </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < form > < label for = \"username\" > Please enter your username: < input type = \"text\" id = \"username\" name = \"username\" /> </ label > < button type = \"submit\" > Save Username </ button > </ form > < div id = \"previous-users-container\" ></ div > < script > $ ( \"form\" ). submit ( saveUsername ); function saveUsername ( event ) { event . preventDefault (); var username = $ ( \"#username\" ). val (); var nextUserNumber = localStorage . length ; localStorage . setItem ( `userNumber- ${ nextUserNumber } ` , username ); showPreviousUsers (); } function showPreviousUsers () { $ ( \"#previous-users-container\" ). html ( \"\" ); for ( var i = 0 ; i < localStorage . length ; i ++ ) { var username = localStorage . getItem ( `userNumber- ${ i } ` ); $ ( \"#previous-users-container\" ). append ( `<p> ${ username } </p>` ); } } </ script > </ body > </ html > Selecting Elements From HTML Documents \u00b6 The document object allows you to interact with HTML documents from a JavaScript program. The most important thing you'll use the document object for is querying an HTML document for an element or elements. There are several methods to do this using the native document object. jQuery also provides a way to query HTML documents, and we'll cover both methods below. Getting an element by id \u00b6 The document.getElementById() method allows you to select an HTML element by it's id attribute: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > </ head > < body > <!-- This is the element we'll grab from our JavaScript program --> < h1 id = \"page-title\" > Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler </ h1 > <!-- HTML abbreviated since it's not important --> < script > // Get the #page-title element and store it in a variable var pageTitleElement = document . getElementById ( \"page-title\" ); // Change the font color of the #page-title element pageTitleElement . style . color = \"blue\" ; // Can also do everything in one line document . getElementById ( \"page-title\" ). style . color = \"blue\" ; </ script > </ body > </ html > Getting an element by class name \u00b6 The document.getElementsByClassName() method allows you to return the selected HTML elements by it's class attribute: <!DOCTYPE html> < html > < head > < title > Home </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" ></ div > < div class = \"object\" ></ div > < div class = \"object\" ></ div > </ div > < script > // Return all elements with the class name of `object` var allObjects = document . getElementsByClassName ( \"object\" ); // changeBackground() will change the background color of the clicked box function changeBackgroundColor ( event ) { box = event . currentTarget ; box . style . backgroundColor = \"#003566\" ; } // Here we are looping through each element and attaching an onclick event for ( var object of allObjects ) { object . onclick = changeBackgroundColor ; } </ script > </ body > </ html > Getting an element by tag name \u00b6 The document.getElementsByTagName() method allows you to return the selected HTML elements by it's tag name: <!DOCTYPE html> < html > < head > < title > Home </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" ></ div > < div class = \"object\" ></ div > < div class = \"object\" ></ div > </ div > < script > // Return all elements with class name `object` var allObjects = document . getElementsByTagName ( \"div\" ); // Add border color to all `<div>` tags for ( var object of allObjects ) { object . style . borderColor = \"#ffd60a\" ; } </ script > </ body > </ html > querySelector() \u00b6 The document.querySelector() method allows you to return the first element with the given name: <!DOCTYPE html> < html > < head > < title > Home </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" ></ div > < div class = \"object\" ></ div > < div class = \"object\" ></ div > </ div > < script > // Return the first element with the class name of `object` var firstElement = document . querySelector ( \".object\" ); /* * Add color to the border of the first element with * the class name `object` */ firstElement . style . borderColor = \"red\" ; </ script > </ body > </ html > querySelectorAll() \u00b6 The document.querySelectorAll() method allows you to return a list of all elements with the given attribute: <!DOCTYPE html> < html > < head > < title > Home </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" ></ div > < div class = \"object\" ></ div > < div class = \"object\" ></ div > </ div > < script > // Return all elements with the class name of `object` var allObjects = document . querySelectorAll ( \".object\" ); // Here we are looping through each element to change the `borderWidth` for ( var object of allObjects ) { object . style . borderWidth = \"20px\" ; } </ script > </ body > </ html > Getting elements with jQuery \u00b6 The jQuery library allows you to select elements with the $() function. You can add any valid CSS selector as the argument. Here, we use the id attribute to select a single element: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > <!-- Must include the jQuery library in the <head> --> < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > <!-- This is the element we'll grab from our JavaScript program --> < h1 id = \"page-title\" > Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler </ h1 > <!-- HTML abbreviated since it's not important --> < script > // Get the #page-title element and store it in a variable var pageTitleElement = $ ( \"#page-title\" ); // Change the font color of the #page-title element pageTitleElement . attr ( \"style\" , \"color: blue\" ); // Can also do everything in one line $ ( \"#page-title\" ). attr ( \"style\" , \"color: blue\" ); </ script > </ body > </ html > You can select multiple elements as well. For example, elements that all share the same class can be edited together like this: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > <!-- Must include the jQuery library in the <head> --> < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > <!-- Other HTML abbreviated since it's not important --> < div > < h2 > About me </ h2 > <!-- We'll grab these elements from JavaScript --> < p class = \"likes\" > I like to code </ p > < p class = \"likes\" > I like tacos </ p > < p class = \"likes\" > I like pugs </ p > </ div > < script > // Get the .likes elements and store them in a variable var likesElements = $ ( \".likes\" ); // Change the font color of all the .likes elements likesElements . attr ( \"style\" , \"color: red\" ); // Can also do everything in one line $ ( \".likes\" ). attr ( \"style\" , \"color: red\" ); </ script > </ body > </ html > Further Reading The Modern JavaScript Tutorial - Searching DOM Elements Eloquent JavaScript - Finding Elements Learn jQuery - Selecting Elements Styling DOM Nodes \u00b6 element.style \u00b6 The style property allows you to set or adjust an element's CSS styles from JavaScript. Note JavaScript syntax for accessing style properties differs from CSS syntax. CSS Javascript background-color: blue; backgroundColor = \"blue\"; background-image: url(\"taco.png\"); backgroundImage = \"url(taco.png)\"; font-size: 40px; fontSize = \"40px\"; <!DOCTYPE html> < html > < head > < title > Changing An Element's Style </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < script > var element = document . getElementById ( \"one\" ); function changeStyle () { element . style . borderColor = \"blue\" ; element . style . backgroundImage = \"linear-gradient(blue,gold,black)\" ; } element . onclick = changeStyle ; </ script > </ body > </ html > $(element).css() \u00b6 jQuery's css() method allows you to set or return the style of an element <!DOCTYPE html> < html > < head > < title > Changing An Element's Style </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < script > function changeStyle () { var boxCSS = { borderColor : \"blue\" , backgroundImage : \"linear-gradient(black,blue,gold)\" , }; $ ( \".object\" ). css ( boxCSS ); } $ ( \".object\" ). click ( changeStyle ); </ script > </ body > </ html > $(element).addClass() and $(element).removeClass() \u00b6 jQuery also has two methods for adding/removing classes on an element. These can be easier to use than other methods of styling DOM nodes from JavaScript since you can write the CSS in it's own file. <!DOCTYPE html> < html > < head > < title > Adding and Removing Classes </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > button { margin : 48 px auto ; font-size : 24 px ; } # button-1 { position : fixed ; top : 100 px ; left : 300 px ; } . red { color : red ; } </ style > </ head > < body > < button id = \"button-1\" > Button 1 </ button > < button onclick = \"addRedClass();\" > Add \".red\" class to button 1 </ button > < button onclick = \"removeRedClass();\" > Remove \".red\" class from button 1 </ button > < script > var button1 = $ ( \"#button-1\" ); function addRedClass () { button1 . addClass ( \"red\" ); } function removeRedClass () { button1 . removeClass ( \"red\" ); } </ script > </ body > </ html > Further Reading MDN - style jQuery API - .css() Timers \u00b6 There are two timer functions that allow us to execute code at a later time. setTimeout() \u00b6 The setTimeout() function will execute a callback function after waiting for some amount time. Function signature: var timeoutID = setTimeout ( callbackFunction , milliseconds ); Parameters: callbackFunction ( function ): The function you want to run after the given interval. milliseconds ( number ): The amount of time before the callbackFunction should run. Returns: A numeric ID representing the eventual execution of the callbackFunction . Example usage: function addCat () { var catImage = document . getElementById ( \"cat\" ); catImage . style . opacity = 1 ; } // Execute the `addCat()` function after 10,000 milliseconds (10 seconds). setTimeout ( addCat , 10000 ); setInterval() \u00b6 The setInterval() function will execute a given callback function repeatedly over a set time interval. Function signature: var intervalID = setInterval ( callbackFunction , milliseconds ); Parameters: callbackFunction ( function ): The function to run every given milliseconds . milliseconds ( number ): The amount of time between each execution of callbackFunction . Returns: A numeric ID representing the interval executing the callbackFunction . Example Usage: var likes = 0 ; function increaseCatLikes () { likes ++ ; document . getElementById ( \"likes\" ). textContent = likes ; } // Execute the `increaseCatLikes()` function every 5,000 milliseconds (5 seconds). setInterval ( increaseCatLikes , 5000 ); clearTimeout() \u00b6 If you need to cancel execution of a callback function setup by setTimeout() or setInterval() use clearTimeout() . This function will require an intervalID parameter for the timeout or interval you are trying to clear. Function signature: clearTimeout ( intervalID ); Parameters: intervalID ( number ): The interval ID returned from setTimeout() or setInterval() . Example usage: Here's how you can cancel a function that setTimeout() is going to execute: function addCat () { var catImage = document . getElementById ( \"cat\" ); catImage . style . opacity = 1 ; } // Execute the `addCat()` function after 10,000 milliseconds (10 seconds). var catTimeoutID = setTimeout ( addCat , 10000 ); /* * This function could be run by another part of the script to cancel * the execution fo the `addCat()` function. It would only work if the * time interval (10 seconds) hand't already passed. */ function stopAddCat () { clearTimeout ( catTimeoutID ); } Here's how you can cancel a function that setInterval() is running: var likes = 0 ; function increaseCatLikes () { likes ++ ; document . getElementById ( \"likes\" ). textContent = likes ; if ( likes == 20 ) { alert ( \"Interval cleared\" ); // `clearInterval()` will stop executing `catLikes()` after 20 likes. clearInterval ( catIntervalID ); } } var catIntervalID = setInterval ( increaseCatLikes , 5000 ); Further Reading The Modern JavaScript Tutorial - Scheduling Eloquent JavaScript - Timers MDN - setTimeout MDN - setInterval Play / Pause Media \u00b6 Javascript play() and pause() functions allow you to control media on your webpage. <!DOCTYPE html> < html > < head > < title > Audio </ title > </ head > < body > < div class = \"container\" > < img id = \"taco\" src = \"tacos.png\" /> < audio id = \"audio\" src = \"audio/never-gonna-give-you-up.mp3\" preload ></ audio > < button id = \"btn\" style = \"opacity: 0;\" > Stop </ button > </ div > < script > var taco = document . getElementById ( \"taco\" ); var audio = document . getElementById ( \"audio\" ); var btn = document . getElementById ( \"btn\" ); function play () { // currentTime property controls the playback position in seconds. audio . currentTime = 0 ; audio . play (); btn . style . opacity = 1 ; } function pause () { audio . pause (); } taco . onclick = play ; btn . onclick = pause ; </ script > </ body > </ html > Event Object \u00b6 On a clicked element, we can access several properties, including the target property, by using the event object. This allows us to return the clicked element's HTML: <!DOCTYPE html> < html > < head > < title > Event </ title > < style > # red-box { width : 200 px ; height : 200 px ; margin : auto ; border-radius : 10 % ; background-color : #ff1141 ; box-shadow : inset -5 px -5 px 10 px rgb ( 57 , 57 , 57 ); background-image : linear-gradient ( rgb ( 255 , 173 , 187 ), rgb ( 80 , 255 , 211 )); } </ style > </ head > < body > < div class = \"container\" > < h1 > Class name: </ h1 > < div class = \"box\" id = \"red-box\" ></ div > </ div > < script > var box = document . querySelector ( '.box' ) var heading = document . querySelector ( 'h1' ) function clickedElement ( event ) { // here we are accessing the clicked element var clickedBox = event . target ; console . log ( clickedBox ) /* here we changing the text to show the class name of the clicked box */ heading . textContent += clickedBox . className } box . onclick = clickedElement ; </ script > </ body > </ html >","title":"Browser APIs and jQuery"},{"location":"javascript/browser-apis-and-jquery/#browser-apis-and-jquery","text":"JavaScript is the language that powers the interactive web! We use JavaScript as the primary language in these courses at CodeWizardsHQ: Elementary Middle School High School Interactive Websites with JavaScript Interactive JavaScript Fundamentals of Web Development Capstone 3 Web Interfaces User Interface Development Capstone 2 Capstone 1 Mastering APIs APIs and Databases Capstone 3 Capstone 2 DevOps and Software Engineering Capstone 3 In this section of our documentation, you'll find references on how to use the built-in browser APIs and the jQuery library to manipulate webpages. You'll also find many Further reading sections, which pull from these excellent JavaScript resources: MDN JavaScript Docs The Modern JavaScript Tutorial Eloquent JavaScript Learn jQuery jQuery API","title":"Browser APIs and jQuery"},{"location":"javascript/browser-apis-and-jquery/#adding-javascript-to-webpages","text":"JavaScript programs at CWHQ are all run in a web browser, and they need to be included in an HTML document in order to run in the browser. There are several ways to do this, which will be outlined below.","title":"Adding JavaScript to Webpages"},{"location":"javascript/browser-apis-and-jquery/#using-a-script-tag-in-the-body","text":"The <script> tag is used to insert JavaScript programs directly into an HTML page. You should make the <script> tag the last tag in the <body> of an HTML document: <!DOCTYPE html> < html > < head > < title > Inserting JavaScript with a script tag in the body </ title > </ head > < body > < h1 > This is HTML </ h1 > < script > // Everything in here is JavaScript </ script > </ body > </ html >","title":"Using a &lt;script&gt; tag in the &lt;body&gt;"},{"location":"javascript/browser-apis-and-jquery/#using-a-script-tag-in-the-head","text":"You can link an external JavaScript file to an HTML document using the <script> tag in the <head> of the document: my-awesome-script.js console . log ( \"Hello, world!\" ); index.html <!DOCTYPE html> < html > < head > < title > Inserting JavaScript with a script tag in the head </ title > < script src = \"my-awesome-script.js\" ></ script > </ head > < body > < h1 > This is HTML </ h1 > </ body > </ html > Further Reading MDN - Use JavaScript Within A Webpage The Modern JavaScript Tutorial - Hello World Eloquent JavaScript - HTML and JavaScript","title":"Using a &lt;script&gt; tag in the &lt;head&gt;"},{"location":"javascript/browser-apis-and-jquery/#adding-jquery-to-webpages","text":"The jQuery library is not part of the core Browser APIs and must be loaded in the <head> of your HTML document. You can find the most recent version of the jQuery library on their website . Generally, you want the minified version of the library, as that has all the core functionality in a smaller payload (which improves browser load times). <!DOCTYPE html> < html > < head > < title > Adding jQuery to a webpage </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < h1 > This is HTML </ h1 > </ body > </ html > Further Reading Using jQuery With A CDN","title":"Adding jQuery to Webpages"},{"location":"javascript/browser-apis-and-jquery/#using-the-browsers-dev-tools","text":"When working with JavaScript, the developer tools (dev tools for short) are your best friend! You should spend some time reading the documentation for the dev tools in your browser of choice. We'll use Chrome in these examples, and they have excellent documentation here .","title":"Using The Browser's Dev Tools"},{"location":"javascript/browser-apis-and-jquery/#the-javascript-console","text":"Once you've opened the dev tools in your browser of choice (look up how to do it for your browser) you'll have access to a Console tab. You can write JavaScript code here to test things out:","title":"The JavaScript console"},{"location":"javascript/browser-apis-and-jquery/#modifying-the-dom-from-the-console","text":"You have access to the DOM on the page and can edit it from the Console tab, just like if you were in a JavaScript program:","title":"Modifying the DOM from the console"},{"location":"javascript/browser-apis-and-jquery/#debugging-errors-from-the-console","text":"If something is not working as you expect, you should open the Console tab in the dev tools and see if there are any errors. This can save you hours of debugging time if you learn to do it well! Often, you'll be given a link that opens the offending file and points at the exact line that caused the issue, as in this example: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > </ head > < body > < h1 > Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler </ h1 > <!-- HTML abbreviated since it's not important --> < script > function thisHasAnError () { // uh oh, this will throw an error! vra rightBehindThis ; } </ script > </ body > </ html >","title":"Debugging errors from the console"},{"location":"javascript/browser-apis-and-jquery/#testing-variables-and-functions-from-the-console","text":"You have access to any global variables and functions in the Console tab and can mess around with them to see if they are doing what you expect: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > </ head > < body > < h1 > Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler </ h1 > <!-- HTML abbreviated since it's not important --> < script > var myFavoriteFood = \"Tacos\" ; function sayHello ( name ) { console . log ( \"Hello, \" + name ); } </ script > </ body > </ html > Further Reading Using the Chrome Devtools","title":"Testing variables and functions from the console"},{"location":"javascript/browser-apis-and-jquery/#adding-elements-to-a-webpage","text":"jQuery has two methods to add elements to a webpage. One adds the element before the selected element and one adds it after. <!DOCTYPE html> < html > < head > < title > Adding Elements To A Webpage </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > button { margin : 48 px auto ; font-size : 24 px ; } </ style > </ head > < body > < div id = \"button-1-container\" > < button id = \"button-1\" > Button 1 </ button > </ div > < button onclick = \"addButtonBefore();\" > Add a button before button 1 </ button > < button onclick = \"addButtonAfter();\" > Add a button after button 1 </ button > < script > var button1Container = $ ( \"#button-1-container\" ); function addButtonBefore () { button1Container . prepend ( \"<button>Before Button 1</button>\" ); } function addButtonAfter () { button1Container . append ( \"<button>After Button 1</button>\" ); } </ script > </ body > </ html >","title":"Adding Elements To A Webpage"},{"location":"javascript/browser-apis-and-jquery/#animations","text":"","title":"Animations"},{"location":"javascript/browser-apis-and-jquery/#animate","text":"jQuery's animate() method allows us to create animations on CSS properties. Function signature: animate(properties, duration, callback) Parameters: properties ( object ): The CSS properties to animate duration ( number ): The duration of the animation in milliseconds (optional) callback ( function ): The function to call once animation completes (optional) <!DOCTYPE html> < html > < head > < title > Animations </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < script > function tinyFadeOut () { var animateCSS = { opacity : 0 , }; $ ( \".object\" ). animate ( animateCSS ); } $ ( \".object\" ). click ( tinyFadeOut ); </ script > </ body > </ html >","title":"animate()"},{"location":"javascript/browser-apis-and-jquery/#setting-an-animation-time","text":"You can optionally pass in the time (in milliseconds) that an animation should run as the second parameter to the animate() method: function tinyFadeOut () { var animateCSS = { opacity : 0 , }; // Here we can control the duration of the animation var animationTime = 5000 ; // 5 seconds $ ( \".object\" ). animate ( animateCSS , animationTime ); } $ ( \".object\" ). click ( tinyFadeOut );","title":"Setting an animation time"},{"location":"javascript/browser-apis-and-jquery/#running-a-function-when-the-animation-finishes","text":"You can optionally pass a function as the third argument to animate() . This function will run when the animation is complete: function moveRight () { var animateCSS = { // Here we are adding 200px to the left property left : \"+=200\" , }; var animationTime = 5000 ; // Once the animation is complete, we run the callback function `moveLeft()` $ ( \".object\" ). animate ( animateCSS , animationTime , moveLeft ); } function moveLeft () { var animateCSS = { // Here we are subtracting 200px to the left property left : \"-=200\" , }; $ ( \".object\" ). animate ( animateCSS ); } $ ( \".object\" ). click ( moveRight ); Further Reading jQuery API - .animate() Learn jQuery - Custom Effects with .animate()","title":"Running a function when the animation finishes"},{"location":"javascript/browser-apis-and-jquery/#jquery-events","text":"The following event methods handle events on our webpage. They all have a similar function signature (except the on() method): $ ( \"cssSelector\" ). methodName ( callbackFunction );","title":"jQuery Events"},{"location":"javascript/browser-apis-and-jquery/#change","text":"The change() method will execute a function when the input value has changed. <!DOCTYPE html> < html > < head > < title > The Change Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function vanishInput () { $ ( \"form\" ). fadeOut (); } /* * Run the `vanishInput()` function when any `<input>` * element in the `<form>` is changed. */ $ ( \"form\" ). change ( vanishInput ); </ script > </ body > </ html >","title":"change()"},{"location":"javascript/browser-apis-and-jquery/#click","text":"The click() method allows you to execute a function when element is clicked. <!DOCTYPE html> < html > < head > < title > The Click Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function clickHeading () { $ ( \"#heading\" ). show (); $ ( \"form\" ). show (); } /* * When the button with the id of `name` is clicked, * the `clickHeading()` function will run. */ $ ( \"#name\" ). click ( clickHeading ); </ script > </ body > </ html >","title":"click()"},{"location":"javascript/browser-apis-and-jquery/#hover","text":"The hover() method allows you to execute a function when the cursor hovers over an element. <!DOCTYPE html> < html > < head > < title > The Hover Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function turnToGold () { var headingCSS = { color : \"gold\" , }; $ ( \"#heading\" ). css ( headingCss ); } /* * When you hover over the element with the id of `#heading`, * call the `turnToGold()` function. */ $ ( \"#heading\" ). hover ( turnToGold ); </ script > </ body > </ html >","title":"hover()"},{"location":"javascript/browser-apis-and-jquery/#mousemove","text":"The mousemove() method allows you to execute a function when the mouse moves on top of the given element. <!DOCTYPE html> < html > < head > < title > The Mousemove Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function changeLogo () { var changeLogoCSS = { color : \"blue\" , }; $ ( \"#wave\" ). css ( changeLogoCSS ); } /* * When the mouse moves around the element with an * id of `#wave`, run the `changeLogo()` function. */ $ ( \"#wave\" ). mousemove ( changeLogo ); </ script > </ body > </ html >","title":"mousemove()"},{"location":"javascript/browser-apis-and-jquery/#mouseover","text":"The mouseover() method allows you to execute a function when the mouse is over the element. <!DOCTYPE html> < html > < head > < title > The Mouseover Event </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function changeLogo () { var changeLogoCSS = { fontSize : \"100px\" , }; $ ( \"#wave\" ). animate ( changeLogoCSS , \"2s\" ); } /* * When the mouse moves over the element with an * id of `#wave`, run the `changeLogo()` function. */ $ ( \"#wave\" ). mouseover ( changeLogo ); </ script > </ body > </ html >","title":"mouseover()"},{"location":"javascript/browser-apis-and-jquery/#submit","text":"The submit() method allows you to submit form values. <!DOCTYPE html> < html > < head > < title > Submitting Form Values </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < button id = \"name\" > Click </ button > < h1 id = \"heading\" > Welcome! </ h1 > < span class = \"material-icons-outlined\" id = \"wave\" > waving_hand </ span > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function submitWizardName ( event ) { event . preventDefault (); var wizardName = $ ( \"#wizardName\" ). val (); $ ( \"#heading\" ). text ( `Welcome ${ wizardName } !` ); } /* * When the `<form>` is submitted, run the * the `submitWizardName()` function. */ $ ( \"form\" ). submit ( submitWizardName ); </ script > </ body > </ html >","title":"submit()"},{"location":"javascript/browser-apis-and-jquery/#on","text":"The on() method allows you to run any event on an element. Syntax: $ ( \"cssSelector\" ). on ( \"eventName\" , callbackFunction ); Example Output: function clickedBody () { alert ( \"You clicked on the body!\" ); } $ ( \"body\" ). on ( \"click\" , clickedBody );","title":"on()"},{"location":"javascript/browser-apis-and-jquery/#off","text":"To remove any events from an element use the off() method function removeEvent () { $ ( \"body\" ). off ( \"click\" ); alert ( \"Click has been deactivated!\" ); } // setTimeout() will call removeEvent() after 5000 milliseconds(5 seconds) setTimeout ( removeEvent , 5000 ); Further Reading Learn jQuery - Events","title":"off()"},{"location":"javascript/browser-apis-and-jquery/#getting-and-setting-an-elements-content","text":"","title":"Getting And Setting An Element's Content"},{"location":"javascript/browser-apis-and-jquery/#elementtextcontent","text":"The textContent property sets or returns the text content of an element. <!DOCTYPE html> < html > < head > < title > Changing The Text Of An Element </ title > </ head > < body > < div > < div class = \"object\" id = \"one\" > One </ div > < div class = \"object\" id = \"two\" > Two </ div > </ div > < script > function changeText () { var element = document . querySelector ( \"#one\" ); /* * Here we are setting the text content of the element with the * id `one` to the new text. */ element . textContent = \"New Text\" ; } changeText (); </ script > </ body > </ html >","title":"element.textContent"},{"location":"javascript/browser-apis-and-jquery/#elementtext","text":"jQuery's text() method allows you to get or set the text of an HTML element. <!DOCTYPE html> < html > < head > < title > Setting The Text Of An Element </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < form > < input type = \"text\" placeholder = \"Enter Wizard Name\" id = \"wizardName\" autocomplete = \"off\" /> < input id = \"sub\" type = \"submit\" value = \"Submit\" /> </ form > </ div > < script > function submitName ( event ) { event . preventDefault (); var wizardName = $ ( \"#wizardName\" ). val (); /* * Here we are setting the text of element with the * ID `one` to the value of the input text in the `<input>`. */ $ ( \"#one\" ). text ( `Welcome ${ wizardName } !` ); } $ ( \"form\" ). submit ( submitName ); </ script > </ body > </ html >","title":"$(element).text()"},{"location":"javascript/browser-apis-and-jquery/#elementinnerhtml","text":"The innerHtml property sets or returns the HTML of an element. <!DOCTYPE html> < html > < head > < title > Changing The HTML Of An Element </ title > </ head > < body > < div > < div class = \"container\" > < div class = \"object\" id = \"one\" > One </ div > < div class = \"object\" id = \"two\" > Two </ div > </ div > </ div > < script > // Here we are adding an HTML element to the existing .container element var element3 = document . querySelector ( \".container\" ); element3 . innerHTML += \"<div class='object'>Three</div>\" ; </ script > </ body > </ html >","title":"element.innerHtml"},{"location":"javascript/browser-apis-and-jquery/#elementhtml","text":"jQuery's html() method allows you to change the innerHTML of an element. <!DOCTYPE html> < html > < head > < title > Changing The HTML Of An Element </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > # one { color : blue ; } </ style > </ head > < body > < div > < div class = \"container\" > < div class = \"object\" id = \"one\" > One </ div > < div class = \"object\" id = \"two\" > Two </ div > < button id = \"change-html-button\" > Submit </ button > </ div > </ div > < script > function changeHTML () { /* * Here we are returning the HTML of the element with the * ID `one` and replacing the HTML of the element with the * id `two`. */ var newContent = $ ( \"#one\" ). html (); $ ( \"#two\" ). html ( newContent ); } $ ( \"#change-html-button\" ). click ( changeHTML ); </ script > </ body > </ html >","title":"$(element).html()"},{"location":"javascript/browser-apis-and-jquery/#elementvalue","text":"When using <form> elements like <input> and <textarea> , the element.value property gives you the text inside the element. You can also use this to set the value of a <form> element's text. <!DOCTYPE html> < html > < head > < title > Getting The Value Of A Form Element </ title > < style > form { width : 256 px ; margin : 100 px auto ; } # greeting { text-align : center ; margin-top : 12 px ; } </ style > </ head > < body > < form > < input type = \"text\" id = \"username\" /> < button > Register </ button > < div id = \"greeting\" ></ div > </ form > < script > var usernameElement = document . querySelector ( \"#username\" ); var formElement = document . querySelector ( \"form\" ); var greetingElement = document . querySelector ( \"#greeting\" ); formElement . addEventListener ( \"submit\" , registerUser ); function registerUser ( event ) { event . preventDefault (); var username = usernameElement . value ; greetingElement . textContent = `Greetings ${ username } !` ; } </ script > </ body > </ html >","title":"element.value"},{"location":"javascript/browser-apis-and-jquery/#elementval","text":"jQuery's .val() method allows you to get or set the value of a <form> element such as an <input> or <textarea> . <!DOCTYPE html> < html > < head > < title > Getting The Value Of A Form Element </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > form { width : 256 px ; margin : 100 px auto ; } # greeting { text-align : center ; margin-top : 12 px ; } </ style > </ head > < body > < form > < input type = \"text\" id = \"username\" /> < button > Register </ button > < div id = \"greeting\" ></ div > </ form > < script > $ ( \"form\" ). on ( \"submit\" , registerUser ); function registerUser ( event ) { event . preventDefault (); var username = $ ( \"#username\" ). val (); $ ( \"#greeting\" ). text ( `Greetings ${ username } !` ); } </ script > </ body > </ html > Further Reading MDN - textContent MDN - innerHTML MDN - HTMLDataElement.value Eloquent JavaScript - Node Properties Learn jQuery - Manipulating Elements jQuery API - text jQuery API - html jQuery API - val","title":"$(element).val()"},{"location":"javascript/browser-apis-and-jquery/#getting-and-setting-attributes","text":"","title":"Getting and Setting Attributes"},{"location":"javascript/browser-apis-and-jquery/#getattribute","text":"The getAttribute() function allows you to access the attribute of an element <!DOCTYPE html> < html > < head > < title > Getting Attributes </ title > </ head > < body > < div > < div class = \"object\" id = \"one\" ></ div > < img class = \"object\" id = \"two\" src = \"\" /> < input type = \"text\" placeholder = \"Dog Name\" id = \"three\" /> </ div > < script > var element = document . querySelector ( \"#three\" ); var elementAttribute = element . getAttribute ( \"type\" ); console . log ( \"The input type is \" + elementAttribute ); </ script > </ body > </ html > Example Output: The input type is text","title":"getAttribute()"},{"location":"javascript/browser-apis-and-jquery/#setattribute","text":"The setAttribute() function allows you to set or update the attribute of an element <!DOCTYPE html> < html > < head > < title > Setting Attributes </ title > </ head > < body > < div > < div class = \"object\" id = \"one\" ></ div > < img class = \"object\" id = \"two\" src = \"\" /> </ div > < script > var imageElement = document . getElementById ( \"two\" ); imageElement . setAttribute ( \"src\" , \"dog.png\" ); </ script > </ body > </ html > Example Output:","title":"setAttribute()"},{"location":"javascript/browser-apis-and-jquery/#attr","text":"jQuery's attr() function allows you access or add the attribute to an element <!DOCTYPE html> < html > < head > < title > Working With Attributes </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < img class = \"object\" id = \"one\" src = \"\" /> < img class = \"object\" id = \"two\" src = \"\" /> </ div > < script > function clickedPicture ( event ) { var clicked = event . target ; // Here we are grabbing the id attribute of the clicked image var id = $ ( clicked ). attr ( \"id\" ); if ( id == \"one\" ) { $ ( \"#one\" ). attr ( \"src\" , \"dog.jpg\" ); } else if ( id == \"two\" ) { $ ( \"#two\" ). attr ( \"src\" , \"cat.jpg\" ); } } $ ( \".object\" ). click ( clickedPicture ); </ script > </ body > </ html >","title":"attr()"},{"location":"javascript/browser-apis-and-jquery/#using-attributes-as-properties","text":"When you select an element from the DOM, there are many properties that live on the element. These can be accessed with dot notation (.), and some common attributes (like style , id , and src ) are easy to get and set as a property. <!DOCTYPE html> < html > < head > < title > Setting Attributes Through Element Properties </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div > < img class = \"object\" id = \"one\" src = \"\" /> < img class = \"object\" id = \"two\" src = \"\" /> </ div > < script > var imageOne = document . getElementById ( \"one\" ); var imageTwo = document . getElementById ( \"two\" ); function clickedPicture ( event ) { var clicked = event . target ; // Here we are grabbing the id attribute of the clicked image var id = clicked . id ; if ( id == \"one\" ) { // We can use the `src` attribute directly imageOne . src = \"dog.jpg\" ; } else if ( id == \"two\" ) { imageTwo . src = \"cat.jpg\" ; } } $ ( \".object\" ). click ( clickedPicture ); </ script > </ body > </ html > Further Reading MDN - getAttribute MDN - setAttribute The Modern JavaScript Tutorial - Attributes and Properties Eloquent JavaScript - Attributes","title":"Using attributes as properties"},{"location":"javascript/browser-apis-and-jquery/#getting-the-size-and-position-of-an-element","text":"The following properties return the size and position of an element: <!DOCTYPE html> < html > < head > < title > Size & Position </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > # one { width : 300 px ; height : 200 px ; position : absolute ; left : 250 px ; top : 100 px ; } </ style > </ head > < body > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < script > var element = document . querySelector ( \"#one\" ); // The offsetWidth property returns an integer value for an element's width. var elementWidth = element . offsetWidth ; console . log ( ` Element width: ${ elementWidth } px` ); // The offsetHeight property returns an integer value for an element's height. var elementHeight = element . offsetHeight ; console . log ( ` Element height: ${ elementHeight } px` ); // The offsetLeft property returns an integer value for an element's left position. var elementLeft = element . offsetLeft ; console . log ( ` Element left position: ${ elementLeft } px` ); // The offsetTop property returns an integer value for an element's top position. var elementTop = element . offsetTop ; console . log ( ` Element top position: ${ elementTop } px` ); </ script > </ body > </ html > Example Output: Element width: 300px Element height: 200px Element left position: 250px Element top position: 100px Further Reading The Modern JavaScript Tutorial - Element Size and Scrolling Eloquent JavaScript - Layout","title":"Getting the size and position of an element"},{"location":"javascript/browser-apis-and-jquery/#hiding-and-showing-elements","text":"jQuery has a few different methods for hiding/showing elements. Depending on your needs, you may want the element to fade in/out or not. <!DOCTYPE html> < html > < head > < title > Hiding and Showing Elements </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > button { margin : 48 px auto ; font-size : 24 px ; } # button-1 { position : fixed ; top : 100 px ; left : 400 px ; } </ style > </ head > < body > < button id = \"button-1\" > Button 1 </ button > < button onclick = \"hideButton1();\" > Hide Button 1 </ button > < button onclick = \"showButton1();\" > Show Button 1 </ button > < button onclick = \"fadeOutButton1();\" > Fade Out Button 1 </ button > < button onclick = \"fadeInButton1();\" > Fade In Button 1 </ button > < script > var button1 = $ ( \"#button-1\" ); function hideButton1 () { button1 . hide (); } function showButton1 () { button1 . show (); } function fadeOutButton1 () { button1 . fadeOut (); } function fadeInButton1 () { button1 . fadeIn (); } </ script > </ body > </ html >","title":"Hiding and Showing Elements"},{"location":"javascript/browser-apis-and-jquery/#saving-items-in-localstorage","text":"Web browsers allow you to save information in localStorage . This data will exist between page loads as long as the user doesn't clear the browser's cookies. <!DOCTYPE html> < html > < head > < title > Adding Elements To A Webpage </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < form > < label for = \"username\" > Please enter your username: < input type = \"text\" id = \"username\" name = \"username\" /> </ label > < button type = \"submit\" > Save Username </ button > </ form > < div id = \"previous-users-container\" ></ div > < script > $ ( \"form\" ). submit ( saveUsername ); function saveUsername ( event ) { event . preventDefault (); var username = $ ( \"#username\" ). val (); var nextUserNumber = localStorage . length ; localStorage . setItem ( `userNumber- ${ nextUserNumber } ` , username ); showPreviousUsers (); } function showPreviousUsers () { $ ( \"#previous-users-container\" ). html ( \"\" ); for ( var i = 0 ; i < localStorage . length ; i ++ ) { var username = localStorage . getItem ( `userNumber- ${ i } ` ); $ ( \"#previous-users-container\" ). append ( `<p> ${ username } </p>` ); } } </ script > </ body > </ html >","title":"Saving Items In localStorage"},{"location":"javascript/browser-apis-and-jquery/#selecting-elements-from-html-documents","text":"The document object allows you to interact with HTML documents from a JavaScript program. The most important thing you'll use the document object for is querying an HTML document for an element or elements. There are several methods to do this using the native document object. jQuery also provides a way to query HTML documents, and we'll cover both methods below.","title":"Selecting Elements From HTML Documents"},{"location":"javascript/browser-apis-and-jquery/#getting-an-element-by-id","text":"The document.getElementById() method allows you to select an HTML element by it's id attribute: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > </ head > < body > <!-- This is the element we'll grab from our JavaScript program --> < h1 id = \"page-title\" > Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler </ h1 > <!-- HTML abbreviated since it's not important --> < script > // Get the #page-title element and store it in a variable var pageTitleElement = document . getElementById ( \"page-title\" ); // Change the font color of the #page-title element pageTitleElement . style . color = \"blue\" ; // Can also do everything in one line document . getElementById ( \"page-title\" ). style . color = \"blue\" ; </ script > </ body > </ html >","title":"Getting an element by id"},{"location":"javascript/browser-apis-and-jquery/#getting-an-element-by-class-name","text":"The document.getElementsByClassName() method allows you to return the selected HTML elements by it's class attribute: <!DOCTYPE html> < html > < head > < title > Home </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" ></ div > < div class = \"object\" ></ div > < div class = \"object\" ></ div > </ div > < script > // Return all elements with the class name of `object` var allObjects = document . getElementsByClassName ( \"object\" ); // changeBackground() will change the background color of the clicked box function changeBackgroundColor ( event ) { box = event . currentTarget ; box . style . backgroundColor = \"#003566\" ; } // Here we are looping through each element and attaching an onclick event for ( var object of allObjects ) { object . onclick = changeBackgroundColor ; } </ script > </ body > </ html >","title":"Getting an element by class name"},{"location":"javascript/browser-apis-and-jquery/#getting-an-element-by-tag-name","text":"The document.getElementsByTagName() method allows you to return the selected HTML elements by it's tag name: <!DOCTYPE html> < html > < head > < title > Home </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" ></ div > < div class = \"object\" ></ div > < div class = \"object\" ></ div > </ div > < script > // Return all elements with class name `object` var allObjects = document . getElementsByTagName ( \"div\" ); // Add border color to all `<div>` tags for ( var object of allObjects ) { object . style . borderColor = \"#ffd60a\" ; } </ script > </ body > </ html >","title":"Getting an element by tag name"},{"location":"javascript/browser-apis-and-jquery/#queryselector","text":"The document.querySelector() method allows you to return the first element with the given name: <!DOCTYPE html> < html > < head > < title > Home </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" ></ div > < div class = \"object\" ></ div > < div class = \"object\" ></ div > </ div > < script > // Return the first element with the class name of `object` var firstElement = document . querySelector ( \".object\" ); /* * Add color to the border of the first element with * the class name `object` */ firstElement . style . borderColor = \"red\" ; </ script > </ body > </ html >","title":"querySelector()"},{"location":"javascript/browser-apis-and-jquery/#queryselectorall","text":"The document.querySelectorAll() method allows you to return a list of all elements with the given attribute: <!DOCTYPE html> < html > < head > < title > Home </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" ></ div > < div class = \"object\" ></ div > < div class = \"object\" ></ div > </ div > < script > // Return all elements with the class name of `object` var allObjects = document . querySelectorAll ( \".object\" ); // Here we are looping through each element to change the `borderWidth` for ( var object of allObjects ) { object . style . borderWidth = \"20px\" ; } </ script > </ body > </ html >","title":"querySelectorAll()"},{"location":"javascript/browser-apis-and-jquery/#getting-elements-with-jquery","text":"The jQuery library allows you to select elements with the $() function. You can add any valid CSS selector as the argument. Here, we use the id attribute to select a single element: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > <!-- Must include the jQuery library in the <head> --> < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > <!-- This is the element we'll grab from our JavaScript program --> < h1 id = \"page-title\" > Daniel Schroeder - Code Wizard and Semi-Professional Pug Wrestler </ h1 > <!-- HTML abbreviated since it's not important --> < script > // Get the #page-title element and store it in a variable var pageTitleElement = $ ( \"#page-title\" ); // Change the font color of the #page-title element pageTitleElement . attr ( \"style\" , \"color: blue\" ); // Can also do everything in one line $ ( \"#page-title\" ). attr ( \"style\" , \"color: blue\" ); </ script > </ body > </ html > You can select multiple elements as well. For example, elements that all share the same class can be edited together like this: <!DOCTYPE html> < html > < head > < title > Daniel's Homepage </ title > <!-- Must include the jQuery library in the <head> --> < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > <!-- Other HTML abbreviated since it's not important --> < div > < h2 > About me </ h2 > <!-- We'll grab these elements from JavaScript --> < p class = \"likes\" > I like to code </ p > < p class = \"likes\" > I like tacos </ p > < p class = \"likes\" > I like pugs </ p > </ div > < script > // Get the .likes elements and store them in a variable var likesElements = $ ( \".likes\" ); // Change the font color of all the .likes elements likesElements . attr ( \"style\" , \"color: red\" ); // Can also do everything in one line $ ( \".likes\" ). attr ( \"style\" , \"color: red\" ); </ script > </ body > </ html > Further Reading The Modern JavaScript Tutorial - Searching DOM Elements Eloquent JavaScript - Finding Elements Learn jQuery - Selecting Elements","title":"Getting elements with jQuery"},{"location":"javascript/browser-apis-and-jquery/#styling-dom-nodes","text":"","title":"Styling DOM Nodes"},{"location":"javascript/browser-apis-and-jquery/#elementstyle","text":"The style property allows you to set or adjust an element's CSS styles from JavaScript. Note JavaScript syntax for accessing style properties differs from CSS syntax. CSS Javascript background-color: blue; backgroundColor = \"blue\"; background-image: url(\"taco.png\"); backgroundImage = \"url(taco.png)\"; font-size: 40px; fontSize = \"40px\"; <!DOCTYPE html> < html > < head > < title > Changing An Element's Style </ title > </ head > < body > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < script > var element = document . getElementById ( \"one\" ); function changeStyle () { element . style . borderColor = \"blue\" ; element . style . backgroundImage = \"linear-gradient(blue,gold,black)\" ; } element . onclick = changeStyle ; </ script > </ body > </ html >","title":"element.style"},{"location":"javascript/browser-apis-and-jquery/#elementcss","text":"jQuery's css() method allows you to set or return the style of an element <!DOCTYPE html> < html > < head > < title > Changing An Element's Style </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > </ head > < body > < div class = \"container\" > < div class = \"object\" id = \"one\" ></ div > </ div > < script > function changeStyle () { var boxCSS = { borderColor : \"blue\" , backgroundImage : \"linear-gradient(black,blue,gold)\" , }; $ ( \".object\" ). css ( boxCSS ); } $ ( \".object\" ). click ( changeStyle ); </ script > </ body > </ html >","title":"$(element).css()"},{"location":"javascript/browser-apis-and-jquery/#elementaddclass-and-elementremoveclass","text":"jQuery also has two methods for adding/removing classes on an element. These can be easier to use than other methods of styling DOM nodes from JavaScript since you can write the CSS in it's own file. <!DOCTYPE html> < html > < head > < title > Adding and Removing Classes </ title > < script src = \"https://code.jquery.com/jquery-3.6.0.min.js\" integrity = \"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin = \"anonymous\" ></ script > < style > button { margin : 48 px auto ; font-size : 24 px ; } # button-1 { position : fixed ; top : 100 px ; left : 300 px ; } . red { color : red ; } </ style > </ head > < body > < button id = \"button-1\" > Button 1 </ button > < button onclick = \"addRedClass();\" > Add \".red\" class to button 1 </ button > < button onclick = \"removeRedClass();\" > Remove \".red\" class from button 1 </ button > < script > var button1 = $ ( \"#button-1\" ); function addRedClass () { button1 . addClass ( \"red\" ); } function removeRedClass () { button1 . removeClass ( \"red\" ); } </ script > </ body > </ html > Further Reading MDN - style jQuery API - .css()","title":"$(element).addClass() and $(element).removeClass()"},{"location":"javascript/browser-apis-and-jquery/#timers","text":"There are two timer functions that allow us to execute code at a later time.","title":"Timers"},{"location":"javascript/browser-apis-and-jquery/#settimeout","text":"The setTimeout() function will execute a callback function after waiting for some amount time. Function signature: var timeoutID = setTimeout ( callbackFunction , milliseconds ); Parameters: callbackFunction ( function ): The function you want to run after the given interval. milliseconds ( number ): The amount of time before the callbackFunction should run. Returns: A numeric ID representing the eventual execution of the callbackFunction . Example usage: function addCat () { var catImage = document . getElementById ( \"cat\" ); catImage . style . opacity = 1 ; } // Execute the `addCat()` function after 10,000 milliseconds (10 seconds). setTimeout ( addCat , 10000 );","title":"setTimeout()"},{"location":"javascript/browser-apis-and-jquery/#setinterval","text":"The setInterval() function will execute a given callback function repeatedly over a set time interval. Function signature: var intervalID = setInterval ( callbackFunction , milliseconds ); Parameters: callbackFunction ( function ): The function to run every given milliseconds . milliseconds ( number ): The amount of time between each execution of callbackFunction . Returns: A numeric ID representing the interval executing the callbackFunction . Example Usage: var likes = 0 ; function increaseCatLikes () { likes ++ ; document . getElementById ( \"likes\" ). textContent = likes ; } // Execute the `increaseCatLikes()` function every 5,000 milliseconds (5 seconds). setInterval ( increaseCatLikes , 5000 );","title":"setInterval()"},{"location":"javascript/browser-apis-and-jquery/#cleartimeout","text":"If you need to cancel execution of a callback function setup by setTimeout() or setInterval() use clearTimeout() . This function will require an intervalID parameter for the timeout or interval you are trying to clear. Function signature: clearTimeout ( intervalID ); Parameters: intervalID ( number ): The interval ID returned from setTimeout() or setInterval() . Example usage: Here's how you can cancel a function that setTimeout() is going to execute: function addCat () { var catImage = document . getElementById ( \"cat\" ); catImage . style . opacity = 1 ; } // Execute the `addCat()` function after 10,000 milliseconds (10 seconds). var catTimeoutID = setTimeout ( addCat , 10000 ); /* * This function could be run by another part of the script to cancel * the execution fo the `addCat()` function. It would only work if the * time interval (10 seconds) hand't already passed. */ function stopAddCat () { clearTimeout ( catTimeoutID ); } Here's how you can cancel a function that setInterval() is running: var likes = 0 ; function increaseCatLikes () { likes ++ ; document . getElementById ( \"likes\" ). textContent = likes ; if ( likes == 20 ) { alert ( \"Interval cleared\" ); // `clearInterval()` will stop executing `catLikes()` after 20 likes. clearInterval ( catIntervalID ); } } var catIntervalID = setInterval ( increaseCatLikes , 5000 ); Further Reading The Modern JavaScript Tutorial - Scheduling Eloquent JavaScript - Timers MDN - setTimeout MDN - setInterval","title":"clearTimeout()"},{"location":"javascript/browser-apis-and-jquery/#play-pause-media","text":"Javascript play() and pause() functions allow you to control media on your webpage. <!DOCTYPE html> < html > < head > < title > Audio </ title > </ head > < body > < div class = \"container\" > < img id = \"taco\" src = \"tacos.png\" /> < audio id = \"audio\" src = \"audio/never-gonna-give-you-up.mp3\" preload ></ audio > < button id = \"btn\" style = \"opacity: 0;\" > Stop </ button > </ div > < script > var taco = document . getElementById ( \"taco\" ); var audio = document . getElementById ( \"audio\" ); var btn = document . getElementById ( \"btn\" ); function play () { // currentTime property controls the playback position in seconds. audio . currentTime = 0 ; audio . play (); btn . style . opacity = 1 ; } function pause () { audio . pause (); } taco . onclick = play ; btn . onclick = pause ; </ script > </ body > </ html >","title":"Play / Pause Media"},{"location":"javascript/browser-apis-and-jquery/#event-object","text":"On a clicked element, we can access several properties, including the target property, by using the event object. This allows us to return the clicked element's HTML: <!DOCTYPE html> < html > < head > < title > Event </ title > < style > # red-box { width : 200 px ; height : 200 px ; margin : auto ; border-radius : 10 % ; background-color : #ff1141 ; box-shadow : inset -5 px -5 px 10 px rgb ( 57 , 57 , 57 ); background-image : linear-gradient ( rgb ( 255 , 173 , 187 ), rgb ( 80 , 255 , 211 )); } </ style > </ head > < body > < div class = \"container\" > < h1 > Class name: </ h1 > < div class = \"box\" id = \"red-box\" ></ div > </ div > < script > var box = document . querySelector ( '.box' ) var heading = document . querySelector ( 'h1' ) function clickedElement ( event ) { // here we are accessing the clicked element var clickedBox = event . target ; console . log ( clickedBox ) /* here we changing the text to show the class name of the clicked box */ heading . textContent += clickedBox . className } box . onclick = clickedElement ; </ script > </ body > </ html >","title":"Event Object"},{"location":"javascript/javascript-language/","text":"JavaScript Language \u00b6 JavaScript is the language that powers the interactive web! We use JavaScript as the primary language in these courses at CodeWizardsHQ: Elementary Middle School High School Interactive Websites with JavaScript Interactive JavaScript Fundamentals of Web Development Capstone 3 Web Interfaces User Interface Development Capstone 2 Capstone 1 Mastering APIs APIs and Databases Capstone 3 Capstone 2 DevOps and Software Engineering Capstone 3 In this section of our documentation, you'll find references to most of the core JavaScript language features that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent JavaScript resources: MDN JavaScript Docs The Modern JavaScript Tutorial Eloquent JavaScript Comments \u00b6 Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program. Single Line Comments \u00b6 Single line comments are denoted by the // characters. You can put them above or to the right of the line of code they reference: // Validate the user is logged in and redirect them to the appropriate page. if ( isLoggedIn ( user )) { redirectToHomepage (); } else { redirectToLogin (); } var minHeight = 60 ; // This is measured in inches, not feet! Deactivating Code \u00b6 You can deactivate sections of code with comments: if ( age < 18 ) { // Turning this off for now // prompt_user(); redirectToKidZone (); } else { loginUser (); } Multiline Comments \u00b6 Multiline comments start with /* and end with */ /* This calculates the hypotenuse of a right triangle when given the sides of the right triangle. It's the Pythagorean Theorem. The ** is how you write exponents in JavaScript, and fractional exponents are like roots, so 0.5 is the square root. */ var hypotenuse = ( sideA ** 2 + sideB ** 2 ) ** 0.5 ; Many programmers prefer to put * on each line of a multiline comment and indent a bit for clarity: /* * This calculates the hypotenuse of a right triangle when given the sides * of the right triangle. It's the Pythagorean Theorem. The ** is how you * write exponents in JavaScript, and fractional exponents are like roots, * so 0.5 is the square root. */ var hypotenuse = ( sideA ** 2 + sideB ** 2 ) ** 0.5 ; Further Reading MDN - JavaScript Basics: Comments Eloquent JavaScript - Comments The Modern JavaScript Tutorial - Comments Conditional Statements \u00b6 Conditional statements allow you to run a block of code when a boolean condition is true. if \u00b6 The if statement is the simplest form of conditional statement. If the expression to the right of the if keyword is true , the code block will execute: var isHungry = true ; if ( isHungry ) { console . log ( \"You should eat!\" ); } Example Output: You should eat! Usually, a conditional expression uses comparison operators to generate a boolean result: var age = 19 ; if ( age >= 18 ) { console . log ( \"You are legally an adult, congrats!\" ); } Example Output: You are legally an adult, congrats! else if \u00b6 The else if conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to true will run: var favoriteFood = \"Tacos\" ; if ( favoriteFood == \"Sushi\" ) { console . log ( \"We're going out for Japanese food to night!\" ); } else if ( favoriteFood == \"Pasta\" ) { console . log ( \"How about we eat some Italian food tonight?\" ); } else if ( favoriteFood == \"Tacos\" ) { console . log ( \"Time for some Mexican food!\" ); } else if ( favoriteFood == \"Samosa\" ) { console . log ( \"Let's eat Indian food tonight!\" ); } Example Output: Time for some Mexican food! else \u00b6 The else conditional statement runs when all other conditional statements in a group are false . You can think of it as the default option: var favoriteFood = \"Hot Dogs with Cream Cheese\" ; if ( favoriteFood == \"Sushi\" ) { console . log ( \"We're going out for Japanese food to night!\" ); } else if ( favoriteFood == \"Pasta\" ) { console . log ( \"How about we eat some Italian food tonight?\" ); } else if ( favoriteFood == \"Tacos\" ) { console . log ( \"Time for some Mexican food!\" ); } else if ( favoriteFood == \"Samosa\" ) { console . log ( \"Let's eat Indian food tonight!\" ); } else { console . log ( \"I don't know what that favorite food is!\" ); } I don't know what that favorite food is! Comparison Operators \u00b6 Here are the comparison operators that you can use in conditional expressions to generate a boolean value: Operator Description > Greater-than >= Greater-than or equal-to < Less-than <= Less-than or equal-to == Equal-to != Not equal-to Complex Conditional Statements \u00b6 Complex conditional statements involve combining more than one conditional expression with logical operators : var age = 15 ; var heightInFeet = 4.6 ; if ( age >= 13 && heightInFeet > 5 ) { console . log ( \"You may ride the roller coaster.\" ); } else { console . log ( \"You may NOT ride the roller coaster.\" ); } Example Output: You may NOT ride the roller coaster. You can string as many logical operators together as you want to build more complex conditional statements. Note that it's often easier to read and reason about if you surround each major section with parentheses, as in the example below: var isHungry = false ; var isThirsty = true ; var foodAmount = 10 ; var drinkAmount = 0 ; if (( isHungry && foodAmount > 0 ) || ( isThirsty && drinkAmount > 0 )) { enterKitchen (); } else { playVideoGames (); } Logical Operators \u00b6 Logical operators allow you to combine multiple conditional expressions in a single conditional statement: Operator Description && (and) true when both conditional expressions are true || (or) true when either conditional expression is true ! (not) Reverses the value of a conditional expression Using the && operator \u00b6 The && (and) operator evaluates to true when both conditional expressions are true : var age = 15 ; var heightInFeet = 5.2 ; if ( age >= 13 && heightInFeet > 5 ) { console . log ( \"You may ride the roller coaster.\" ); } else { console . log ( \"You may NOT ride the roller coaster.\" ); } Example Output: You may ride the roller coaster. Using the || operator \u00b6 The || (or) operator evaluates to true when either conditional expression is true : var isHungry = true ; var isThirsty = false ; if ( isHungry || isThirsty ) { console . log ( \"You should go to the kitchen.\" ); } else { console . log ( \"Do whatever, you're good!\" ); } Example Output: You should go to the kitchen. Using the ! operator \u00b6 The ! (not) operator reverses a conditional expression: var isTired = true ; if ( ! isTired ) { console . log ( \"Let's go outside and play.\" ); } else { console . log ( \"Let's take a nap.\" ); } Example Output: Let's take a nap. Nested Conditional Statements \u00b6 Conditional statements can be nested inside other conditional statements. Use indentation to make the nesting obvious at a glance: var role = \"admin\" ; if ( role == \"admin\" || role == \"developer\" ) { console . log ( \"You can see the secret stuff in this app.\" ); if ( role == \"admin\" ) { console . log ( \"You can also see the SUPER secret stuff in this app.\" ); } } Example Output: You can see the secret stuff in this app. You can also see the SUPER secret stuff in this app. Further Reading MDN - JavaScript Building Blocks: Conditionals Eloquent JavaScript - Conditional Execution The Modern JavaScript Tutorial - Conditional Branching Data Types \u00b6 Every value has a data type in JavaScript. The data type determines what kinds of operations you can perform on the value. boolean \u00b6 The boolean data type represents a true or a false value: var isHungry = true ; var isThirsty = false ; Generating boolean values in a conditional statement \u00b6 You normally won't use a boolean directly, but instead will generate a boolean in a conditional statement: var age = 19 ; // This generates `true` if ( age >= 18 ) { console . log ( \"You are an adult!\" ); } // This generates `false` if ( age < 18 ) { console . log ( \"You are a child.\" ); } Truthy and falsy values \u00b6 Booleans are not the only values that can be True/False. Every value in JavaScript is either truthy or falsy , which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy , and all other strings and numbers are truthy . Here's an example of a falsy value: var username = \"\" ; if ( username ) { console . log ( `Hello, ${ username } !` ); } else { console . log ( \"The username is blank\" ); } Example Output: The username is blank Here's an example of a truthy value: var numBananas = 2 ; if ( numBananas ) { console . log ( \"We have bananas!\" ); } else { console . log ( \"We have no bananas!\" ); } Example Output: We have bananas! number \u00b6 The number data type represents any number: var totalCost = 29.99 ; var numBananas = 2 ; Converting string to number \u00b6 You can use the parseInt() function to convert a string to an integer number : var age = parseInt ( \"13\" ); console . log ( age ); // 13 This is often combined with the prompt() function when you prompt the user for a numeric data type: var age = parseInt ( prompt ( \"How old are you? \" )); The parseFloat() function works the same way, except the number will be a decimal number: var heightInInches = parseFloat ( \"60.5\" ); console . log ( heightInInches ); // 60.5 Instead of parseInt() or parseFloat() , you can use the + operator to convert a string to a number : var age = + \"13\" ; console . log ( age ); // 13 var heightInInches = + \"60.5\" ; console . log ( heightInInches ); // 60.5 string \u00b6 The string data type represents a text value: var name = \"Daniel\" ; String concatenation \u00b6 If you need to combine a variable and a string , you can use the + operator. This technique is called string concatenation : var name = \"Daniel\" ; var greeting = \"Hello, \" + name ; console . log ( greeting ); // Hello, Daniel String interpolation \u00b6 Another way to combine a variable and a string is using template-literal strings. This technique is called string interpolation , and it is the preferred way to combine variables and strings . Note that the string must be surrounded by backtick quotes, which are usually near the 1 key on your keyboard: var name = \"Daniel\" ; var age = 35 ; console . log ( `I'm ${ name } and I'm ${ age } years old.` ); Example Output: I'm Daniel and I'm 35 years old. Multiline strings \u00b6 Template literal strings allow you to write large blocks of text in a single console.log() statement: var menu = ` Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* ` ; console . log ( menu ); Example Output: Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* Getting the number of characters in a str \u00b6 You can use the string.length property to get the number of characters in a string : var name = \"Daniel\" ; name . length ; // 6 Checking if a string ends with a set of characters \u00b6 The string.endsWith() method lets you check if a string ends with a given pattern: var emailAddresses = [ \"djs@cwhq.com\" , \"alecg@auburn.edu\" , \"samh@bridges.com\" ]; for ( var emailAddress of emailAddresses ) { if ( emailAddress . endsWith ( \".edu\" )) { console . log ( ` ${ emailAddress } is a school address` ); } else if ( emailAddress . endsWith ( \"cwhq.com\" )) { console . log ( ` ${ emailAddress } is a CWHQ employee address` ); } else { console . log ( `I don't know what ${ emailAddress } is for` ); } } Example Output: djs@cwhq.com is a CWHQ employee address alecg@auburn.edu is a school address I don't know what sam@bridges.com is for Sanitizing user input \u00b6 User's do strange things, but using string.toLowerCase() and string.trim() can help your program to validate string data types. string.toLowerCase() makes a string lowercase: // Imagine a user entered \"Pizza\" with an uppercase P var favoriteFood = \"Pizza\" ; if ( favoriteFood . toLowerCase () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! string.trim() removes leading or trailing whitespace from a string : // Imagine a user entered \" pizza\" with a leading space character var favoriteFood = \" pizza\" ; if ( favoriteFood . trim () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! You can chain these methods together to sanitize a string completely: // What a mess! Extra spaces before/after and odd capitalization var favoriteFood = \" PIzZa \" ; if ( favoriteFood . trim (). toLowerCase () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! Further Reading MDN - JavaScript Data Types and Data Structures The Modern JavaScript Tutorial - Data Types Eloquent JavaScript - Values, Types, and Operators MDN - Truthy MDN - Falsy MDN - JavaScript Reference: Template Literals MDN - JavaScript Reference: String.prototype.trim() MDN - JavaScript Reference: String.prototype.toLowerCase() Data Structures \u00b6 Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house. array \u00b6 The array data structure is used to store data in ordered slots . It is known as mutable sequence type , which means it can be modified after creation. Usually, the items in a array are homogeneous, which means they represent a group of similar items of the same data type: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; var menuPrices = [ 4.5 , 5.75 , 3.0 ]; var ids = [ 184 , 294 , 832 , 98 , 4 ]; You can write an array on multiple lines if you want. The trailing comma is recommended but not required: var foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"ice cream\" , \"asparagus\" ]; Accessing items in an array \u00b6 You can access individual items in an array using the [] characters and the index number of the item. The index numbers start at 0: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( names [ 0 ]); // alecg console . log ( names [ 1 ]); // danielj console . log ( names [ 2 ]); // dimas Adding an item to an array \u00b6 To add an item to an array after it has been created, you can use the array.push() method. The array.push() method adds the item to the end of the array : var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . push ( \"samh\" ); console . log ( names ); // ['alecg', 'danielj', 'dimas', 'samh']; Updating an item in an array \u00b6 To update an array item, replace the value at the index: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names [ 1 ] = \"django\" ; console . log ( names ); // ['alecg', 'django', 'dimas'] Removing an item from an array \u00b6 To remove an item from an array , you can use the array.splice() method. You tell array.splice the index number to start removing items from and the number of items to remove: array . splice ( indexToRemove , numItemsToRemove ); Here's an example that removes the first item from an array : var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . splice ( 0 , 1 ); console . log ( names ); // ['danielj', 'dimas'] If you want to remove an item from the end of an array , use the array.pop() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . pop (); console . log ( names ); // ['alecg', 'danielj']; Looping through an array \u00b6 To loop through the items in an array , use a for...of loop. Note the convention of using the plural names for the array and the singular name for the loop-iteration variable: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( \"This documentation is brought to you by:\" ); for ( var name of names ) { console . log ( name ); } Example Output: This documentation is brought to you by: alecg danielj dimas You can also loop through an array using a traditional for loop if you need to use the index number of each item for something: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( \"This documentation is brought to you by:\" ); for ( var i = 0 ; i < names . length ; i ++ ) { console . log ( names [ i ]); } Example Output: This documentation is brought to you by: alecg danielj dimas Getting the number of items in an array \u00b6 To get the number of items in an array , use the array.length() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; var numNames = names . length ; console . log ( numNames ); // 3 Checking if an item is contained in an array \u00b6 To check if an item is contained in an array , use the array.includes() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( names . includes ( \"alecg\" )); // True console . log ( names . includes ( \"samh\" )); // False Further Reading MDN - The JavaScript Reference - Array Eloquent JavaScript - Data Structures: Objects and Arrays The Modern JavaScript Tutorial - Arrays MDN - The JavaScript Reference - Array.push() MDN - The JavaScript Reference - Array.pop() MDN - The JavaScript Reference - Array.splice() MDN - The JavaScript Reference - Array.includes() object \u00b6 The object data structure is used to store data in key/value pairs. var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; You can use strings for the keys as well, but we'll follow the above form in these docs: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; Accessing items in an object \u00b6 You have to know the key to access an individual item in an object : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var danielJob = staff . danielj ; console . log ( `Daniel is a ${ danielJob } .` ); // Daniel is a Curriculum Developer. var alecJob = staff . alecg ; console . log ( `Alec is a ${ alecJob } .` ); // Alec is a Curriculum Instructor. var dimaJob = staff . dimas .; console . log ( `Dima is a ${ dimaJob } .` ); // Dima is a Designer. Adding an item to an object \u00b6 You can add an item to an object by providing the key/value pair (it's the same syntax as updating an item): var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; staff . django = \"Director Of Pug Snorts\" ; console . log ( staff ); // {danielj: 'Curriculum Developer', alecg: 'Curriculum Instructor', dimas: 'Designer', django: 'Director Of Pug Snorts'} Updating an item in an object \u00b6 To update an item in an object , you must know the key: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; staff . danielj = \"Burrito Taste-Tester\" ; console . log ( staff ); // {danielj: 'Burrito Taste-Tester', alecg: 'Curriculum Instructor', dimas: 'Designer'} Removing an item from an object \u00b6 To remove an item from an object , use the delete operator: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; delete staff . danielj ; console . log ( staff ); // {alecg: 'Curriculum Instructor', dimas: 'Designer'} Looping through an object \u00b6 To loop through an object , you use the for...in loop like this: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; for ( var key in staff ) { // Note the [] used to access the value in the object console . log ( ` ${ key } is a ${ staff [ key ] } .` ); } Example Output: danielj is a Curriculum Developer. alecg is a Curriculum Instructor. dimas is a Designer. Getting the keys from an object \u00b6 If you need to get all of the keys from an object , use the object.keys() method. Note that the keys will be returned as an array : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var names = staff . keys (); console . log ( `Here are all the names in the staff object: ${ names } ` ); Example Output: Here are all the names in the staff object: ['danielj', 'alecg', 'dimas'] Getting the values from an object \u00b6 If you need to get all of the values from an object , use the object.values() method. Note, the values will be returned as an array : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var jobs = staff . values (); console . log ( `Here are all the jobs in the staff object: ${ jobs } ` ); Example Output: Here are all the jobs in the staff object: ['Curriculum Developer', 'Curriculum Instructor', 'Designer'] Getting the number of items in an object \u00b6 You can get the keys from an object and then use the array.length method to get the number of items in an object : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var numberOfStaff = staff . keys (). length ; console . log ( `We have ${ numberOfStaff } people on our staff.` ); // We have 3 people on our staff. Further Reading MDN - The JavaScript Reference - Object Eloquent JavaScript - Objects and Arrays The Modern JavaScript Tutorial - Objects MDN - The JavaScript Reference - for...in MDN - The JavaScript Reference - Object.values() MDN - The JavaScript Reference - Object.keys() MDN - The JavaScript Reference - delete operator Functions \u00b6 Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y. (Don't Repeat Yourself) principle because they reduce unnecessary repetition. Built-in functions \u00b6 JavaScript comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below. parseFloat() \u00b6 The parseFloat() function converts data to a number data type with a decimal point: var pi = parseFloat ( \"3.14\" ); console . log ( pi ); // 3.14 typeof pi ; // 'number var two = parseFloat ( 2 ); console . log ( two ); // 2.0 typeof two ; // 'number' prompt() \u00b6 The prompt() function allows you to prompt a user. The user's response is returned as a string , which you can store in a variable: var name = prompt ( \"What is your name? \" ); console . log ( `Nice to meet you, ${ name } !` ); Example Output: What is your name? Daniel Nice to meet you, Daniel! alert() \u00b6 The alert() function allows you to alert a user with a message box. function sayHi () { alert ( \"Welcome to my page!\" ); } sayHi (); confirm() \u00b6 The confirm() function allows you create a popup message for the user to confirm or cancel. This function returns true if the user has click ok. var wizardName = prompt ( \"Enter name\" ); var nameConfirm = confirm ( `Confirm ${ wizardName } ?` ); if ( nameConfirm ) { document . getElementById ( \"name\" ). innerHTML = `Welcome ${ wizardName } !` ; } else { document . getElementById ( \"name\" ). innerHTML = `Cancelled` ; } parseInt() \u00b6 The parseInt() function converts data to a number data type without a decimal point: var intPI = parseInt ( 3.14 ); console . log ( intPI ); // 3 typeof intPI ; // 'number' var meaningOfLife = parseInt ( \"42\" ); console . log ( meaningOfLife ); // 42 typeof meaningOfLife ; // 'number' console.log() \u00b6 The console.log() function displays text in the developer console: console . log ( \"Hello, world!\" ); // Hello, world! Using special characters with console.log() \u00b6 You can use special characters such as \\n and \\t to format the text a bit. The \\n adds a newline (like hitting enter on your keyboard) and the \\t adds a tab: console . log ( \"Line 1\\nLine 2\\nLine 3\\n\" ); console . log ( \"\\tThis is tabbed over\\n\\tThis too.\" ); Example Output: Line 1 Line 2 Line 3 This is tabbed over This too. Further Reading MDN - Web APIs: console.log() MDN - The JavaScript Reference: parseInt() MDN - The JavaScript Reference: parseFloat() MDN - The JavaScript Reference: window.prompt() User-defined functions \u00b6 You define a function using the function keyword. Functions definitions can go anywhere in your file, but it helps to keep them all organized in a single area for readability: function sayHello () { console . log ( \"Hello!\" ); } Calling a function \u00b6 Defining a function does not run the statements in the body of the function. To run a function, you call it like this: function sayHello () { console . log ( \"Hello!\" ); } sayHello (); // Hello! Adding parameters to a function \u00b6 When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); } Passing arguments to a function \u00b6 If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); } sayHello ( \"Daniel\" ); // Hello, Daniel! Returning a value from a function \u00b6 You can return a value from a function by using the return keyword: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } Capturing a function's return value \u00b6 If a function returns a value, you can capture it in a variable: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } var total = add ( 2 , 3 ); console . log ( total ); // 5 You can also use the value immediately in another function, like console.log() or as part of a template-literal string: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } console . log ( add ( 2 , 3 )); // 5 console . log ( `2 + 3 = ${ add ( 2 , 3 ) } ` ); // 2 + 3 = 5 Indentation in functions \u00b6 Indentation is not required in JavaScript, but you should do it for readability. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you should also indent the body of that statement: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); if ( name == \"Daniel\" ) { console . log ( \"That's a cool name!\" ); } else { console . log ( \"Nice to meet you!\" ); } } sayHello ( \"Daniel\" ); sayHello ( \"Alec\" ); Example Output: Hello, Daniel! That's a cool name! Hello, Alec! Nice to meet you! Using an early return statement to exit a function \u00b6 A return statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body: function greetCodewizard ( name ) { var staff = [ \"danielj\" , \"alecg\" , \"dimas\" ]; if ( ! staff . includes ( name )) { console . log ( \"I don't know you!\" ); return ; } console . log ( `Hello, ${ name } !` ); } greetCodewizard ( \"danielj\" ); // Hello, danielj! greetCodewizard ( \"django\" ); // I don't know you! Further Reading MDN - JavaScript Building Blocks: Functions EloquentJavaScript - Functions The Modern JavaScript Tutorial - Functions Loops \u00b6 If you need to repeat something in your programs, you'll need to use one of JavaScript's looping mechanisms. for \u00b6 JavaScript's for loop is one of the more complicated pieces of syntax in the language. The header of the for loop controls how many times the loop runs, and it consists of three parts: // header for ( counter ; loopContinuationCondition ; incrementOrDecrement ) { // body } The counter is a variable that will hold a number representing the current loop iteration (usually). The loopContinuationCondition is a boolean condition that determines whether the loop should continue. The incrementOrDecrement is a statement that modifies the counter after each loop completes. To see all three elements in action, consider this for loop, which loops 3 times and prints \"Hello\" to the console three times: for ( var counter = 0 ; counter < 3 ; counter ++ ) { console . log ( \"Hello\" ); } Example Output: Hello Hello Hello Generally, the counter is called i . This is a shorthand that many programmers use, and you'll see it in many courses at CWHQ. The name of the variable is completely up to the programmer: for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( \"Hello\" ); } Example Output: Hello Hello Hello Counter-controlled repetition with the for loop \u00b6 A for loop is used to loop a certain number of times (called counter-controlled repetition). You generally perform some action in the body of a for loop: for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( ` ${ i } taco` ); } Example Output: 0 taco 1 taco 2 taco You can use a for loop to loop over an array , but the for...of loop is easier: var fruits = [ \"apple\" , \"banana\" , \"cherry\" ]; for ( var i = 0 ; i < fruits . length ; i ++ ) { console . log ( `Index number: ${ i } Fruit: ${ fruits [ i ] } ` ); } Example Output: Index number: 0 Fruit: apple Index number: 1 Fruit: banana Index number: 2 Fruit: cherry Looping through arrays with the for...of loop \u00b6 The for...of loop is the easiest way to loop through the items in an array . Note the convention of a plural array name (fruits) and a singular loop-iteration variable (fruit): var fruits = [ \"apple\" , \"banana\" , \"cherry\" ]; for ( var fruit of fruits ) { console . log ( fruit ); } Example Output: apple banana cherry Searching for a value in a for...of loop \u00b6 You can use a conditional statement inside a for...of loop to search for a particular item in an array and then do something: var fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ]; for ( var fruit of fruits ) { if ( fruit == \"orange\" ) { console . log ( ` ${ fruit } is the best fruit` ); } } Example Output: orange is the best fruit Finding a value in a for...of loop to use after the loop finishes \u00b6 You can store an item from the for...of loop for later use by creating a variable before the for...of loop with some default value. var fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ]; var bestFruit ; for ( var fruit of fruits ) { if ( fruit == \"orange\" ) { bestFruit = fruit ; } } // The best fruit is orange. console . log ( `The best fruit is ${ bestFruit } .` ); Creating a new array in a for...of loop \u00b6 Often, you'll want to loop through an array and build a new array from the contents of the original array . This technique is called mapping, and it's a common thing to do with arrays and for...of loops: var prices = [ 10 , 12 , 5 , 8 ]; var discounted_prices = []; for ( var price of prices ) { discounted_price = price - price * 0.1 ; discounted_prices . push ( discounted_price ); } // Here are your discounted prices: [9, 10.8, 4.5, 7.2] console . log ( `Here are your discounted prices: ${ discounted_prices } ` ); Looping through objects with the for...in loop \u00b6 The for...in loop is the easiest way to loop through the items in an object . The prop variable name is a convention, it represents each key (property) of the object : var users = { danielj : \"Admin\" , django : \"Support Staff\" , samh : \"Platform Developer\" , }; for ( var prop in users ) { console . log ( `Username: ${ prop } Role: ${ users [ prop ] } ` ); } Example Output: Username: danielj Role: Admin Username: django Role: Support Staff Username: samh Role: Platform Developer Further Reading MDN - JavaScript Reference - for MDN - JavaScript Reference - for...of MDN - JavaScript Reference - for...in Eloquent JavaScript - for loops The Modern JavaScript Tutorial - The \"for\" loop while \u00b6 A while loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop). For example, you can use a while loop to ask a user something until they answer correctly: var keepLooping = true ; // This variable controls whether we loop or not. while ( keepLooping ) { var userGuess = prompt ( \"What is the meaning of life? \" ); if ( userGuess == \"42\" ) { console . log ( \"That's correct!\" ); keepLooping = false ; // Stops the loop. } else { console . log ( \"That's incorrect! Please try again.\" ); } } Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct! Using break to exit a loop \u00b6 You can also use a break statement instead of using a variable to control how many times an indefinite while loop runs: while ( true ) { userGuess = prompt ( \"What is the meaning of life? \" ); if ( userGuess == \"42\" ) { console . log ( \"That's correct!\" ); break ; // Stops the loop. } else { console . log ( \"That's incorrect! Please try again.\" ); } } Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct! Counter-controlled repetition \u00b6 You can use a while loop to perform counter-controlled repetition as well, but the for loop is generally preferred for this: var counter = 0 ; while ( counter < 5 ) { console . log ( counter ); counter ++ ; // If you forget this, you'll have an infinite loop! } Example Output: 0 1 2 3 4 Further Reading MDN - JavaScript Reference: while Eloquent JavaScript - while and do loops The Modern JavaScript Tutorial - The \"while\" loop Math Operations \u00b6 JavaScript can perform most mathematical operations with ease. There are standard operators for all of the arithmetic operations and the Math object has access to many more operations for things like Trigonometry. Arithmetic Operators \u00b6 The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator: var total = 8 + 2 ; var difference = 8 - 2 ; var product = 8 * 2 ; var quotient = 8 / 2 ; console . log ( `8 + 2 = ${ total } ` ); // 8 + 2 = 10 console . log ( `8 - 2 = ${ difference } ` ); // 8 - 2 = 6 console . log ( `8 * 2 = ${ product } ` ); // 8 * 2 = 16 console . log ( `8 / 2 = ${ quotient } ` ); // 8 / 2 = 4 Other Operators \u00b6 There are a few other common operators that JavaScript provides for common math operations. Modulo \u00b6 The modulo operator ( % ) returns the remainder after division: 10 % 3 ; // 1 Power \u00b6 The power operator ( ** ) multiplies a number by itself a given number of times: 3 ** 2 ; // 9 Further Reading MDN - The JavaScript Guide: Arithmetic Operators Eloquent JavaScript - Arithmetic The Modern JavaScript Tutorial - Basic operators, maths The Math object \u00b6 JavaScript's Math object can be used to gain access to certain constants (such as PI), to perform trig calculations, or to get random numbers, among other things. Getting random numbers with Math.random() \u00b6 The Math.random() method returns a random decimal number between 0 and 1: var randomNumber = Math . random (); console . log ( randomNumber ); // 0.1524438866958424 If you'd like to get a random whole number between a min and max , this helper function is useful: function random ( min , max ) { var num = Math . floor ( Math . random () * ( max - min + 1 )) + min ; return num ; } var randomNumber = random ( 1 , 10 ); console . log ( randomNumber ); // 9 Rounding numbers \u00b6 To round a number down, use Math.floor() : var roundedNumber = Math . floor ( 4.6 ); console . log ( roundedNumber ); // 4 To round a number up, use Math.ceil() : var roundedNumber = Math . ceil ( 4.2 ); console . log ( roundedNumber ); // 4 To round a number to the nearest integer, use Math.round() : var roundedNumber = Math . round ( 4.4 ); console . log ( roundedNumber ); // 4 roundedNumber = Math . round ( 4.5 ); console . log ( roundedNumber ); // 5 Further Reading MDN - The JavaScript Reference: Math Using this \u00b6 In JavaScript, you can use the this keyword to get a reference to an element when an event is triggered (like a click event). <!DOCTYPE html> < html > < head > < title > Using \"this\" in JavaScript </ title > < style > button { display : block ; margin : 48 px auto ; font-size : 24 px ; } </ style > </ head > < body > < button id = \"my-button\" onclick = \"changeButtonText(this);\" > Original Button Text </ button > < script > function changeButtonText ( element ) { element . textContent = \"Updated Button Text\" ; } </ script > </ body > </ html > Variables \u00b6 Variables assign a name to a value. The naming convention in JavaScript is to use camelCase for variable names. Creating a variable \u00b6 You create a variable using the var keyword: var myVariable ; Usually, you create a variable and assign a value to the variable the assignment operator ( = ) at once: var myName = \"Daniel\" ; var myAge = 35 ; Updating a numeric variable \u00b6 You can update the value stored in a numeric variable like this: var score = 0 ; score = score + 1 ; // 0 + 1 console . log ( score ); // 1 score = score + 1 ; // 1 + 1 console . log ( score ); // 2 The same works for decreasing the value of a numeric variable: var score = 3 ; score = score - 1 ; // 3 - 1 console . log ( score ); // 2 score = score - 1 ; // 2 - 1 console . log ( score ); // 1 There is a shorthand notation for increasing and decreasing the value of a numeric variable: var score = 0 ; score += 1 ; // 0 + 1 console . log ( score ); // 1 score += 1 ; // 1 + 1 console . log ( score ); // 2 score -= 1 ; // 2 - 1 console . log ( score ); // 1 score -= 1 ; // 1 - 1 console . log ( score ); // 0 For an even more compact notation, you can use ++ or -- to increase/decrease the value of a numeric variable: var score = 0 ; score ++ ; // 0 + 1 console . log ( score ); // 1 score ++ ; // 1 + 1 console . log ( score ); // 2 score -- ; // 2 - 1 console . log ( score ); // 1 score -- ; // 1 - 1 console . log ( score ); // 0 Global vs. local variables \u00b6 Any variable created outside of function definition is considered a global variable: // This is a global variable. var score = 0 ; function updateScore () { score = score + 1 ; // 1 } console . log ( score ); // 0 updateScore (); // Changes the global `score` variable console . log ( score ); // 1 Updates to global variables affect the variable throughout the program. If you want a variable to exist only inside of a function, you can make it local to the function by creating the variable (with the var keyword) inside the function: // This is a global variable. var score = 0 ; function updateScore () { // This is a local variable, it only exists within `updateScore()` var score = 1 ; } console . log ( score ); // 0 updateScore (); // Doesn't change the global `score` variable console . log ( score ); // 0 Further Reading MDN - JavaScript First Steps - Variables Eloquent JavaScript - Bindings The Modern JavaScript Tutorial - Variables","title":"JavaScript Language"},{"location":"javascript/javascript-language/#javascript-language","text":"JavaScript is the language that powers the interactive web! We use JavaScript as the primary language in these courses at CodeWizardsHQ: Elementary Middle School High School Interactive Websites with JavaScript Interactive JavaScript Fundamentals of Web Development Capstone 3 Web Interfaces User Interface Development Capstone 2 Capstone 1 Mastering APIs APIs and Databases Capstone 3 Capstone 2 DevOps and Software Engineering Capstone 3 In this section of our documentation, you'll find references to most of the core JavaScript language features that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent JavaScript resources: MDN JavaScript Docs The Modern JavaScript Tutorial Eloquent JavaScript","title":"JavaScript Language"},{"location":"javascript/javascript-language/#comments","text":"Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program.","title":"Comments"},{"location":"javascript/javascript-language/#single-line-comments","text":"Single line comments are denoted by the // characters. You can put them above or to the right of the line of code they reference: // Validate the user is logged in and redirect them to the appropriate page. if ( isLoggedIn ( user )) { redirectToHomepage (); } else { redirectToLogin (); } var minHeight = 60 ; // This is measured in inches, not feet!","title":"Single Line Comments"},{"location":"javascript/javascript-language/#deactivating-code","text":"You can deactivate sections of code with comments: if ( age < 18 ) { // Turning this off for now // prompt_user(); redirectToKidZone (); } else { loginUser (); }","title":"Deactivating Code"},{"location":"javascript/javascript-language/#multiline-comments","text":"Multiline comments start with /* and end with */ /* This calculates the hypotenuse of a right triangle when given the sides of the right triangle. It's the Pythagorean Theorem. The ** is how you write exponents in JavaScript, and fractional exponents are like roots, so 0.5 is the square root. */ var hypotenuse = ( sideA ** 2 + sideB ** 2 ) ** 0.5 ; Many programmers prefer to put * on each line of a multiline comment and indent a bit for clarity: /* * This calculates the hypotenuse of a right triangle when given the sides * of the right triangle. It's the Pythagorean Theorem. The ** is how you * write exponents in JavaScript, and fractional exponents are like roots, * so 0.5 is the square root. */ var hypotenuse = ( sideA ** 2 + sideB ** 2 ) ** 0.5 ; Further Reading MDN - JavaScript Basics: Comments Eloquent JavaScript - Comments The Modern JavaScript Tutorial - Comments","title":"Multiline Comments"},{"location":"javascript/javascript-language/#conditional-statements","text":"Conditional statements allow you to run a block of code when a boolean condition is true.","title":"Conditional Statements"},{"location":"javascript/javascript-language/#if","text":"The if statement is the simplest form of conditional statement. If the expression to the right of the if keyword is true , the code block will execute: var isHungry = true ; if ( isHungry ) { console . log ( \"You should eat!\" ); } Example Output: You should eat! Usually, a conditional expression uses comparison operators to generate a boolean result: var age = 19 ; if ( age >= 18 ) { console . log ( \"You are legally an adult, congrats!\" ); } Example Output: You are legally an adult, congrats!","title":"if"},{"location":"javascript/javascript-language/#else-if","text":"The else if conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to true will run: var favoriteFood = \"Tacos\" ; if ( favoriteFood == \"Sushi\" ) { console . log ( \"We're going out for Japanese food to night!\" ); } else if ( favoriteFood == \"Pasta\" ) { console . log ( \"How about we eat some Italian food tonight?\" ); } else if ( favoriteFood == \"Tacos\" ) { console . log ( \"Time for some Mexican food!\" ); } else if ( favoriteFood == \"Samosa\" ) { console . log ( \"Let's eat Indian food tonight!\" ); } Example Output: Time for some Mexican food!","title":"else if"},{"location":"javascript/javascript-language/#else","text":"The else conditional statement runs when all other conditional statements in a group are false . You can think of it as the default option: var favoriteFood = \"Hot Dogs with Cream Cheese\" ; if ( favoriteFood == \"Sushi\" ) { console . log ( \"We're going out for Japanese food to night!\" ); } else if ( favoriteFood == \"Pasta\" ) { console . log ( \"How about we eat some Italian food tonight?\" ); } else if ( favoriteFood == \"Tacos\" ) { console . log ( \"Time for some Mexican food!\" ); } else if ( favoriteFood == \"Samosa\" ) { console . log ( \"Let's eat Indian food tonight!\" ); } else { console . log ( \"I don't know what that favorite food is!\" ); } I don't know what that favorite food is!","title":"else"},{"location":"javascript/javascript-language/#comparison-operators","text":"Here are the comparison operators that you can use in conditional expressions to generate a boolean value: Operator Description > Greater-than >= Greater-than or equal-to < Less-than <= Less-than or equal-to == Equal-to != Not equal-to","title":"Comparison Operators"},{"location":"javascript/javascript-language/#complex-conditional-statements","text":"Complex conditional statements involve combining more than one conditional expression with logical operators : var age = 15 ; var heightInFeet = 4.6 ; if ( age >= 13 && heightInFeet > 5 ) { console . log ( \"You may ride the roller coaster.\" ); } else { console . log ( \"You may NOT ride the roller coaster.\" ); } Example Output: You may NOT ride the roller coaster. You can string as many logical operators together as you want to build more complex conditional statements. Note that it's often easier to read and reason about if you surround each major section with parentheses, as in the example below: var isHungry = false ; var isThirsty = true ; var foodAmount = 10 ; var drinkAmount = 0 ; if (( isHungry && foodAmount > 0 ) || ( isThirsty && drinkAmount > 0 )) { enterKitchen (); } else { playVideoGames (); }","title":"Complex Conditional Statements"},{"location":"javascript/javascript-language/#logical-operators","text":"Logical operators allow you to combine multiple conditional expressions in a single conditional statement: Operator Description && (and) true when both conditional expressions are true || (or) true when either conditional expression is true ! (not) Reverses the value of a conditional expression","title":"Logical Operators"},{"location":"javascript/javascript-language/#using-the-operator","text":"The && (and) operator evaluates to true when both conditional expressions are true : var age = 15 ; var heightInFeet = 5.2 ; if ( age >= 13 && heightInFeet > 5 ) { console . log ( \"You may ride the roller coaster.\" ); } else { console . log ( \"You may NOT ride the roller coaster.\" ); } Example Output: You may ride the roller coaster.","title":"Using the &amp;&amp; operator"},{"location":"javascript/javascript-language/#using-the-operator_1","text":"The || (or) operator evaluates to true when either conditional expression is true : var isHungry = true ; var isThirsty = false ; if ( isHungry || isThirsty ) { console . log ( \"You should go to the kitchen.\" ); } else { console . log ( \"Do whatever, you're good!\" ); } Example Output: You should go to the kitchen.","title":"Using the || operator"},{"location":"javascript/javascript-language/#using-the-operator_2","text":"The ! (not) operator reverses a conditional expression: var isTired = true ; if ( ! isTired ) { console . log ( \"Let's go outside and play.\" ); } else { console . log ( \"Let's take a nap.\" ); } Example Output: Let's take a nap.","title":"Using the ! operator"},{"location":"javascript/javascript-language/#nested-conditional-statements","text":"Conditional statements can be nested inside other conditional statements. Use indentation to make the nesting obvious at a glance: var role = \"admin\" ; if ( role == \"admin\" || role == \"developer\" ) { console . log ( \"You can see the secret stuff in this app.\" ); if ( role == \"admin\" ) { console . log ( \"You can also see the SUPER secret stuff in this app.\" ); } } Example Output: You can see the secret stuff in this app. You can also see the SUPER secret stuff in this app. Further Reading MDN - JavaScript Building Blocks: Conditionals Eloquent JavaScript - Conditional Execution The Modern JavaScript Tutorial - Conditional Branching","title":"Nested Conditional Statements"},{"location":"javascript/javascript-language/#data-types","text":"Every value has a data type in JavaScript. The data type determines what kinds of operations you can perform on the value.","title":"Data Types"},{"location":"javascript/javascript-language/#boolean","text":"The boolean data type represents a true or a false value: var isHungry = true ; var isThirsty = false ;","title":"boolean"},{"location":"javascript/javascript-language/#generating-boolean-values-in-a-conditional-statement","text":"You normally won't use a boolean directly, but instead will generate a boolean in a conditional statement: var age = 19 ; // This generates `true` if ( age >= 18 ) { console . log ( \"You are an adult!\" ); } // This generates `false` if ( age < 18 ) { console . log ( \"You are a child.\" ); }","title":"Generating boolean values in a conditional statement"},{"location":"javascript/javascript-language/#truthy-and-falsy-values","text":"Booleans are not the only values that can be True/False. Every value in JavaScript is either truthy or falsy , which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy , and all other strings and numbers are truthy . Here's an example of a falsy value: var username = \"\" ; if ( username ) { console . log ( `Hello, ${ username } !` ); } else { console . log ( \"The username is blank\" ); } Example Output: The username is blank Here's an example of a truthy value: var numBananas = 2 ; if ( numBananas ) { console . log ( \"We have bananas!\" ); } else { console . log ( \"We have no bananas!\" ); } Example Output: We have bananas!","title":"Truthy and falsy values"},{"location":"javascript/javascript-language/#number","text":"The number data type represents any number: var totalCost = 29.99 ; var numBananas = 2 ;","title":"number"},{"location":"javascript/javascript-language/#converting-string-to-number","text":"You can use the parseInt() function to convert a string to an integer number : var age = parseInt ( \"13\" ); console . log ( age ); // 13 This is often combined with the prompt() function when you prompt the user for a numeric data type: var age = parseInt ( prompt ( \"How old are you? \" )); The parseFloat() function works the same way, except the number will be a decimal number: var heightInInches = parseFloat ( \"60.5\" ); console . log ( heightInInches ); // 60.5 Instead of parseInt() or parseFloat() , you can use the + operator to convert a string to a number : var age = + \"13\" ; console . log ( age ); // 13 var heightInInches = + \"60.5\" ; console . log ( heightInInches ); // 60.5","title":"Converting string to number"},{"location":"javascript/javascript-language/#string","text":"The string data type represents a text value: var name = \"Daniel\" ;","title":"string"},{"location":"javascript/javascript-language/#string-concatenation","text":"If you need to combine a variable and a string , you can use the + operator. This technique is called string concatenation : var name = \"Daniel\" ; var greeting = \"Hello, \" + name ; console . log ( greeting ); // Hello, Daniel","title":"String concatenation"},{"location":"javascript/javascript-language/#string-interpolation","text":"Another way to combine a variable and a string is using template-literal strings. This technique is called string interpolation , and it is the preferred way to combine variables and strings . Note that the string must be surrounded by backtick quotes, which are usually near the 1 key on your keyboard: var name = \"Daniel\" ; var age = 35 ; console . log ( `I'm ${ name } and I'm ${ age } years old.` ); Example Output: I'm Daniel and I'm 35 years old.","title":"String interpolation"},{"location":"javascript/javascript-language/#multiline-strings","text":"Template literal strings allow you to write large blocks of text in a single console.log() statement: var menu = ` Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* ` ; console . log ( menu ); Example Output: Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now*","title":"Multiline strings"},{"location":"javascript/javascript-language/#getting-the-number-of-characters-in-a-str","text":"You can use the string.length property to get the number of characters in a string : var name = \"Daniel\" ; name . length ; // 6","title":"Getting the number of characters in a str"},{"location":"javascript/javascript-language/#checking-if-a-string-ends-with-a-set-of-characters","text":"The string.endsWith() method lets you check if a string ends with a given pattern: var emailAddresses = [ \"djs@cwhq.com\" , \"alecg@auburn.edu\" , \"samh@bridges.com\" ]; for ( var emailAddress of emailAddresses ) { if ( emailAddress . endsWith ( \".edu\" )) { console . log ( ` ${ emailAddress } is a school address` ); } else if ( emailAddress . endsWith ( \"cwhq.com\" )) { console . log ( ` ${ emailAddress } is a CWHQ employee address` ); } else { console . log ( `I don't know what ${ emailAddress } is for` ); } } Example Output: djs@cwhq.com is a CWHQ employee address alecg@auburn.edu is a school address I don't know what sam@bridges.com is for","title":"Checking if a string ends with a set of characters"},{"location":"javascript/javascript-language/#sanitizing-user-input","text":"User's do strange things, but using string.toLowerCase() and string.trim() can help your program to validate string data types. string.toLowerCase() makes a string lowercase: // Imagine a user entered \"Pizza\" with an uppercase P var favoriteFood = \"Pizza\" ; if ( favoriteFood . toLowerCase () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! string.trim() removes leading or trailing whitespace from a string : // Imagine a user entered \" pizza\" with a leading space character var favoriteFood = \" pizza\" ; if ( favoriteFood . trim () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! You can chain these methods together to sanitize a string completely: // What a mess! Extra spaces before/after and odd capitalization var favoriteFood = \" PIzZa \" ; if ( favoriteFood . trim (). toLowerCase () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! Further Reading MDN - JavaScript Data Types and Data Structures The Modern JavaScript Tutorial - Data Types Eloquent JavaScript - Values, Types, and Operators MDN - Truthy MDN - Falsy MDN - JavaScript Reference: Template Literals MDN - JavaScript Reference: String.prototype.trim() MDN - JavaScript Reference: String.prototype.toLowerCase()","title":"Sanitizing user input"},{"location":"javascript/javascript-language/#data-structures","text":"Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house.","title":"Data Structures"},{"location":"javascript/javascript-language/#array","text":"The array data structure is used to store data in ordered slots . It is known as mutable sequence type , which means it can be modified after creation. Usually, the items in a array are homogeneous, which means they represent a group of similar items of the same data type: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; var menuPrices = [ 4.5 , 5.75 , 3.0 ]; var ids = [ 184 , 294 , 832 , 98 , 4 ]; You can write an array on multiple lines if you want. The trailing comma is recommended but not required: var foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"ice cream\" , \"asparagus\" ];","title":"array"},{"location":"javascript/javascript-language/#accessing-items-in-an-array","text":"You can access individual items in an array using the [] characters and the index number of the item. The index numbers start at 0: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( names [ 0 ]); // alecg console . log ( names [ 1 ]); // danielj console . log ( names [ 2 ]); // dimas","title":"Accessing items in an array"},{"location":"javascript/javascript-language/#adding-an-item-to-an-array","text":"To add an item to an array after it has been created, you can use the array.push() method. The array.push() method adds the item to the end of the array : var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . push ( \"samh\" ); console . log ( names ); // ['alecg', 'danielj', 'dimas', 'samh'];","title":"Adding an item to an array"},{"location":"javascript/javascript-language/#updating-an-item-in-an-array","text":"To update an array item, replace the value at the index: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names [ 1 ] = \"django\" ; console . log ( names ); // ['alecg', 'django', 'dimas']","title":"Updating an item in an array"},{"location":"javascript/javascript-language/#removing-an-item-from-an-array","text":"To remove an item from an array , you can use the array.splice() method. You tell array.splice the index number to start removing items from and the number of items to remove: array . splice ( indexToRemove , numItemsToRemove ); Here's an example that removes the first item from an array : var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . splice ( 0 , 1 ); console . log ( names ); // ['danielj', 'dimas'] If you want to remove an item from the end of an array , use the array.pop() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . pop (); console . log ( names ); // ['alecg', 'danielj'];","title":"Removing an item from an array"},{"location":"javascript/javascript-language/#looping-through-an-array","text":"To loop through the items in an array , use a for...of loop. Note the convention of using the plural names for the array and the singular name for the loop-iteration variable: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( \"This documentation is brought to you by:\" ); for ( var name of names ) { console . log ( name ); } Example Output: This documentation is brought to you by: alecg danielj dimas You can also loop through an array using a traditional for loop if you need to use the index number of each item for something: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( \"This documentation is brought to you by:\" ); for ( var i = 0 ; i < names . length ; i ++ ) { console . log ( names [ i ]); } Example Output: This documentation is brought to you by: alecg danielj dimas","title":"Looping through an array"},{"location":"javascript/javascript-language/#getting-the-number-of-items-in-an-array","text":"To get the number of items in an array , use the array.length() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; var numNames = names . length ; console . log ( numNames ); // 3","title":"Getting the number of items in an array"},{"location":"javascript/javascript-language/#checking-if-an-item-is-contained-in-an-array","text":"To check if an item is contained in an array , use the array.includes() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( names . includes ( \"alecg\" )); // True console . log ( names . includes ( \"samh\" )); // False Further Reading MDN - The JavaScript Reference - Array Eloquent JavaScript - Data Structures: Objects and Arrays The Modern JavaScript Tutorial - Arrays MDN - The JavaScript Reference - Array.push() MDN - The JavaScript Reference - Array.pop() MDN - The JavaScript Reference - Array.splice() MDN - The JavaScript Reference - Array.includes()","title":"Checking if an item is contained in an array"},{"location":"javascript/javascript-language/#object","text":"The object data structure is used to store data in key/value pairs. var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; You can use strings for the keys as well, but we'll follow the above form in these docs: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , };","title":"object"},{"location":"javascript/javascript-language/#accessing-items-in-an-object","text":"You have to know the key to access an individual item in an object : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var danielJob = staff . danielj ; console . log ( `Daniel is a ${ danielJob } .` ); // Daniel is a Curriculum Developer. var alecJob = staff . alecg ; console . log ( `Alec is a ${ alecJob } .` ); // Alec is a Curriculum Instructor. var dimaJob = staff . dimas .; console . log ( `Dima is a ${ dimaJob } .` ); // Dima is a Designer.","title":"Accessing items in an object"},{"location":"javascript/javascript-language/#adding-an-item-to-an-object","text":"You can add an item to an object by providing the key/value pair (it's the same syntax as updating an item): var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; staff . django = \"Director Of Pug Snorts\" ; console . log ( staff ); // {danielj: 'Curriculum Developer', alecg: 'Curriculum Instructor', dimas: 'Designer', django: 'Director Of Pug Snorts'}","title":"Adding an item to an object"},{"location":"javascript/javascript-language/#updating-an-item-in-an-object","text":"To update an item in an object , you must know the key: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; staff . danielj = \"Burrito Taste-Tester\" ; console . log ( staff ); // {danielj: 'Burrito Taste-Tester', alecg: 'Curriculum Instructor', dimas: 'Designer'}","title":"Updating an item in an object"},{"location":"javascript/javascript-language/#removing-an-item-from-an-object","text":"To remove an item from an object , use the delete operator: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; delete staff . danielj ; console . log ( staff ); // {alecg: 'Curriculum Instructor', dimas: 'Designer'}","title":"Removing an item from an object"},{"location":"javascript/javascript-language/#looping-through-an-object","text":"To loop through an object , you use the for...in loop like this: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; for ( var key in staff ) { // Note the [] used to access the value in the object console . log ( ` ${ key } is a ${ staff [ key ] } .` ); } Example Output: danielj is a Curriculum Developer. alecg is a Curriculum Instructor. dimas is a Designer.","title":"Looping through an object"},{"location":"javascript/javascript-language/#getting-the-keys-from-an-object","text":"If you need to get all of the keys from an object , use the object.keys() method. Note that the keys will be returned as an array : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var names = staff . keys (); console . log ( `Here are all the names in the staff object: ${ names } ` ); Example Output: Here are all the names in the staff object: ['danielj', 'alecg', 'dimas']","title":"Getting the keys from an object"},{"location":"javascript/javascript-language/#getting-the-values-from-an-object","text":"If you need to get all of the values from an object , use the object.values() method. Note, the values will be returned as an array : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var jobs = staff . values (); console . log ( `Here are all the jobs in the staff object: ${ jobs } ` ); Example Output: Here are all the jobs in the staff object: ['Curriculum Developer', 'Curriculum Instructor', 'Designer']","title":"Getting the values from an object"},{"location":"javascript/javascript-language/#getting-the-number-of-items-in-an-object","text":"You can get the keys from an object and then use the array.length method to get the number of items in an object : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var numberOfStaff = staff . keys (). length ; console . log ( `We have ${ numberOfStaff } people on our staff.` ); // We have 3 people on our staff. Further Reading MDN - The JavaScript Reference - Object Eloquent JavaScript - Objects and Arrays The Modern JavaScript Tutorial - Objects MDN - The JavaScript Reference - for...in MDN - The JavaScript Reference - Object.values() MDN - The JavaScript Reference - Object.keys() MDN - The JavaScript Reference - delete operator","title":"Getting the number of items in an object"},{"location":"javascript/javascript-language/#functions","text":"Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y. (Don't Repeat Yourself) principle because they reduce unnecessary repetition.","title":"Functions"},{"location":"javascript/javascript-language/#built-in-functions","text":"JavaScript comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below.","title":"Built-in functions"},{"location":"javascript/javascript-language/#parsefloat","text":"The parseFloat() function converts data to a number data type with a decimal point: var pi = parseFloat ( \"3.14\" ); console . log ( pi ); // 3.14 typeof pi ; // 'number var two = parseFloat ( 2 ); console . log ( two ); // 2.0 typeof two ; // 'number'","title":"parseFloat()"},{"location":"javascript/javascript-language/#prompt","text":"The prompt() function allows you to prompt a user. The user's response is returned as a string , which you can store in a variable: var name = prompt ( \"What is your name? \" ); console . log ( `Nice to meet you, ${ name } !` ); Example Output: What is your name? Daniel Nice to meet you, Daniel!","title":"prompt()"},{"location":"javascript/javascript-language/#alert","text":"The alert() function allows you to alert a user with a message box. function sayHi () { alert ( \"Welcome to my page!\" ); } sayHi ();","title":"alert()"},{"location":"javascript/javascript-language/#confirm","text":"The confirm() function allows you create a popup message for the user to confirm or cancel. This function returns true if the user has click ok. var wizardName = prompt ( \"Enter name\" ); var nameConfirm = confirm ( `Confirm ${ wizardName } ?` ); if ( nameConfirm ) { document . getElementById ( \"name\" ). innerHTML = `Welcome ${ wizardName } !` ; } else { document . getElementById ( \"name\" ). innerHTML = `Cancelled` ; }","title":"confirm()"},{"location":"javascript/javascript-language/#parseint","text":"The parseInt() function converts data to a number data type without a decimal point: var intPI = parseInt ( 3.14 ); console . log ( intPI ); // 3 typeof intPI ; // 'number' var meaningOfLife = parseInt ( \"42\" ); console . log ( meaningOfLife ); // 42 typeof meaningOfLife ; // 'number'","title":"parseInt()"},{"location":"javascript/javascript-language/#consolelog","text":"The console.log() function displays text in the developer console: console . log ( \"Hello, world!\" ); // Hello, world!","title":"console.log()"},{"location":"javascript/javascript-language/#using-special-characters-with-consolelog","text":"You can use special characters such as \\n and \\t to format the text a bit. The \\n adds a newline (like hitting enter on your keyboard) and the \\t adds a tab: console . log ( \"Line 1\\nLine 2\\nLine 3\\n\" ); console . log ( \"\\tThis is tabbed over\\n\\tThis too.\" ); Example Output: Line 1 Line 2 Line 3 This is tabbed over This too. Further Reading MDN - Web APIs: console.log() MDN - The JavaScript Reference: parseInt() MDN - The JavaScript Reference: parseFloat() MDN - The JavaScript Reference: window.prompt()","title":"Using special characters with console.log()"},{"location":"javascript/javascript-language/#user-defined-functions","text":"You define a function using the function keyword. Functions definitions can go anywhere in your file, but it helps to keep them all organized in a single area for readability: function sayHello () { console . log ( \"Hello!\" ); }","title":"User-defined functions"},{"location":"javascript/javascript-language/#calling-a-function","text":"Defining a function does not run the statements in the body of the function. To run a function, you call it like this: function sayHello () { console . log ( \"Hello!\" ); } sayHello (); // Hello!","title":"Calling a function"},{"location":"javascript/javascript-language/#adding-parameters-to-a-function","text":"When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); }","title":"Adding parameters to a function"},{"location":"javascript/javascript-language/#passing-arguments-to-a-function","text":"If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); } sayHello ( \"Daniel\" ); // Hello, Daniel!","title":"Passing arguments to a function"},{"location":"javascript/javascript-language/#returning-a-value-from-a-function","text":"You can return a value from a function by using the return keyword: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; }","title":"Returning a value from a function"},{"location":"javascript/javascript-language/#capturing-a-functions-return-value","text":"If a function returns a value, you can capture it in a variable: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } var total = add ( 2 , 3 ); console . log ( total ); // 5 You can also use the value immediately in another function, like console.log() or as part of a template-literal string: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } console . log ( add ( 2 , 3 )); // 5 console . log ( `2 + 3 = ${ add ( 2 , 3 ) } ` ); // 2 + 3 = 5","title":"Capturing a function's return value"},{"location":"javascript/javascript-language/#indentation-in-functions","text":"Indentation is not required in JavaScript, but you should do it for readability. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you should also indent the body of that statement: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); if ( name == \"Daniel\" ) { console . log ( \"That's a cool name!\" ); } else { console . log ( \"Nice to meet you!\" ); } } sayHello ( \"Daniel\" ); sayHello ( \"Alec\" ); Example Output: Hello, Daniel! That's a cool name! Hello, Alec! Nice to meet you!","title":"Indentation in functions"},{"location":"javascript/javascript-language/#using-an-early-return-statement-to-exit-a-function","text":"A return statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body: function greetCodewizard ( name ) { var staff = [ \"danielj\" , \"alecg\" , \"dimas\" ]; if ( ! staff . includes ( name )) { console . log ( \"I don't know you!\" ); return ; } console . log ( `Hello, ${ name } !` ); } greetCodewizard ( \"danielj\" ); // Hello, danielj! greetCodewizard ( \"django\" ); // I don't know you! Further Reading MDN - JavaScript Building Blocks: Functions EloquentJavaScript - Functions The Modern JavaScript Tutorial - Functions","title":"Using an early return statement to exit a function"},{"location":"javascript/javascript-language/#loops","text":"If you need to repeat something in your programs, you'll need to use one of JavaScript's looping mechanisms.","title":"Loops"},{"location":"javascript/javascript-language/#for","text":"JavaScript's for loop is one of the more complicated pieces of syntax in the language. The header of the for loop controls how many times the loop runs, and it consists of three parts: // header for ( counter ; loopContinuationCondition ; incrementOrDecrement ) { // body } The counter is a variable that will hold a number representing the current loop iteration (usually). The loopContinuationCondition is a boolean condition that determines whether the loop should continue. The incrementOrDecrement is a statement that modifies the counter after each loop completes. To see all three elements in action, consider this for loop, which loops 3 times and prints \"Hello\" to the console three times: for ( var counter = 0 ; counter < 3 ; counter ++ ) { console . log ( \"Hello\" ); } Example Output: Hello Hello Hello Generally, the counter is called i . This is a shorthand that many programmers use, and you'll see it in many courses at CWHQ. The name of the variable is completely up to the programmer: for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( \"Hello\" ); } Example Output: Hello Hello Hello","title":"for"},{"location":"javascript/javascript-language/#counter-controlled-repetition-with-the-for-loop","text":"A for loop is used to loop a certain number of times (called counter-controlled repetition). You generally perform some action in the body of a for loop: for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( ` ${ i } taco` ); } Example Output: 0 taco 1 taco 2 taco You can use a for loop to loop over an array , but the for...of loop is easier: var fruits = [ \"apple\" , \"banana\" , \"cherry\" ]; for ( var i = 0 ; i < fruits . length ; i ++ ) { console . log ( `Index number: ${ i } Fruit: ${ fruits [ i ] } ` ); } Example Output: Index number: 0 Fruit: apple Index number: 1 Fruit: banana Index number: 2 Fruit: cherry","title":"Counter-controlled repetition with the for loop"},{"location":"javascript/javascript-language/#looping-through-arrays-with-the-forof-loop","text":"The for...of loop is the easiest way to loop through the items in an array . Note the convention of a plural array name (fruits) and a singular loop-iteration variable (fruit): var fruits = [ \"apple\" , \"banana\" , \"cherry\" ]; for ( var fruit of fruits ) { console . log ( fruit ); } Example Output: apple banana cherry","title":"Looping through arrays with the for...of loop"},{"location":"javascript/javascript-language/#searching-for-a-value-in-a-forof-loop","text":"You can use a conditional statement inside a for...of loop to search for a particular item in an array and then do something: var fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ]; for ( var fruit of fruits ) { if ( fruit == \"orange\" ) { console . log ( ` ${ fruit } is the best fruit` ); } } Example Output: orange is the best fruit","title":"Searching for a value in a for...of loop"},{"location":"javascript/javascript-language/#finding-a-value-in-a-forof-loop-to-use-after-the-loop-finishes","text":"You can store an item from the for...of loop for later use by creating a variable before the for...of loop with some default value. var fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ]; var bestFruit ; for ( var fruit of fruits ) { if ( fruit == \"orange\" ) { bestFruit = fruit ; } } // The best fruit is orange. console . log ( `The best fruit is ${ bestFruit } .` );","title":"Finding a value in a for...of loop to use after the loop finishes"},{"location":"javascript/javascript-language/#creating-a-new-array-in-a-forof-loop","text":"Often, you'll want to loop through an array and build a new array from the contents of the original array . This technique is called mapping, and it's a common thing to do with arrays and for...of loops: var prices = [ 10 , 12 , 5 , 8 ]; var discounted_prices = []; for ( var price of prices ) { discounted_price = price - price * 0.1 ; discounted_prices . push ( discounted_price ); } // Here are your discounted prices: [9, 10.8, 4.5, 7.2] console . log ( `Here are your discounted prices: ${ discounted_prices } ` );","title":"Creating a new array in a for...of loop"},{"location":"javascript/javascript-language/#looping-through-objects-with-the-forin-loop","text":"The for...in loop is the easiest way to loop through the items in an object . The prop variable name is a convention, it represents each key (property) of the object : var users = { danielj : \"Admin\" , django : \"Support Staff\" , samh : \"Platform Developer\" , }; for ( var prop in users ) { console . log ( `Username: ${ prop } Role: ${ users [ prop ] } ` ); } Example Output: Username: danielj Role: Admin Username: django Role: Support Staff Username: samh Role: Platform Developer Further Reading MDN - JavaScript Reference - for MDN - JavaScript Reference - for...of MDN - JavaScript Reference - for...in Eloquent JavaScript - for loops The Modern JavaScript Tutorial - The \"for\" loop","title":"Looping through objects with the for...in loop"},{"location":"javascript/javascript-language/#while","text":"A while loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop). For example, you can use a while loop to ask a user something until they answer correctly: var keepLooping = true ; // This variable controls whether we loop or not. while ( keepLooping ) { var userGuess = prompt ( \"What is the meaning of life? \" ); if ( userGuess == \"42\" ) { console . log ( \"That's correct!\" ); keepLooping = false ; // Stops the loop. } else { console . log ( \"That's incorrect! Please try again.\" ); } } Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct!","title":"while"},{"location":"javascript/javascript-language/#using-break-to-exit-a-loop","text":"You can also use a break statement instead of using a variable to control how many times an indefinite while loop runs: while ( true ) { userGuess = prompt ( \"What is the meaning of life? \" ); if ( userGuess == \"42\" ) { console . log ( \"That's correct!\" ); break ; // Stops the loop. } else { console . log ( \"That's incorrect! Please try again.\" ); } } Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct!","title":"Using break to exit a loop"},{"location":"javascript/javascript-language/#counter-controlled-repetition","text":"You can use a while loop to perform counter-controlled repetition as well, but the for loop is generally preferred for this: var counter = 0 ; while ( counter < 5 ) { console . log ( counter ); counter ++ ; // If you forget this, you'll have an infinite loop! } Example Output: 0 1 2 3 4 Further Reading MDN - JavaScript Reference: while Eloquent JavaScript - while and do loops The Modern JavaScript Tutorial - The \"while\" loop","title":"Counter-controlled repetition"},{"location":"javascript/javascript-language/#math-operations","text":"JavaScript can perform most mathematical operations with ease. There are standard operators for all of the arithmetic operations and the Math object has access to many more operations for things like Trigonometry.","title":"Math Operations"},{"location":"javascript/javascript-language/#arithmetic-operators","text":"The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator: var total = 8 + 2 ; var difference = 8 - 2 ; var product = 8 * 2 ; var quotient = 8 / 2 ; console . log ( `8 + 2 = ${ total } ` ); // 8 + 2 = 10 console . log ( `8 - 2 = ${ difference } ` ); // 8 - 2 = 6 console . log ( `8 * 2 = ${ product } ` ); // 8 * 2 = 16 console . log ( `8 / 2 = ${ quotient } ` ); // 8 / 2 = 4","title":"Arithmetic Operators"},{"location":"javascript/javascript-language/#other-operators","text":"There are a few other common operators that JavaScript provides for common math operations.","title":"Other Operators"},{"location":"javascript/javascript-language/#modulo","text":"The modulo operator ( % ) returns the remainder after division: 10 % 3 ; // 1","title":"Modulo"},{"location":"javascript/javascript-language/#power","text":"The power operator ( ** ) multiplies a number by itself a given number of times: 3 ** 2 ; // 9 Further Reading MDN - The JavaScript Guide: Arithmetic Operators Eloquent JavaScript - Arithmetic The Modern JavaScript Tutorial - Basic operators, maths","title":"Power"},{"location":"javascript/javascript-language/#the-math-object","text":"JavaScript's Math object can be used to gain access to certain constants (such as PI), to perform trig calculations, or to get random numbers, among other things.","title":"The Math object"},{"location":"javascript/javascript-language/#getting-random-numbers-with-mathrandom","text":"The Math.random() method returns a random decimal number between 0 and 1: var randomNumber = Math . random (); console . log ( randomNumber ); // 0.1524438866958424 If you'd like to get a random whole number between a min and max , this helper function is useful: function random ( min , max ) { var num = Math . floor ( Math . random () * ( max - min + 1 )) + min ; return num ; } var randomNumber = random ( 1 , 10 ); console . log ( randomNumber ); // 9","title":"Getting random numbers with Math.random()"},{"location":"javascript/javascript-language/#rounding-numbers","text":"To round a number down, use Math.floor() : var roundedNumber = Math . floor ( 4.6 ); console . log ( roundedNumber ); // 4 To round a number up, use Math.ceil() : var roundedNumber = Math . ceil ( 4.2 ); console . log ( roundedNumber ); // 4 To round a number to the nearest integer, use Math.round() : var roundedNumber = Math . round ( 4.4 ); console . log ( roundedNumber ); // 4 roundedNumber = Math . round ( 4.5 ); console . log ( roundedNumber ); // 5 Further Reading MDN - The JavaScript Reference: Math","title":"Rounding numbers"},{"location":"javascript/javascript-language/#using-this","text":"In JavaScript, you can use the this keyword to get a reference to an element when an event is triggered (like a click event). <!DOCTYPE html> < html > < head > < title > Using \"this\" in JavaScript </ title > < style > button { display : block ; margin : 48 px auto ; font-size : 24 px ; } </ style > </ head > < body > < button id = \"my-button\" onclick = \"changeButtonText(this);\" > Original Button Text </ button > < script > function changeButtonText ( element ) { element . textContent = \"Updated Button Text\" ; } </ script > </ body > </ html >","title":"Using this"},{"location":"javascript/javascript-language/#variables","text":"Variables assign a name to a value. The naming convention in JavaScript is to use camelCase for variable names.","title":"Variables"},{"location":"javascript/javascript-language/#creating-a-variable","text":"You create a variable using the var keyword: var myVariable ; Usually, you create a variable and assign a value to the variable the assignment operator ( = ) at once: var myName = \"Daniel\" ; var myAge = 35 ;","title":"Creating a variable"},{"location":"javascript/javascript-language/#updating-a-numeric-variable","text":"You can update the value stored in a numeric variable like this: var score = 0 ; score = score + 1 ; // 0 + 1 console . log ( score ); // 1 score = score + 1 ; // 1 + 1 console . log ( score ); // 2 The same works for decreasing the value of a numeric variable: var score = 3 ; score = score - 1 ; // 3 - 1 console . log ( score ); // 2 score = score - 1 ; // 2 - 1 console . log ( score ); // 1 There is a shorthand notation for increasing and decreasing the value of a numeric variable: var score = 0 ; score += 1 ; // 0 + 1 console . log ( score ); // 1 score += 1 ; // 1 + 1 console . log ( score ); // 2 score -= 1 ; // 2 - 1 console . log ( score ); // 1 score -= 1 ; // 1 - 1 console . log ( score ); // 0 For an even more compact notation, you can use ++ or -- to increase/decrease the value of a numeric variable: var score = 0 ; score ++ ; // 0 + 1 console . log ( score ); // 1 score ++ ; // 1 + 1 console . log ( score ); // 2 score -- ; // 2 - 1 console . log ( score ); // 1 score -- ; // 1 - 1 console . log ( score ); // 0","title":"Updating a numeric variable"},{"location":"javascript/javascript-language/#global-vs-local-variables","text":"Any variable created outside of function definition is considered a global variable: // This is a global variable. var score = 0 ; function updateScore () { score = score + 1 ; // 1 } console . log ( score ); // 0 updateScore (); // Changes the global `score` variable console . log ( score ); // 1 Updates to global variables affect the variable throughout the program. If you want a variable to exist only inside of a function, you can make it local to the function by creating the variable (with the var keyword) inside the function: // This is a global variable. var score = 0 ; function updateScore () { // This is a local variable, it only exists within `updateScore()` var score = 1 ; } console . log ( score ); // 0 updateScore (); // Doesn't change the global `score` variable console . log ( score ); // 0 Further Reading MDN - JavaScript First Steps - Variables Eloquent JavaScript - Bindings The Modern JavaScript Tutorial - Variables","title":"Global vs. local variables"},{"location":"python/python-language/","text":"Python Language \u00b6 Python is a beginner-friendly language that we use in these courses in the core CodeWizardsHQ curriculum: Elementary Middle School High School Intro to Text-Based Programming Introduction to Programming with Python Intro to Python Capstone 1 Beyond Basics with Python Capstone 1 Progamming Fundamentals with Python Capstone 1 APIs and Databases Logic with Python Intro to Databases Professional Web App Development Modular Programming with Python Mastering APIs Capstone 2 Capstone 2 Mastering Databases Mastering MVC Frameworks Python Game Development Capstone 3 Object Relational Mapping DevOps and SoftwareEngineering Capstone 3 In addition to those courses, Python is used in all courses of the Python Language Track . In this section of our documentation, you'll find references to most of the core Python language features and built-in functions that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent Python resources: Python.org Documentation RealPython.com Think Python Comments \u00b6 Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program. Single Line Comments \u00b6 Single line comments begin with the # character. You can put them above or to the right of the line of code they reference: # Validate the user is logged in and redirect them to the appropriate page. if is_logged_in ( user ): redirect_to_homepage () else : redirect_to_login () MIN_HEIGHT = 60 # This is measured in inches, not feet! Deactivating Code \u00b6 You can deactivate sections of code with comments: if age < 18 : # Turning this off for now # prompt_user() redirect_to_kid_zone () else : login_user () Multiline Comments \u00b6 You can use multiline strings if you want to make a multiline comment: \"\"\" This calculates the hypotenuse of a right triangle when given the sides of the right triangle. It's the Pythagorean Theorem. The ** is how you write exponents in Python, and fractional exponents are like roots, so 0.5 is the square root. \"\"\" hypotenuse = (( side_a ** 2 ) + ( side_b ** 2 )) ** 0.5 Further Reading The Python Tutorial Real Python - Writing Comments in Python Think Python - Comments Conditional Statements \u00b6 Conditional statements allow you to run a block of code when a boolean condition is true. if \u00b6 The if statement is the simplest form of conditional statement. If the expression to the right of the if keyword is True , the indented code block will execute: is_hungry = True if is_hungry : print ( \"You should eat!\" ) Example Output: You should eat! Usually, a conditional expression uses comparison operators to generate a bool result: age = 19 if age >= 18 : print ( \"You are legally an adult, congrats!\" ) Example Output: You are legally an adult, congrats! elif \u00b6 The elif conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to True will run: favorite_food = \"Tacos\" if favorite_food == \"Sushi\" : print ( \"We're going out for Japanese food to night!\" ) elif favorite_food == \"Pasta\" : print ( \"How about we eat some Italian food tonight?\" ) elif favorite_food == \"Tacos\" : print ( \"Time for some Mexican food!\" ) elif favorite_food == \"Samosa\" : print ( \"Let's eat Indian food tonight!\" ) Example Output: Time for some Mexican food! else \u00b6 The else conditional statement runs when all other conditional statements in a group are False . You can think of it as the default option: favorite_food = \"Hot Dogs with Cream Cheese\" if favorite_food == \"Sushi\" : print ( \"We're going out for Japanese food to night!\" ) elif favorite_food == \"Pasta\" : print ( \"How about we eat some Italian food tonight?\" ) elif favorite_food == \"Tacos\" : print ( \"Time for some Mexican food!\" ) elif favorite_food == \"Samosa\" : print ( \"Let's eat Indian food tonight!\" ) else : print ( \"I don't know what that favorite_food is!\" ) I don't know what that favorite_food is! Comparison Operators \u00b6 Here are the comparison operators that you can use in conditional expressions to generate a bool value: Operator Description > Greater-than >= Greater-than or equal-to < Less-than <= Less-than or equal-to == Equal-to != Not equal-to Complex Conditional Statements \u00b6 Complex conditional statements involve combining more than one conditional expression with logical operators : age = 15 height_in_feet = 4.6 if age >= 13 and height_in_feet > 5 : print ( \"You may ride the roller coaster.\" ) else : print ( \"You may NOT ride the roller coaster.\" ) Example Output: You may NOT ride the roller coaster. You can string as many logical operators together as you want to build more complex conditional statements: is_hungry = False is_thirsty = True food_amount = 10 drink_amount = 0 if is_hungry and food_amount > 0 or is_thirsty and drink_amount > 0 : enter_kitchen () else : play_video_games () Formatting complex conditional statements \u00b6 With a large complex conditional statement, it's often easier to read and reason about if you enclose the conditional expression in parentheses and split the statements across multiple lines: is_hungry = False is_thirsty = True food_amount = 10 drink_amount = 0 if ( is_hungry and food_amount > 0 or is_thirsty and drink_amount > 0 ): enter_kitchen () else : play_video_games () Logical Operators \u00b6 Logical operators allow you to combine multiple conditional expressions in a single conditional statement: Operator Description and True when both conditional expressions are True or True when either conditional expression is True not Reverses the value of a conditional expression Using the and operator \u00b6 The and operator evaluates to True when both conditional expressions are True : age = 15 height_in_feet = 5.2 if age >= 13 and height_in_feet > 5 : print ( \"You may ride the roller coaster.\" ) else : print ( \"You may NOT ride the roller coaster.\" ) Example Output: You may ride the roller coaster. Using the or operator \u00b6 The or operator evaluates to True when either conditional expression is True : is_hungry = True is_thirsty = False if is_hungry or is_thirsty : print ( \"You should go to the kitchen.\" ) else : print ( \"Do whatever, you're good!\" ) Example Output: You should go to the kitchen. Using the not operator \u00b6 The not operator reverses a conditional expression: is_tired = True if not is_tired : print ( \"Let's go outside and play.\" ) else : print ( \"Let's take a nap.\" ) Example Output: Let's take a nap. Nested Conditional Statements \u00b6 Conditional statements can be nested inside other conditional statements. You just have to follow the same indentation rules for each nested conditional block: role = \"admin\" if role == \"admin\" or role == \"developer\" : print ( \"You can see the secret stuff in this app.\" ) if role == \"admin\" : print ( \"You can also see the SUPER secret stuff in this app.\" ) Example Output: You can see the secret stuff in this app. You can also see the SUPER secret stuff in this app. Further Reading Real Python - Conditional Statements in Python Real Python - Using the not Boolean Operator in Python Real Python - Using the and Boolean Operator in Python Real Python - How to use the Python or Operator The Python Library Reference - Boolean Operations The Python Library Reference - Boolean Values The Python Library Reference - Comparisons The Python Library Reference - Truth Value Testing The Python Tutorial - if Statements Think Python - Conditionals and Recursion Data Types \u00b6 Every value has a data type in Python. The data type determines what kinds of operations you can perform on the value. For example, you can't perform arithmetic between values that aren't numeric data types. bool \u00b6 The bool data type represents a True or a False value: is_hungry = True is_thirsty = False Generating bool in a conditional statement \u00b6 You normally won't use a bool directly, but instead will generate a bool in a conditional statement: age = 19 # This generates `True` if age >= 18 : print ( \"You are an adult!\" ) # This generates `False` if age < 18 : print ( \"You are a child.\" ) Truthy and falsy values \u00b6 Booleans are not the only values that can be True/False. Every value in Python is either truthy or falsy , which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy , and all other strings and numbers are truthy . Here's an example of a falsy value: username = \"\" if username : print ( f \"Hello, { username } !\" ) else : print ( \"The username is blank\" ) Example Output: The username is blank Here's an example of a truthy value: num_bananas = 2 if num_bananas : print ( \"We have bananas!\" ) else : print ( \"We have no bananas!\" ) Example Output: We have bananas! float \u00b6 The float data type represents a decimal number: total_cost = 29.99 int \u00b6 The int data type represents a whole number: num_tacos_eaten = 12 Converting str to int \u00b6 You can use the int() function to convert a str to an int : age = int ( \"13\" ) This is often combined with the input() function when you prompt the user for a numeric data type: age = int ( input ( \"How old are you? \" )) str \u00b6 The str data type represents a text value: name = \"Daniel\" String concatenation \u00b6 If you need to combine a variable and a str , you can use the + operator. This technique is called string concatenation : name = \"Daniel\" greeting = \"Hello, \" + name print ( greeting ) # Hello, Daniel String interpolation \u00b6 Another way to combine a variable and a str is using f-strings . This technique is called string interpolation , and it is the preferred way to combine variables and str : name = \"Daniel\" age = 35 print ( f \"I'm { name } and I'm { age } years old.\" ) Example Output: I'm Daniel and I'm 35 years old. You can also use multiline f-strings if you have a large block of text that you want to insert variables into: name = \"Brandon\" planet_name = \"Krypton\" number = \"250\" animal = \"Zebra\" story = f \"\"\" Hello, my name is astronaut { name } , and I am on my way to planet { planet_name } . I will be gone for { number } days. Please take care of my { animal } for me. \"\"\" print ( story ) Example Output: Hello, my name is astronaut Brandon, and I am on my way to planet Krypton. I will be gone for 250 days. Please take care of my Zebra for me. Multiline strings \u00b6 Multiline strings allow you to write large blocks of text in a single print() statement: menu = \"\"\" Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* \"\"\" print ( menu ) Example Output: Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* Removing the intial newline of a multiline string \u00b6 You can remove the initial newline from a multiline string using the \\ character: options = \"\"\" \\ (1) View All Contacts (2) View Contact (3) Add Contact (4) Update Contact (5) Remove Contact (6) Exit \"\"\" print ( options ) Example Output: (1) View All Contacts (2) View Contact (3) Add Contact (4) Update Contact (5) Remove Contact (6) Exit Raw strings \u00b6 Raw strings ( str prefaced with an r ) tell Python to not interpret special str characters. You use them in CWHQ courses to print ASCII art and ensure it formats correctly. Generally, r strings will also be multiline strings, but this isn't required: mr_nibbles = r \"\"\" |\\---/| | o_o | \\_^_/ \"\"\" print ( mr_nibbles ) Example Output: |\\---/| | o_o | \\_^_/ Getting the number of characters in a str \u00b6 You can use the len() function to get the number of characters in a str : name = \"Daniel\" len ( name ) # 6 Checking if a str ends with a set of characters \u00b6 The str.endswith() method lets you check if a str ends with a given pattern: email_addresses = [ \"djs@cwhq.com\" , \"alecg@auburn.edu\" , \"samh@bridges.com\" ] for email_address in email_addresses : if email_address . endswith ( \".edu\" ): print ( f \" { email_address } is a school address\" ) elif email_address . endswith ( \"cwhq.com\" ): print ( f \" { email_address } is a CWHQ employee address\" ) else : print ( f \"I don't know what { email_address } is for\" ) Example Output: djs@cwhq.com is a CWHQ employee address alecg@auburn.edu is a school address I don't know what sam@bridges.com is for Sanitizing user input \u00b6 User's do strange things, but using str.lower() and str.strip() can help your program to validate str data types. str.lower() makes a str lowercase: # Imagine a user entered \"Pizza\" with an uppercase P favorite_food = \"Pizza\" if favorite_food . lower () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! str.strip() removes leading or trailing whitespace from a str : # Imagine a user entered \" pizza\" with a leading space character favorite_food = \" pizza\" if favorite_food . strip () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! You can chain these methods together to sanitize a str completely: # What a mess! Extra spaces before/after and odd capitalization favorite_food = \" PIzZa \" if favorite_food . strip () . lower () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! String Multiplication \u00b6 You can multiply a str by a number if you want to make copies of a str : num_hamburgers = 3 \u201c\ud83c\udf54\u201d * num_hamburgers Example Output: \ud83c\udf54\ud83c\udf54\ud83c\udf54 Further Reading The Python Library Reference - Text Sequence Type The Python Library Reference - Numeric Types The Python Tutorial - Strings Think Python - Values and Types Think Python - Strings Real Python - Python 3's f-Strings Real Python - Strings and Character Data in Python Data Structures \u00b6 Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house. list \u00b6 The list data structure is used to store data in ordered slots . It is known as mutable sequence type , which means it can be modified after creation. Usually, the items in a list are homogeneous, which means they represent a group of similar items of the same data type: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] menu_prices = [ 4.50 , 5.75 , 3.00 ] ids = [ 184 , 294 , 832 , 98 , 4 ] You can write a list on multiple lines if you want. The trailing comma is recommended but not required: foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"ice cream\" , \"asparagus\" , ] Accessing items in a list \u00b6 You can access individual items in a list using the [] characters and the index number of the item. The index numbers start at 0: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( names [ 0 ]) # alecg print ( names [ 1 ]) # danielj print ( names [ 2 ]) # dimas Adding an item to a list \u00b6 To add an item to a list after it has been created, you can use the list.append() method. The list.append() method adds the item to the end of the list: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . append ( \"samh\" ) print ( names ) # ['alecg', 'danielj', 'dimas', 'samh'] Updating an item in a list \u00b6 To update a list item, replace the value at the index: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names [ 1 ] = \"django\" print ( names ) # ['alecg', 'django', 'dimas'] Removing an item from a list \u00b6 To remove an item from a list , you can use the list.remove() method: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . remove ( \"alecg\" ) print ( names ) # ['danielj', 'dimas'] If you want to remove an item from a list by its index number, use the list.pop() method: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . pop ( 0 ) print ( names ) # ['danielj', 'dimas'] Looping through a list \u00b6 To loop through the items in a list , use a for loop. Note the convention of using the plural names for the list and the singular name for the loop-iteration variable: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( \"This documentation is brought to you by:\" ) for name in names : print ( name ) Example Output: This documentation is brought to you by: alecg danielj dimas Getting the number of items in a list \u00b6 To get the number of items in a list , use the len() function: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] num_names = len ( names ) print ( num_names ) # 3 Checking if an item is contained in a list \u00b6 To check if an item is contained in a list , use the in operator: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] \"alecg\" in names # True \"samh\" in names # False The in operator is generally used as part of a conditional statement: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] if \"alecg\" in names : print ( \"alecg is in the 'names' list\" ) else : print ( \"alecg is NOT in the 'names' list\" ) if \"samh\" in names : print ( \"samh is in the 'names' list\" ) else : print ( \"samh is NOT in the 'names' list\" ) Example Output: alecg is in the 'names' list samh is NOT in the 'names' list Further Reading The Python Library Reference - Common Sequence Operations The Python Library Reference - Mutable Sequence Types The Python Library Reference - len() The Python Tutorial - Lists Think Python - Lists dict \u00b6 The dict data structure is used to store data in key/value pairs: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } You can use the dict() function to build a dict as well, note that the keys are keyword arguments: staff = dict ( danielj = \"Curriculum Developer\" , alecg = \"Curriculum Instructor\" , dimas = \"Designer\" , ) Accessing items in a dict \u00b6 You have to know the key to access an individual item in a dict : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } daniel_job = staff [ \"danielj\" ] print ( f \"Daniel is a { daniel_job } .\" ) # Daniel is a Curriculum Developer. alec_job = staff [ \"alecg\" ] print ( f \"Alec is a { alec_job } .\" ) # Alec is a Curriculum Instructor. dima_job = staff [ \"dimas\" ] print ( f \"Dima is a { dima_job } .\" ) # Dima is a Designer. If you need to pull a value from a dict inside an f-string , you must use different quote characters for the key (if it's a str ). students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } print ( f \"Vicki is in { students [ 'Vicki' ] } \" ) # Vicki is in 3rd grade print ( f \"Sam is in { students [ 'Sam' ] } \" ) # Sam is in 4th grade print ( f \"Tammy is in { students [ 'Tammy' ] } \" ) # Tammy is in 4th grade Adding an item to a dict \u00b6 You can add an item to a dict by providing the key/value pair (it's the same syntax as updating an item): staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff [ \"django\" ] = \"Director Of Pug Snorts\" print ( staff ) # {'danielj': 'Curriculum Developer', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer', 'django': 'Director Of Pug Snorts'} Updating an item in a dict \u00b6 To update an item in a dict , you must know the key: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff [ \"danielj\" ] = \"Burrito Taste-Tester\" print ( staff ) # {'danielj': 'Burrito Taste-Tester', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer'} Removing an item from a dict \u00b6 To remove an item from a dict , use the dict.pop() method: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff . pop ( \"danielj\" ) print ( staff ) # {'alecg': 'Curriculum Instructor', 'dimas': 'Designer'} Looping through a dict \u00b6 To loop through a dict , you generally use the dict.items() method like this: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } for name , job in staff . items (): print ( f \" { name } is a { job } .\" ) Example Output: danielj is a Curriculum Developer. alecg is a Curriculum Instructor. dimas is a Designer. If you just want to loop over the keys of a dict , you can use a for loop just as you would with a list : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } print ( \"CWHQ staff:\" ) for name in staff : print ( name ) Example Output: danielj alecg dimas Getting the keys from a dict \u00b6 If you need to get all of the keys from a dict , use the dict.keys() method. Note, you'll usually want to cast the result to a list , which is why the list() function is used here: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } names = list ( staff . keys ()) print ( f \"Here are all the names in the staff dict: { names } \" ) Example Output: Here are all the names in the staff dict: ['danielj', 'alecg', 'dimas'] Getting the values from a dict \u00b6 If you need to get all of the values from a dict , use the dict.values() method. Note, you'll usually want to cast the result to a list , which is why the list() function is used here: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } jobs = list ( staff . values ()) print ( f \"Here are all the jobs in the staff dict: { jobs } \" ) Example Output: Here are all the jobs in the staff dict: ['Curriculum Developer', 'Curriculum Instructor', 'Designer'] Getting the number of items in a dict \u00b6 You can use the len() function to get the number of items in a dict : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } number_of_staff = len ( staff ) print ( f \"We have { number_of_staff } people on our staff.\" ) # We have 3 people on our staff. Checking if an item is contained in a dict \u00b6 To check if an item is contained in a dict , use the in operator: students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if \"Vicki\" in students : print ( \"Vicki is a student here\" ) Example Output: Vicki is a student here You can use the not operator before the in operator to test if a key is not in a dict : students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if \"Daniel\" not in students : print ( \"Daniel is NOT a student here\" ) Example Output: Daniel is NOT a student here Using dict.get() to test if an item is in a dict \u00b6 The dict.get() method can be used as an alternative to in and not in . It returns the value of the given key or the special None value, which is used to indicate the absence of any valid value. The is operator is similar to == , but it checks if the two values are the same exact thing in memory: students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if students . get ( \"Vicki\" ) is not None : print ( \"Vicki is a student here\" ) if students . get ( \"Daniel\" ) is None : print ( \"Daniel is NOT a student here\" ) Example Output: Vicki is a student here Daniel is NOT a student here Further Reading Real Python - Dictionaries in Python The Python Library Reference - Mapping Types: dict The Python Tutorial - Dictionaries Think Python - Dictionaries Functions \u00b6 Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y. (Don't Repeat Yourself) principle because they reduce unnecessary repetition. Built-in functions \u00b6 Python comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below. float() \u00b6 The float() function converts data to a float : pi = float ( \"3.14\" ) print ( pi ) # 3.14 type ( pi ) # <class 'float'> two = float ( 2 ) print ( two ) # 2.0 type ( two ) # <class 'float'> input() \u00b6 The input() function allows you to prompt a user. The user's response is returned as a str , which you can store in a variable: name = input ( \"What is your name? \" ) print ( f \"Nice to meet you, { name } !\" ) Example Output: What is your name? Daniel Nice to meet you, Daniel! int() \u00b6 The int() function converts data to an int : int_pi = int ( 3.14 ) print ( int_pi ) # 3 type ( int_pi ) # <class 'int'> meaning_of_life = int ( \"42\" ) print ( meaning_of_life ) # 42 type ( meaning_of_life ) # <class 'int'> len() \u00b6 The len() function returns the length of a sequence such as a list or str : number_of_characters = len ( \"How many characters are in this str?\" ) print ( number_of_characters ) # 36 favorite_foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"burritos\" ] number_of_foods = len ( favorite_foods ) print ( number_of_foods ) # 4 list() \u00b6 The list() function creates a list from a sequence such as the result of dict.keys() , dict.values() , or a str : character_list = list ( \"Hello!\" ) print ( character_list ) # ['H', 'e', 'l', 'l', 'o', '!'] staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } names = list ( staff . keys ()) print ( names ) # ['danielj', 'alecg', 'dimas'] jobs = list ( staff . values ()) print ( jobs ) # ['Curriculum Developer', 'Curriculum Instructor', 'Designer'] print() \u00b6 The print() function displays text on the screen: print ( \"Hello, world!\" ) # Hello, world! Using special characters with print() \u00b6 You can use special characters such as \\n and \\t to format the text a bit. The \\n adds a newline (like hitting enter on your keyboard) and the \\t adds a tab: print ( \"Line 1 \\n Line 2 \\n Line 3 \\n \" ) print ( \" \\t This is tabbed over \\n\\t This too.\" ) Example Output: Line 1 Line 2 Line 3 This is tabbed over This too. Using the splat ( * ) operator to print a list \u00b6 You an use the splat ( * ) operator to print the items of a list : names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( * names ) # alecg danielj dimas Using the sep parameter \u00b6 The sep parameter of print() let's you specifiy a given separator to add between each item passed to print() . It is commonly used in combination with the splat ( * ) operator to print the items of a list with a given separator between each item: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( * names , sep = \" -- \" ) # alecg -- danielj -- dimas range() \u00b6 The range() function is mainly used for counter-controlled repetition with a for loop: for num in range ( 1 , 4 ): print ( f \" { num } potato\" ) Example Output: 1 potato 2 potato 3 potato Note that the last number is 3 in the example above, not 4! Using the step parameter of the range() function \u00b6 The range() function takes a third argument, step , which allows you to generate sequences of numbers separated by a given step: for num in range ( 1 , 11 , 3 ): print ( num ) Example Output: 1 4 7 10 sorted() \u00b6 The sorted() function is used to sort a list : names = [ \"danielj\" , \"alecg\" , \"dimas\" ] sorted_names = sorted ( names ) print ( sorted_names ) # ['alecg', 'danielj', 'dimas'] You can pass keyword arguments to the sorted() function to customize the way the list is sorted. For example, the key argument can be a function to run on each item of the list before sorting: names = [ \"Danielj\" , \"alecg\" , \"Dimas\" ] sorted_names = sorted ( names ) # Notice how these aren't sorted correctly? Uppercase letters are \"smaller\" # than lowercase letters in the sorting algorithm that `sort()` uses! print ( sorted_names ) # ['Danielj', 'Dimas', 'alecg'] sorted_names = sorted ( names , key = str . lower ) # Now, everything is sorted correctly, and the original values haven't been # changed. `sort()` only uses the `key` function during the sorting process. print ( sorted_names ) # ['alecg', 'Danielj', 'Dimas'] The reverse keyword argument of sort() is used to sort from high-to-low instead of low-to-high. It expects a bool value: names = [ \"danielj\" , \"alecg\" , \"dimas\" ] reverse_sorted_names = sorted ( names , reverse = True ) print ( reverse_sorted_names ) # ['dimas', 'danielj', 'alecg'] str() \u00b6 The str() function turns its argument into a str data type. This comes in handy if you have a number but want to treat it like a str : meaning_of_life = 42 print ( \"The meaning of life is \" + str ( meaning_of_life )) Example Output: The meaning of life is 42 If you use f-strings , you don't have to worry about converting numbers to str when working with str data: meaning_of_life = 42 print ( f \"The meaning of life is { meaning_of_life } \" ) Example Output: The meaning of life is 42 Further Reading The Python Library Reference - Built-in Functions User-defined functions \u00b6 You define a function using the def keyword, and function definitions go at the TOP of your file: def say_hello (): print ( \"Hello!\" ) Calling a function \u00b6 Defining a function does not run the statements in the body of the function. To run a function, you call it like this: def say_hello (): print ( \"Hello!\" ) say_hello () # Hello! Adding parameters to a function \u00b6 When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer: def say_hello ( name ): print ( f \"Hello, { name } !\" ) Passing arguments to a function \u00b6 If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function: def say_hello ( name ): print ( f \"Hello, { name } !\" ) say_hello ( \"Daniel\" ) # Hello, Daniel! Returning a value from a function \u00b6 You can return a value from a function by using the return keyword: def add ( number_1 , number_2 ): total = number_1 + number_2 return total Capturing a function's return value \u00b6 If a function returns a value, you can capture it in a varible: def add ( number_1 , number_2 ): total = number_1 + number_2 return total total = add ( 2 , 3 ) print ( total ) # 5 You can also use the value immediately in another function, like print() : def add ( number_1 , number_2 ): total = number_1 + number_2 return total print ( add ( 2 , 3 )) # 5 print ( f \"2 + 3 = { add ( 2 , 3 ) } \" ) # 2 + 3 = 5 Indentation in functions \u00b6 The base-level of indentation in a function is 4 spaces. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you need to indent the body of that statement by 4 more spaces: def say_hello ( name ): print ( f \"Hello, { name } !\" ) if name == \"Daniel\" : print ( \"That's a cool name!\" ) else : print ( \"Nice to meet you!\" ) say_hello ( \"Daniel\" ) say_hello ( \"Alec\" ) Example Output: Hello, Daniel! That's a cool name! Hello, Alec! Nice to meet you! Using an early return statement to exit a function \u00b6 A return statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body: def greet_codewizard ( name ): if name not in [ \"danielj\" , \"alecg\" , \"dimas\" ]: print ( \"I don't know you!\" ) return print ( f \"Hello, { name } !\" ) greet_codewizard ( \"danielj\" ) # Hello, danielj! greet_codewizard ( \"django\" ) # I don't know you! Further Reading Real Python - Defining Your Own Python Function The Python Tutorial - Defining Functions Think Python - Functions Think Python - Fruitful Functions Loops \u00b6 If you need to repeat something in your programs, you'll need to use one of Python's looping mechanisms. for \u00b6 A for loop is generally used to loop over a sequence, such as a list : fruits = [ \"apple\" , \"banana\" , \"cherry\" ] for fruit in fruits : print ( fruit ) Example Output: apple banana cherry You can also use a for loop to loop over the characters in a str : name = \"Daniel\" for letter in name : print ( letter ) Example Output: D a n i e l Counter-controlled repetition \u00b6 You can combine the range() function and the for loop to create a counter-controlled loop: for num in range ( 1 , 4 ): print ( f \" { num } potato\" ) Example Output: 1 potato 2 potato 3 potato Searching for a value in a for loop \u00b6 You can use a conditional statement inside a for loop to search for a particular item in a list and then do something. Note the indentation: fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ] for fruit in fruits : if fruit == \"orange\" : print ( f \" { fruit } is the best fruit\" ) Example Output: orange is the best fruit Finding a value in a for loop to use after the loop finishes \u00b6 You can store an item from the for loop for later use by creating a variable before the for loop with some default value. fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ] # The best_fruit will be a str, so the empty str is a good default. best_fruit = \"\" for fruit in fruits : if fruit == \"orange\" : best_fruit = fruit # The best fruit is orange. print ( f \"The best fruit is { best_fruit } .\" ) Creating a new list in a for loop \u00b6 Often, you'll want to loop through a list and build a new list from the contents of the original list . This technique is called mapping, and it's a common thing to do with lists and for loops: prices = [ 10 , 12 , 5 , 8 ] discounted_prices = [] for price in prices : discounted_price = price - ( price * .10 ) discounted_prices . append ( discounted_price ) # Here are your discounted prices:[9, 10.8, 4.5, 7.2] print ( f \"Here are your discounted prices: { discounted_prices } \" ) Creating a list of a pre-determined size with a for loop \u00b6 Using a for loop and the range() function, you can fill a list to a pre-determined size: fruits = [] for num in range ( 1 , 5 ): fruit = input ( f \"Enter fruit number { num } : \" ) fruits . append ( fruit ) Example Output: Enter fruit number 1: apples Enter fruit number 2: bananas Enter fruit number 3: oranges Enter fruit number 4: kiwi Nested loops \u00b6 You can nest for loops inside of each other to perform and action once for each time in the outer for loop: fruits = [ \"pizza\" , \"taco\" ] for fruit in fruits : for num in range ( 1 , 4 ): print ( f \" { num } { fruit } \" ) Example Output: 1 pizza 2 pizza 3 pizza 1 taco 2 taco 3 taco Further Reading Real Python - Python for Loops The Python Tutorial - for Statements The Python Tutorial - The range() function Think Python - Traversal with a for loop while \u00b6 A while loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop). For example, you can use a while loop to ask a user something until they answer correctly: keep_looping = True # This variable controls whether we loop or not. while keep_looping : user_guess = input ( \"What is the meaning of life? \" ) if user_guess == \"42\" : print ( \"That's correct!\" ) keep_looping = False # Stops the loop. else : print ( \"That's incorrect! Please try again.\" ) Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct! Using break to exit a loop \u00b6 You can also use a break statement instead of using a variable to control how many times an indefinite while loop runs: while True : user_guess = input ( \"What is the meaning of life? \" ) if user_guess == \"42\" : print ( \"That's correct!\" ) break # Stops the loop. else : print ( \"That's incorrect! Please try again.\" ) Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct! Counter-controlled repetition \u00b6 You can use a while loop to perform counter-controlled repetition as well, but the for loop with the range() function is generally preferred: counter = 0 while counter < 5 : print ( counter ) counter += 1 # If you forget this, you'll have an infinite loop! Example Output: 0 1 2 3 4 Further Reading Real Python - Python while Loops Think Python - The while statement Math Operations \u00b6 Python is used heavily in math-related fields, so there are a large suite of tools for performing mathematical operations built-in to the language. Arithmetic Operators \u00b6 The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator: total = 8 + 2 difference = 8 - 2 product = 8 * 2 quotient = 8 / 2 print ( f \"8 + 2 = { total } \" ) # 8 + 2 = 10 print ( f \"8 - 2 = { difference } \" ) # 8 - 2 = 6 print ( f \"8 * 2 = { product } \" ) # 8 * 2 = 16 print ( f \"8 / 2 = { quotient } \" ) # 8 / 2 = 4.0 Note that in the example above, division always produces a float . Arithmetic only works between numbers \u00b6 Both data types must be numeric data types, you cannot perform arithmetic between a str and a number. num_tacos = 2 + \"1\" # no num_tacos = \"2\" + \"1\" # no num_tacos = \"1\" * 3 # no num_tacos = \"1\" * \"3\" # no Other Operators \u00b6 There are a few other common operators that Pythonistas use when performing math in Python. Modulo \u00b6 The modulo operator ( % ) returns the remainder after division: 10 % 3 # 1 Power \u00b6 The power operator ( ** ) multiplies a number by itself a given number of times: 3 ** 2 # 9 Floor division \u00b6 The floor division operator ( // ) removes any fractional portion after divison: 10 // 3 # 3 Further Reading The Python Tutorial - Numbers Real Python - Numbers in Python Modules \u00b6 Python is often called a batteries-included language because of the plethora of built-in modules that the language contains. Modules are just Python files full of functionality that you don't have to write yourself; you merely import the things you want from a module and use them in your programs. Getting access to functions in modules \u00b6 To get a function from a module, you import it. There are several different types of imports, which we'll briefly cover below. Importing a single function \u00b6 To import a single function, just write the function name (without parentheses) after the import keyword: from module_name import function_name Importing multiple functions \u00b6 If you need to import multiple functions from a module, separate them by commas: from module_name import some_function , some_other_function Importing all functions \u00b6 To import all items from a module (not recommended generally, but we do this in some courses like E24 and M11), use the * import syntax: from module_name import * Renaming imported functions \u00b6 Sometimes, its nice to rename a function you import from a module (like when the function name is really long or confusing). You can do this using the as keyword: from module_name import some_really_long_function_name as short_name Further Reading The Python Library Reference The Python Tutorial - Modules Real Python - Python Modules and Packages Built-in modules \u00b6 Python comes with 100s of built-in modules. We'll briefly cover a few that are used often at CWHQ in this section. See the Further Reading section for details on where you can browse all of Python's built-in modules. random \u00b6 The random module is used to add randomness to your programs. Getting a random integer \u00b6 You use the randint() function to get a random integer between two numbers: from random import randint # Get an integer between 1 and 10 random_integer = randint ( 1 , 10 ) print ( random_integer ) # 3 Getting a random value from a sequence \u00b6 You use the choice() function to get a random value from a sequence ( str , list , or tuple ): from random import choice names = [ \"daniel\" , \"alec\" , \"dima\" ] random_name = choice ( names ) print ( random_name ) # dima Further Reading The Python Standard Library The Python Standard Library - random The pass statement \u00b6 You use the pass statement to act as a placeholder in a conditional statement or function definition. Programmers refer to this as \"stubbing-out\" the code block. No logic will run in the block a pass statement appears in. Python needs the pass statement because you can't have empty function or conditional blocks. Using pass in a function \u00b6 The pass statement can be used in a function definition as a placeholder before you write the main logic. This ensures your program still works but gives you a convenient way to see that you still need to implement some logic: def order_pizza (): pass Using pass in a conditional statement \u00b6 The pass statement can also be used in a conditioal statement. This comes in handy if you know that you need a conditional statement but you don't have any of the logic ready yet: action = input ( \"What do you want to do? \" ) if action == \"Order Pizza\" : order_pizza () elif action == \"Order Tacos\" : pass Variables \u00b6 Variables assign a name to a value. The naming convention in Python is to use snake_case for variable names, and UPPER_SNAKE_CASE for named constants. Creating a variable \u00b6 You create a variable by assigning a name to a value using the assignment operator ( = ): my_name = \"Daniel\" my_age = 35 Creating a named constant \u00b6 Named constants can replace magic numbers in your program. For example, what does 1 and 2 represent here? if user_choice == 1 : # Do something cool... elif user_choice == 2 : # Do another cool thing... 1 and 2 in the example above are magic numbers because we would have to hunt down their meaning by reading more of the program. If we instead create a named constant for each, the meaning is clearer: ORDER_TACOS = 1 ORDER_PIZZA = 2 if user_choice == ORDER_TACOS : # Order tacos... elif user_choice == ORDER_PIZZA : # Order pizza Updating the value of a variable \u00b6 You can update the value stored in a variable like this: score = 0 score = score + 1 # 0 + 1 print ( score ) # 1 score = score + 1 # 1 + 1 print ( score ) # 2 The same works for decreasing the value of a variable: score = 3 score = score - 1 # 3 - 1 print ( score ) # 2 score = score - 1 # 2 - 1 print ( score ) # 1 There's also a shorthand notation: score = 0 score += 1 # 0 + 1 print ( score ) # 1 score += 1 # 1 + 1 print ( score ) # 2 score -= 1 # 2 - 1 print ( score ) # 1 score -= 1 # 1 - 1 print ( score ) # 0 Global variables \u00b6 Any variable created outside of function definition is considered a global variable. If you want to modify a global variable from inside a function definition, you need to use the global keyword: # This is a global variable score = 0 def update_score (): # Must do this to modify the variable global score # Now this is OK score = score + 1 # 1 Further Reading Real Python - Variables in Python Think Python - Variables, expressions and statements","title":"Python Language"},{"location":"python/python-language/#python-language","text":"Python is a beginner-friendly language that we use in these courses in the core CodeWizardsHQ curriculum: Elementary Middle School High School Intro to Text-Based Programming Introduction to Programming with Python Intro to Python Capstone 1 Beyond Basics with Python Capstone 1 Progamming Fundamentals with Python Capstone 1 APIs and Databases Logic with Python Intro to Databases Professional Web App Development Modular Programming with Python Mastering APIs Capstone 2 Capstone 2 Mastering Databases Mastering MVC Frameworks Python Game Development Capstone 3 Object Relational Mapping DevOps and SoftwareEngineering Capstone 3 In addition to those courses, Python is used in all courses of the Python Language Track . In this section of our documentation, you'll find references to most of the core Python language features and built-in functions that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent Python resources: Python.org Documentation RealPython.com Think Python","title":"Python Language"},{"location":"python/python-language/#comments","text":"Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program.","title":"Comments"},{"location":"python/python-language/#single-line-comments","text":"Single line comments begin with the # character. You can put them above or to the right of the line of code they reference: # Validate the user is logged in and redirect them to the appropriate page. if is_logged_in ( user ): redirect_to_homepage () else : redirect_to_login () MIN_HEIGHT = 60 # This is measured in inches, not feet!","title":"Single Line Comments"},{"location":"python/python-language/#deactivating-code","text":"You can deactivate sections of code with comments: if age < 18 : # Turning this off for now # prompt_user() redirect_to_kid_zone () else : login_user ()","title":"Deactivating Code"},{"location":"python/python-language/#multiline-comments","text":"You can use multiline strings if you want to make a multiline comment: \"\"\" This calculates the hypotenuse of a right triangle when given the sides of the right triangle. It's the Pythagorean Theorem. The ** is how you write exponents in Python, and fractional exponents are like roots, so 0.5 is the square root. \"\"\" hypotenuse = (( side_a ** 2 ) + ( side_b ** 2 )) ** 0.5 Further Reading The Python Tutorial Real Python - Writing Comments in Python Think Python - Comments","title":"Multiline Comments"},{"location":"python/python-language/#conditional-statements","text":"Conditional statements allow you to run a block of code when a boolean condition is true.","title":"Conditional Statements"},{"location":"python/python-language/#if","text":"The if statement is the simplest form of conditional statement. If the expression to the right of the if keyword is True , the indented code block will execute: is_hungry = True if is_hungry : print ( \"You should eat!\" ) Example Output: You should eat! Usually, a conditional expression uses comparison operators to generate a bool result: age = 19 if age >= 18 : print ( \"You are legally an adult, congrats!\" ) Example Output: You are legally an adult, congrats!","title":"if"},{"location":"python/python-language/#elif","text":"The elif conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to True will run: favorite_food = \"Tacos\" if favorite_food == \"Sushi\" : print ( \"We're going out for Japanese food to night!\" ) elif favorite_food == \"Pasta\" : print ( \"How about we eat some Italian food tonight?\" ) elif favorite_food == \"Tacos\" : print ( \"Time for some Mexican food!\" ) elif favorite_food == \"Samosa\" : print ( \"Let's eat Indian food tonight!\" ) Example Output: Time for some Mexican food!","title":"elif"},{"location":"python/python-language/#else","text":"The else conditional statement runs when all other conditional statements in a group are False . You can think of it as the default option: favorite_food = \"Hot Dogs with Cream Cheese\" if favorite_food == \"Sushi\" : print ( \"We're going out for Japanese food to night!\" ) elif favorite_food == \"Pasta\" : print ( \"How about we eat some Italian food tonight?\" ) elif favorite_food == \"Tacos\" : print ( \"Time for some Mexican food!\" ) elif favorite_food == \"Samosa\" : print ( \"Let's eat Indian food tonight!\" ) else : print ( \"I don't know what that favorite_food is!\" ) I don't know what that favorite_food is!","title":"else"},{"location":"python/python-language/#comparison-operators","text":"Here are the comparison operators that you can use in conditional expressions to generate a bool value: Operator Description > Greater-than >= Greater-than or equal-to < Less-than <= Less-than or equal-to == Equal-to != Not equal-to","title":"Comparison Operators"},{"location":"python/python-language/#complex-conditional-statements","text":"Complex conditional statements involve combining more than one conditional expression with logical operators : age = 15 height_in_feet = 4.6 if age >= 13 and height_in_feet > 5 : print ( \"You may ride the roller coaster.\" ) else : print ( \"You may NOT ride the roller coaster.\" ) Example Output: You may NOT ride the roller coaster. You can string as many logical operators together as you want to build more complex conditional statements: is_hungry = False is_thirsty = True food_amount = 10 drink_amount = 0 if is_hungry and food_amount > 0 or is_thirsty and drink_amount > 0 : enter_kitchen () else : play_video_games ()","title":"Complex Conditional Statements"},{"location":"python/python-language/#formatting-complex-conditional-statements","text":"With a large complex conditional statement, it's often easier to read and reason about if you enclose the conditional expression in parentheses and split the statements across multiple lines: is_hungry = False is_thirsty = True food_amount = 10 drink_amount = 0 if ( is_hungry and food_amount > 0 or is_thirsty and drink_amount > 0 ): enter_kitchen () else : play_video_games ()","title":"Formatting complex conditional statements"},{"location":"python/python-language/#logical-operators","text":"Logical operators allow you to combine multiple conditional expressions in a single conditional statement: Operator Description and True when both conditional expressions are True or True when either conditional expression is True not Reverses the value of a conditional expression","title":"Logical Operators"},{"location":"python/python-language/#using-the-and-operator","text":"The and operator evaluates to True when both conditional expressions are True : age = 15 height_in_feet = 5.2 if age >= 13 and height_in_feet > 5 : print ( \"You may ride the roller coaster.\" ) else : print ( \"You may NOT ride the roller coaster.\" ) Example Output: You may ride the roller coaster.","title":"Using the and operator"},{"location":"python/python-language/#using-the-or-operator","text":"The or operator evaluates to True when either conditional expression is True : is_hungry = True is_thirsty = False if is_hungry or is_thirsty : print ( \"You should go to the kitchen.\" ) else : print ( \"Do whatever, you're good!\" ) Example Output: You should go to the kitchen.","title":"Using the or operator"},{"location":"python/python-language/#using-the-not-operator","text":"The not operator reverses a conditional expression: is_tired = True if not is_tired : print ( \"Let's go outside and play.\" ) else : print ( \"Let's take a nap.\" ) Example Output: Let's take a nap.","title":"Using the not operator"},{"location":"python/python-language/#nested-conditional-statements","text":"Conditional statements can be nested inside other conditional statements. You just have to follow the same indentation rules for each nested conditional block: role = \"admin\" if role == \"admin\" or role == \"developer\" : print ( \"You can see the secret stuff in this app.\" ) if role == \"admin\" : print ( \"You can also see the SUPER secret stuff in this app.\" ) Example Output: You can see the secret stuff in this app. You can also see the SUPER secret stuff in this app. Further Reading Real Python - Conditional Statements in Python Real Python - Using the not Boolean Operator in Python Real Python - Using the and Boolean Operator in Python Real Python - How to use the Python or Operator The Python Library Reference - Boolean Operations The Python Library Reference - Boolean Values The Python Library Reference - Comparisons The Python Library Reference - Truth Value Testing The Python Tutorial - if Statements Think Python - Conditionals and Recursion","title":"Nested Conditional Statements"},{"location":"python/python-language/#data-types","text":"Every value has a data type in Python. The data type determines what kinds of operations you can perform on the value. For example, you can't perform arithmetic between values that aren't numeric data types.","title":"Data Types"},{"location":"python/python-language/#bool","text":"The bool data type represents a True or a False value: is_hungry = True is_thirsty = False","title":"bool"},{"location":"python/python-language/#generating-bool-in-a-conditional-statement","text":"You normally won't use a bool directly, but instead will generate a bool in a conditional statement: age = 19 # This generates `True` if age >= 18 : print ( \"You are an adult!\" ) # This generates `False` if age < 18 : print ( \"You are a child.\" )","title":"Generating bool in a conditional statement"},{"location":"python/python-language/#truthy-and-falsy-values","text":"Booleans are not the only values that can be True/False. Every value in Python is either truthy or falsy , which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy , and all other strings and numbers are truthy . Here's an example of a falsy value: username = \"\" if username : print ( f \"Hello, { username } !\" ) else : print ( \"The username is blank\" ) Example Output: The username is blank Here's an example of a truthy value: num_bananas = 2 if num_bananas : print ( \"We have bananas!\" ) else : print ( \"We have no bananas!\" ) Example Output: We have bananas!","title":"Truthy and falsy values"},{"location":"python/python-language/#float","text":"The float data type represents a decimal number: total_cost = 29.99","title":"float"},{"location":"python/python-language/#int","text":"The int data type represents a whole number: num_tacos_eaten = 12","title":"int"},{"location":"python/python-language/#converting-str-to-int","text":"You can use the int() function to convert a str to an int : age = int ( \"13\" ) This is often combined with the input() function when you prompt the user for a numeric data type: age = int ( input ( \"How old are you? \" ))","title":"Converting str to int"},{"location":"python/python-language/#str","text":"The str data type represents a text value: name = \"Daniel\"","title":"str"},{"location":"python/python-language/#string-concatenation","text":"If you need to combine a variable and a str , you can use the + operator. This technique is called string concatenation : name = \"Daniel\" greeting = \"Hello, \" + name print ( greeting ) # Hello, Daniel","title":"String concatenation"},{"location":"python/python-language/#string-interpolation","text":"Another way to combine a variable and a str is using f-strings . This technique is called string interpolation , and it is the preferred way to combine variables and str : name = \"Daniel\" age = 35 print ( f \"I'm { name } and I'm { age } years old.\" ) Example Output: I'm Daniel and I'm 35 years old. You can also use multiline f-strings if you have a large block of text that you want to insert variables into: name = \"Brandon\" planet_name = \"Krypton\" number = \"250\" animal = \"Zebra\" story = f \"\"\" Hello, my name is astronaut { name } , and I am on my way to planet { planet_name } . I will be gone for { number } days. Please take care of my { animal } for me. \"\"\" print ( story ) Example Output: Hello, my name is astronaut Brandon, and I am on my way to planet Krypton. I will be gone for 250 days. Please take care of my Zebra for me.","title":"String interpolation"},{"location":"python/python-language/#multiline-strings","text":"Multiline strings allow you to write large blocks of text in a single print() statement: menu = \"\"\" Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* \"\"\" print ( menu ) Example Output: Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now*","title":"Multiline strings"},{"location":"python/python-language/#removing-the-intial-newline-of-a-multiline-string","text":"You can remove the initial newline from a multiline string using the \\ character: options = \"\"\" \\ (1) View All Contacts (2) View Contact (3) Add Contact (4) Update Contact (5) Remove Contact (6) Exit \"\"\" print ( options ) Example Output: (1) View All Contacts (2) View Contact (3) Add Contact (4) Update Contact (5) Remove Contact (6) Exit","title":"Removing the intial newline of a multiline string"},{"location":"python/python-language/#raw-strings","text":"Raw strings ( str prefaced with an r ) tell Python to not interpret special str characters. You use them in CWHQ courses to print ASCII art and ensure it formats correctly. Generally, r strings will also be multiline strings, but this isn't required: mr_nibbles = r \"\"\" |\\---/| | o_o | \\_^_/ \"\"\" print ( mr_nibbles ) Example Output: |\\---/| | o_o | \\_^_/","title":"Raw strings"},{"location":"python/python-language/#getting-the-number-of-characters-in-a-str","text":"You can use the len() function to get the number of characters in a str : name = \"Daniel\" len ( name ) # 6","title":"Getting the number of characters in a str"},{"location":"python/python-language/#checking-if-a-str-ends-with-a-set-of-characters","text":"The str.endswith() method lets you check if a str ends with a given pattern: email_addresses = [ \"djs@cwhq.com\" , \"alecg@auburn.edu\" , \"samh@bridges.com\" ] for email_address in email_addresses : if email_address . endswith ( \".edu\" ): print ( f \" { email_address } is a school address\" ) elif email_address . endswith ( \"cwhq.com\" ): print ( f \" { email_address } is a CWHQ employee address\" ) else : print ( f \"I don't know what { email_address } is for\" ) Example Output: djs@cwhq.com is a CWHQ employee address alecg@auburn.edu is a school address I don't know what sam@bridges.com is for","title":"Checking if a str ends with a set of characters"},{"location":"python/python-language/#sanitizing-user-input","text":"User's do strange things, but using str.lower() and str.strip() can help your program to validate str data types. str.lower() makes a str lowercase: # Imagine a user entered \"Pizza\" with an uppercase P favorite_food = \"Pizza\" if favorite_food . lower () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! str.strip() removes leading or trailing whitespace from a str : # Imagine a user entered \" pizza\" with a leading space character favorite_food = \" pizza\" if favorite_food . strip () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! You can chain these methods together to sanitize a str completely: # What a mess! Extra spaces before/after and odd capitalization favorite_food = \" PIzZa \" if favorite_food . strip () . lower () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food!","title":"Sanitizing user input"},{"location":"python/python-language/#string-multiplication","text":"You can multiply a str by a number if you want to make copies of a str : num_hamburgers = 3 \u201c\ud83c\udf54\u201d * num_hamburgers Example Output: \ud83c\udf54\ud83c\udf54\ud83c\udf54 Further Reading The Python Library Reference - Text Sequence Type The Python Library Reference - Numeric Types The Python Tutorial - Strings Think Python - Values and Types Think Python - Strings Real Python - Python 3's f-Strings Real Python - Strings and Character Data in Python","title":"String Multiplication"},{"location":"python/python-language/#data-structures","text":"Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house.","title":"Data Structures"},{"location":"python/python-language/#list","text":"The list data structure is used to store data in ordered slots . It is known as mutable sequence type , which means it can be modified after creation. Usually, the items in a list are homogeneous, which means they represent a group of similar items of the same data type: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] menu_prices = [ 4.50 , 5.75 , 3.00 ] ids = [ 184 , 294 , 832 , 98 , 4 ] You can write a list on multiple lines if you want. The trailing comma is recommended but not required: foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"ice cream\" , \"asparagus\" , ]","title":"list"},{"location":"python/python-language/#accessing-items-in-a-list","text":"You can access individual items in a list using the [] characters and the index number of the item. The index numbers start at 0: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( names [ 0 ]) # alecg print ( names [ 1 ]) # danielj print ( names [ 2 ]) # dimas","title":"Accessing items in a list"},{"location":"python/python-language/#adding-an-item-to-a-list","text":"To add an item to a list after it has been created, you can use the list.append() method. The list.append() method adds the item to the end of the list: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . append ( \"samh\" ) print ( names ) # ['alecg', 'danielj', 'dimas', 'samh']","title":"Adding an item to a list"},{"location":"python/python-language/#updating-an-item-in-a-list","text":"To update a list item, replace the value at the index: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names [ 1 ] = \"django\" print ( names ) # ['alecg', 'django', 'dimas']","title":"Updating an item in a list"},{"location":"python/python-language/#removing-an-item-from-a-list","text":"To remove an item from a list , you can use the list.remove() method: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . remove ( \"alecg\" ) print ( names ) # ['danielj', 'dimas'] If you want to remove an item from a list by its index number, use the list.pop() method: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . pop ( 0 ) print ( names ) # ['danielj', 'dimas']","title":"Removing an item from a list"},{"location":"python/python-language/#looping-through-a-list","text":"To loop through the items in a list , use a for loop. Note the convention of using the plural names for the list and the singular name for the loop-iteration variable: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( \"This documentation is brought to you by:\" ) for name in names : print ( name ) Example Output: This documentation is brought to you by: alecg danielj dimas","title":"Looping through a list"},{"location":"python/python-language/#getting-the-number-of-items-in-a-list","text":"To get the number of items in a list , use the len() function: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] num_names = len ( names ) print ( num_names ) # 3","title":"Getting the number of items in a list"},{"location":"python/python-language/#checking-if-an-item-is-contained-in-a-list","text":"To check if an item is contained in a list , use the in operator: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] \"alecg\" in names # True \"samh\" in names # False The in operator is generally used as part of a conditional statement: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] if \"alecg\" in names : print ( \"alecg is in the 'names' list\" ) else : print ( \"alecg is NOT in the 'names' list\" ) if \"samh\" in names : print ( \"samh is in the 'names' list\" ) else : print ( \"samh is NOT in the 'names' list\" ) Example Output: alecg is in the 'names' list samh is NOT in the 'names' list Further Reading The Python Library Reference - Common Sequence Operations The Python Library Reference - Mutable Sequence Types The Python Library Reference - len() The Python Tutorial - Lists Think Python - Lists","title":"Checking if an item is contained in a list"},{"location":"python/python-language/#dict","text":"The dict data structure is used to store data in key/value pairs: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } You can use the dict() function to build a dict as well, note that the keys are keyword arguments: staff = dict ( danielj = \"Curriculum Developer\" , alecg = \"Curriculum Instructor\" , dimas = \"Designer\" , )","title":"dict"},{"location":"python/python-language/#accessing-items-in-a-dict","text":"You have to know the key to access an individual item in a dict : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } daniel_job = staff [ \"danielj\" ] print ( f \"Daniel is a { daniel_job } .\" ) # Daniel is a Curriculum Developer. alec_job = staff [ \"alecg\" ] print ( f \"Alec is a { alec_job } .\" ) # Alec is a Curriculum Instructor. dima_job = staff [ \"dimas\" ] print ( f \"Dima is a { dima_job } .\" ) # Dima is a Designer. If you need to pull a value from a dict inside an f-string , you must use different quote characters for the key (if it's a str ). students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } print ( f \"Vicki is in { students [ 'Vicki' ] } \" ) # Vicki is in 3rd grade print ( f \"Sam is in { students [ 'Sam' ] } \" ) # Sam is in 4th grade print ( f \"Tammy is in { students [ 'Tammy' ] } \" ) # Tammy is in 4th grade","title":"Accessing items in a dict"},{"location":"python/python-language/#adding-an-item-to-a-dict","text":"You can add an item to a dict by providing the key/value pair (it's the same syntax as updating an item): staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff [ \"django\" ] = \"Director Of Pug Snorts\" print ( staff ) # {'danielj': 'Curriculum Developer', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer', 'django': 'Director Of Pug Snorts'}","title":"Adding an item to a dict"},{"location":"python/python-language/#updating-an-item-in-a-dict","text":"To update an item in a dict , you must know the key: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff [ \"danielj\" ] = \"Burrito Taste-Tester\" print ( staff ) # {'danielj': 'Burrito Taste-Tester', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer'}","title":"Updating an item in a dict"},{"location":"python/python-language/#removing-an-item-from-a-dict","text":"To remove an item from a dict , use the dict.pop() method: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff . pop ( \"danielj\" ) print ( staff ) # {'alecg': 'Curriculum Instructor', 'dimas': 'Designer'}","title":"Removing an item from a dict"},{"location":"python/python-language/#looping-through-a-dict","text":"To loop through a dict , you generally use the dict.items() method like this: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } for name , job in staff . items (): print ( f \" { name } is a { job } .\" ) Example Output: danielj is a Curriculum Developer. alecg is a Curriculum Instructor. dimas is a Designer. If you just want to loop over the keys of a dict , you can use a for loop just as you would with a list : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } print ( \"CWHQ staff:\" ) for name in staff : print ( name ) Example Output: danielj alecg dimas","title":"Looping through a dict"},{"location":"python/python-language/#getting-the-keys-from-a-dict","text":"If you need to get all of the keys from a dict , use the dict.keys() method. Note, you'll usually want to cast the result to a list , which is why the list() function is used here: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } names = list ( staff . keys ()) print ( f \"Here are all the names in the staff dict: { names } \" ) Example Output: Here are all the names in the staff dict: ['danielj', 'alecg', 'dimas']","title":"Getting the keys from a dict"},{"location":"python/python-language/#getting-the-values-from-a-dict","text":"If you need to get all of the values from a dict , use the dict.values() method. Note, you'll usually want to cast the result to a list , which is why the list() function is used here: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } jobs = list ( staff . values ()) print ( f \"Here are all the jobs in the staff dict: { jobs } \" ) Example Output: Here are all the jobs in the staff dict: ['Curriculum Developer', 'Curriculum Instructor', 'Designer']","title":"Getting the values from a dict"},{"location":"python/python-language/#getting-the-number-of-items-in-a-dict","text":"You can use the len() function to get the number of items in a dict : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } number_of_staff = len ( staff ) print ( f \"We have { number_of_staff } people on our staff.\" ) # We have 3 people on our staff.","title":"Getting the number of items in a dict"},{"location":"python/python-language/#checking-if-an-item-is-contained-in-a-dict","text":"To check if an item is contained in a dict , use the in operator: students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if \"Vicki\" in students : print ( \"Vicki is a student here\" ) Example Output: Vicki is a student here You can use the not operator before the in operator to test if a key is not in a dict : students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if \"Daniel\" not in students : print ( \"Daniel is NOT a student here\" ) Example Output: Daniel is NOT a student here","title":"Checking if an item is contained in a dict"},{"location":"python/python-language/#using-dictget-to-test-if-an-item-is-in-a-dict","text":"The dict.get() method can be used as an alternative to in and not in . It returns the value of the given key or the special None value, which is used to indicate the absence of any valid value. The is operator is similar to == , but it checks if the two values are the same exact thing in memory: students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if students . get ( \"Vicki\" ) is not None : print ( \"Vicki is a student here\" ) if students . get ( \"Daniel\" ) is None : print ( \"Daniel is NOT a student here\" ) Example Output: Vicki is a student here Daniel is NOT a student here Further Reading Real Python - Dictionaries in Python The Python Library Reference - Mapping Types: dict The Python Tutorial - Dictionaries Think Python - Dictionaries","title":"Using dict.get() to test if an item is in a dict"},{"location":"python/python-language/#functions","text":"Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y. (Don't Repeat Yourself) principle because they reduce unnecessary repetition.","title":"Functions"},{"location":"python/python-language/#built-in-functions","text":"Python comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below.","title":"Built-in functions"},{"location":"python/python-language/#float_1","text":"The float() function converts data to a float : pi = float ( \"3.14\" ) print ( pi ) # 3.14 type ( pi ) # <class 'float'> two = float ( 2 ) print ( two ) # 2.0 type ( two ) # <class 'float'>","title":"float()"},{"location":"python/python-language/#input","text":"The input() function allows you to prompt a user. The user's response is returned as a str , which you can store in a variable: name = input ( \"What is your name? \" ) print ( f \"Nice to meet you, { name } !\" ) Example Output: What is your name? Daniel Nice to meet you, Daniel!","title":"input()"},{"location":"python/python-language/#int_1","text":"The int() function converts data to an int : int_pi = int ( 3.14 ) print ( int_pi ) # 3 type ( int_pi ) # <class 'int'> meaning_of_life = int ( \"42\" ) print ( meaning_of_life ) # 42 type ( meaning_of_life ) # <class 'int'>","title":"int()"},{"location":"python/python-language/#len","text":"The len() function returns the length of a sequence such as a list or str : number_of_characters = len ( \"How many characters are in this str?\" ) print ( number_of_characters ) # 36 favorite_foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"burritos\" ] number_of_foods = len ( favorite_foods ) print ( number_of_foods ) # 4","title":"len()"},{"location":"python/python-language/#list_1","text":"The list() function creates a list from a sequence such as the result of dict.keys() , dict.values() , or a str : character_list = list ( \"Hello!\" ) print ( character_list ) # ['H', 'e', 'l', 'l', 'o', '!'] staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } names = list ( staff . keys ()) print ( names ) # ['danielj', 'alecg', 'dimas'] jobs = list ( staff . values ()) print ( jobs ) # ['Curriculum Developer', 'Curriculum Instructor', 'Designer']","title":"list()"},{"location":"python/python-language/#print","text":"The print() function displays text on the screen: print ( \"Hello, world!\" ) # Hello, world!","title":"print()"},{"location":"python/python-language/#using-special-characters-with-print","text":"You can use special characters such as \\n and \\t to format the text a bit. The \\n adds a newline (like hitting enter on your keyboard) and the \\t adds a tab: print ( \"Line 1 \\n Line 2 \\n Line 3 \\n \" ) print ( \" \\t This is tabbed over \\n\\t This too.\" ) Example Output: Line 1 Line 2 Line 3 This is tabbed over This too.","title":"Using special characters with print()"},{"location":"python/python-language/#using-the-splat-operator-to-print-a-list","text":"You an use the splat ( * ) operator to print the items of a list : names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( * names ) # alecg danielj dimas","title":"Using the splat (*) operator to print a list"},{"location":"python/python-language/#using-the-sep-parameter","text":"The sep parameter of print() let's you specifiy a given separator to add between each item passed to print() . It is commonly used in combination with the splat ( * ) operator to print the items of a list with a given separator between each item: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( * names , sep = \" -- \" ) # alecg -- danielj -- dimas","title":"Using the sep parameter"},{"location":"python/python-language/#range","text":"The range() function is mainly used for counter-controlled repetition with a for loop: for num in range ( 1 , 4 ): print ( f \" { num } potato\" ) Example Output: 1 potato 2 potato 3 potato Note that the last number is 3 in the example above, not 4!","title":"range()"},{"location":"python/python-language/#using-the-step-parameter-of-the-range-function","text":"The range() function takes a third argument, step , which allows you to generate sequences of numbers separated by a given step: for num in range ( 1 , 11 , 3 ): print ( num ) Example Output: 1 4 7 10","title":"Using the step parameter of the range() function"},{"location":"python/python-language/#sorted","text":"The sorted() function is used to sort a list : names = [ \"danielj\" , \"alecg\" , \"dimas\" ] sorted_names = sorted ( names ) print ( sorted_names ) # ['alecg', 'danielj', 'dimas'] You can pass keyword arguments to the sorted() function to customize the way the list is sorted. For example, the key argument can be a function to run on each item of the list before sorting: names = [ \"Danielj\" , \"alecg\" , \"Dimas\" ] sorted_names = sorted ( names ) # Notice how these aren't sorted correctly? Uppercase letters are \"smaller\" # than lowercase letters in the sorting algorithm that `sort()` uses! print ( sorted_names ) # ['Danielj', 'Dimas', 'alecg'] sorted_names = sorted ( names , key = str . lower ) # Now, everything is sorted correctly, and the original values haven't been # changed. `sort()` only uses the `key` function during the sorting process. print ( sorted_names ) # ['alecg', 'Danielj', 'Dimas'] The reverse keyword argument of sort() is used to sort from high-to-low instead of low-to-high. It expects a bool value: names = [ \"danielj\" , \"alecg\" , \"dimas\" ] reverse_sorted_names = sorted ( names , reverse = True ) print ( reverse_sorted_names ) # ['dimas', 'danielj', 'alecg']","title":"sorted()"},{"location":"python/python-language/#str_1","text":"The str() function turns its argument into a str data type. This comes in handy if you have a number but want to treat it like a str : meaning_of_life = 42 print ( \"The meaning of life is \" + str ( meaning_of_life )) Example Output: The meaning of life is 42 If you use f-strings , you don't have to worry about converting numbers to str when working with str data: meaning_of_life = 42 print ( f \"The meaning of life is { meaning_of_life } \" ) Example Output: The meaning of life is 42 Further Reading The Python Library Reference - Built-in Functions","title":"str()"},{"location":"python/python-language/#user-defined-functions","text":"You define a function using the def keyword, and function definitions go at the TOP of your file: def say_hello (): print ( \"Hello!\" )","title":"User-defined functions"},{"location":"python/python-language/#calling-a-function","text":"Defining a function does not run the statements in the body of the function. To run a function, you call it like this: def say_hello (): print ( \"Hello!\" ) say_hello () # Hello!","title":"Calling a function"},{"location":"python/python-language/#adding-parameters-to-a-function","text":"When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer: def say_hello ( name ): print ( f \"Hello, { name } !\" )","title":"Adding parameters to a function"},{"location":"python/python-language/#passing-arguments-to-a-function","text":"If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function: def say_hello ( name ): print ( f \"Hello, { name } !\" ) say_hello ( \"Daniel\" ) # Hello, Daniel!","title":"Passing arguments to a function"},{"location":"python/python-language/#returning-a-value-from-a-function","text":"You can return a value from a function by using the return keyword: def add ( number_1 , number_2 ): total = number_1 + number_2 return total","title":"Returning a value from a function"},{"location":"python/python-language/#capturing-a-functions-return-value","text":"If a function returns a value, you can capture it in a varible: def add ( number_1 , number_2 ): total = number_1 + number_2 return total total = add ( 2 , 3 ) print ( total ) # 5 You can also use the value immediately in another function, like print() : def add ( number_1 , number_2 ): total = number_1 + number_2 return total print ( add ( 2 , 3 )) # 5 print ( f \"2 + 3 = { add ( 2 , 3 ) } \" ) # 2 + 3 = 5","title":"Capturing a function's return value"},{"location":"python/python-language/#indentation-in-functions","text":"The base-level of indentation in a function is 4 spaces. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you need to indent the body of that statement by 4 more spaces: def say_hello ( name ): print ( f \"Hello, { name } !\" ) if name == \"Daniel\" : print ( \"That's a cool name!\" ) else : print ( \"Nice to meet you!\" ) say_hello ( \"Daniel\" ) say_hello ( \"Alec\" ) Example Output: Hello, Daniel! That's a cool name! Hello, Alec! Nice to meet you!","title":"Indentation in functions"},{"location":"python/python-language/#using-an-early-return-statement-to-exit-a-function","text":"A return statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body: def greet_codewizard ( name ): if name not in [ \"danielj\" , \"alecg\" , \"dimas\" ]: print ( \"I don't know you!\" ) return print ( f \"Hello, { name } !\" ) greet_codewizard ( \"danielj\" ) # Hello, danielj! greet_codewizard ( \"django\" ) # I don't know you! Further Reading Real Python - Defining Your Own Python Function The Python Tutorial - Defining Functions Think Python - Functions Think Python - Fruitful Functions","title":"Using an early return statement to exit a function"},{"location":"python/python-language/#loops","text":"If you need to repeat something in your programs, you'll need to use one of Python's looping mechanisms.","title":"Loops"},{"location":"python/python-language/#for","text":"A for loop is generally used to loop over a sequence, such as a list : fruits = [ \"apple\" , \"banana\" , \"cherry\" ] for fruit in fruits : print ( fruit ) Example Output: apple banana cherry You can also use a for loop to loop over the characters in a str : name = \"Daniel\" for letter in name : print ( letter ) Example Output: D a n i e l","title":"for"},{"location":"python/python-language/#counter-controlled-repetition","text":"You can combine the range() function and the for loop to create a counter-controlled loop: for num in range ( 1 , 4 ): print ( f \" { num } potato\" ) Example Output: 1 potato 2 potato 3 potato","title":"Counter-controlled repetition"},{"location":"python/python-language/#searching-for-a-value-in-a-for-loop","text":"You can use a conditional statement inside a for loop to search for a particular item in a list and then do something. Note the indentation: fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ] for fruit in fruits : if fruit == \"orange\" : print ( f \" { fruit } is the best fruit\" ) Example Output: orange is the best fruit","title":"Searching for a value in a for loop"},{"location":"python/python-language/#finding-a-value-in-a-for-loop-to-use-after-the-loop-finishes","text":"You can store an item from the for loop for later use by creating a variable before the for loop with some default value. fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ] # The best_fruit will be a str, so the empty str is a good default. best_fruit = \"\" for fruit in fruits : if fruit == \"orange\" : best_fruit = fruit # The best fruit is orange. print ( f \"The best fruit is { best_fruit } .\" )","title":"Finding a value in a for loop to use after the loop finishes"},{"location":"python/python-language/#creating-a-new-list-in-a-for-loop","text":"Often, you'll want to loop through a list and build a new list from the contents of the original list . This technique is called mapping, and it's a common thing to do with lists and for loops: prices = [ 10 , 12 , 5 , 8 ] discounted_prices = [] for price in prices : discounted_price = price - ( price * .10 ) discounted_prices . append ( discounted_price ) # Here are your discounted prices:[9, 10.8, 4.5, 7.2] print ( f \"Here are your discounted prices: { discounted_prices } \" )","title":"Creating a new list in a for loop"},{"location":"python/python-language/#creating-a-list-of-a-pre-determined-size-with-a-for-loop","text":"Using a for loop and the range() function, you can fill a list to a pre-determined size: fruits = [] for num in range ( 1 , 5 ): fruit = input ( f \"Enter fruit number { num } : \" ) fruits . append ( fruit ) Example Output: Enter fruit number 1: apples Enter fruit number 2: bananas Enter fruit number 3: oranges Enter fruit number 4: kiwi","title":"Creating a list of a pre-determined size with a for loop"},{"location":"python/python-language/#nested-loops","text":"You can nest for loops inside of each other to perform and action once for each time in the outer for loop: fruits = [ \"pizza\" , \"taco\" ] for fruit in fruits : for num in range ( 1 , 4 ): print ( f \" { num } { fruit } \" ) Example Output: 1 pizza 2 pizza 3 pizza 1 taco 2 taco 3 taco Further Reading Real Python - Python for Loops The Python Tutorial - for Statements The Python Tutorial - The range() function Think Python - Traversal with a for loop","title":"Nested loops"},{"location":"python/python-language/#while","text":"A while loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop). For example, you can use a while loop to ask a user something until they answer correctly: keep_looping = True # This variable controls whether we loop or not. while keep_looping : user_guess = input ( \"What is the meaning of life? \" ) if user_guess == \"42\" : print ( \"That's correct!\" ) keep_looping = False # Stops the loop. else : print ( \"That's incorrect! Please try again.\" ) Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct!","title":"while"},{"location":"python/python-language/#using-break-to-exit-a-loop","text":"You can also use a break statement instead of using a variable to control how many times an indefinite while loop runs: while True : user_guess = input ( \"What is the meaning of life? \" ) if user_guess == \"42\" : print ( \"That's correct!\" ) break # Stops the loop. else : print ( \"That's incorrect! Please try again.\" ) Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct!","title":"Using break to exit a loop"},{"location":"python/python-language/#counter-controlled-repetition_1","text":"You can use a while loop to perform counter-controlled repetition as well, but the for loop with the range() function is generally preferred: counter = 0 while counter < 5 : print ( counter ) counter += 1 # If you forget this, you'll have an infinite loop! Example Output: 0 1 2 3 4 Further Reading Real Python - Python while Loops Think Python - The while statement","title":"Counter-controlled repetition"},{"location":"python/python-language/#math-operations","text":"Python is used heavily in math-related fields, so there are a large suite of tools for performing mathematical operations built-in to the language.","title":"Math Operations"},{"location":"python/python-language/#arithmetic-operators","text":"The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator: total = 8 + 2 difference = 8 - 2 product = 8 * 2 quotient = 8 / 2 print ( f \"8 + 2 = { total } \" ) # 8 + 2 = 10 print ( f \"8 - 2 = { difference } \" ) # 8 - 2 = 6 print ( f \"8 * 2 = { product } \" ) # 8 * 2 = 16 print ( f \"8 / 2 = { quotient } \" ) # 8 / 2 = 4.0 Note that in the example above, division always produces a float .","title":"Arithmetic Operators"},{"location":"python/python-language/#arithmetic-only-works-between-numbers","text":"Both data types must be numeric data types, you cannot perform arithmetic between a str and a number. num_tacos = 2 + \"1\" # no num_tacos = \"2\" + \"1\" # no num_tacos = \"1\" * 3 # no num_tacos = \"1\" * \"3\" # no","title":"Arithmetic only works between numbers"},{"location":"python/python-language/#other-operators","text":"There are a few other common operators that Pythonistas use when performing math in Python.","title":"Other Operators"},{"location":"python/python-language/#modulo","text":"The modulo operator ( % ) returns the remainder after division: 10 % 3 # 1","title":"Modulo"},{"location":"python/python-language/#power","text":"The power operator ( ** ) multiplies a number by itself a given number of times: 3 ** 2 # 9","title":"Power"},{"location":"python/python-language/#floor-division","text":"The floor division operator ( // ) removes any fractional portion after divison: 10 // 3 # 3 Further Reading The Python Tutorial - Numbers Real Python - Numbers in Python","title":"Floor division"},{"location":"python/python-language/#modules","text":"Python is often called a batteries-included language because of the plethora of built-in modules that the language contains. Modules are just Python files full of functionality that you don't have to write yourself; you merely import the things you want from a module and use them in your programs.","title":"Modules"},{"location":"python/python-language/#getting-access-to-functions-in-modules","text":"To get a function from a module, you import it. There are several different types of imports, which we'll briefly cover below.","title":"Getting access to functions in modules"},{"location":"python/python-language/#importing-a-single-function","text":"To import a single function, just write the function name (without parentheses) after the import keyword: from module_name import function_name","title":"Importing a single function"},{"location":"python/python-language/#importing-multiple-functions","text":"If you need to import multiple functions from a module, separate them by commas: from module_name import some_function , some_other_function","title":"Importing multiple functions"},{"location":"python/python-language/#importing-all-functions","text":"To import all items from a module (not recommended generally, but we do this in some courses like E24 and M11), use the * import syntax: from module_name import *","title":"Importing all functions"},{"location":"python/python-language/#renaming-imported-functions","text":"Sometimes, its nice to rename a function you import from a module (like when the function name is really long or confusing). You can do this using the as keyword: from module_name import some_really_long_function_name as short_name Further Reading The Python Library Reference The Python Tutorial - Modules Real Python - Python Modules and Packages","title":"Renaming imported functions"},{"location":"python/python-language/#built-in-modules","text":"Python comes with 100s of built-in modules. We'll briefly cover a few that are used often at CWHQ in this section. See the Further Reading section for details on where you can browse all of Python's built-in modules.","title":"Built-in modules"},{"location":"python/python-language/#random","text":"The random module is used to add randomness to your programs.","title":"random"},{"location":"python/python-language/#getting-a-random-integer","text":"You use the randint() function to get a random integer between two numbers: from random import randint # Get an integer between 1 and 10 random_integer = randint ( 1 , 10 ) print ( random_integer ) # 3","title":"Getting a random integer"},{"location":"python/python-language/#getting-a-random-value-from-a-sequence","text":"You use the choice() function to get a random value from a sequence ( str , list , or tuple ): from random import choice names = [ \"daniel\" , \"alec\" , \"dima\" ] random_name = choice ( names ) print ( random_name ) # dima Further Reading The Python Standard Library The Python Standard Library - random","title":"Getting a random value from a sequence"},{"location":"python/python-language/#the-pass-statement","text":"You use the pass statement to act as a placeholder in a conditional statement or function definition. Programmers refer to this as \"stubbing-out\" the code block. No logic will run in the block a pass statement appears in. Python needs the pass statement because you can't have empty function or conditional blocks.","title":"The pass statement"},{"location":"python/python-language/#using-pass-in-a-function","text":"The pass statement can be used in a function definition as a placeholder before you write the main logic. This ensures your program still works but gives you a convenient way to see that you still need to implement some logic: def order_pizza (): pass","title":"Using pass in a function"},{"location":"python/python-language/#using-pass-in-a-conditional-statement","text":"The pass statement can also be used in a conditioal statement. This comes in handy if you know that you need a conditional statement but you don't have any of the logic ready yet: action = input ( \"What do you want to do? \" ) if action == \"Order Pizza\" : order_pizza () elif action == \"Order Tacos\" : pass","title":"Using pass in a conditional statement"},{"location":"python/python-language/#variables","text":"Variables assign a name to a value. The naming convention in Python is to use snake_case for variable names, and UPPER_SNAKE_CASE for named constants.","title":"Variables"},{"location":"python/python-language/#creating-a-variable","text":"You create a variable by assigning a name to a value using the assignment operator ( = ): my_name = \"Daniel\" my_age = 35","title":"Creating a variable"},{"location":"python/python-language/#creating-a-named-constant","text":"Named constants can replace magic numbers in your program. For example, what does 1 and 2 represent here? if user_choice == 1 : # Do something cool... elif user_choice == 2 : # Do another cool thing... 1 and 2 in the example above are magic numbers because we would have to hunt down their meaning by reading more of the program. If we instead create a named constant for each, the meaning is clearer: ORDER_TACOS = 1 ORDER_PIZZA = 2 if user_choice == ORDER_TACOS : # Order tacos... elif user_choice == ORDER_PIZZA : # Order pizza","title":"Creating a named constant"},{"location":"python/python-language/#updating-the-value-of-a-variable","text":"You can update the value stored in a variable like this: score = 0 score = score + 1 # 0 + 1 print ( score ) # 1 score = score + 1 # 1 + 1 print ( score ) # 2 The same works for decreasing the value of a variable: score = 3 score = score - 1 # 3 - 1 print ( score ) # 2 score = score - 1 # 2 - 1 print ( score ) # 1 There's also a shorthand notation: score = 0 score += 1 # 0 + 1 print ( score ) # 1 score += 1 # 1 + 1 print ( score ) # 2 score -= 1 # 2 - 1 print ( score ) # 1 score -= 1 # 1 - 1 print ( score ) # 0","title":"Updating the value of a variable"},{"location":"python/python-language/#global-variables","text":"Any variable created outside of function definition is considered a global variable. If you want to modify a global variable from inside a function definition, you need to use the global keyword: # This is a global variable score = 0 def update_score (): # Must do this to modify the variable global score # Now this is OK score = score + 1 # 1 Further Reading Real Python - Variables in Python Think Python - Variables, expressions and statements","title":"Global variables"},{"location":"python/wizardlib/","text":"Wizardlib \u00b6 Here, you'll find the documentation for CodeWizardHQ's Wizardlib Python library. We use this library in the following courses: Elementary Middle School Programming Fundamentals with Python Introduction to Programming with Python Python Game Development add_audio() \u00b6 Adds an audio file. Function signature: add_audio ( filename ) Parameters: filename ( str ) : The filename. Returns: The audio element. Example usage: audio_element = add_audio ( \"never-gonna-give-you-up.mp3\" ) add_background() \u00b6 Adds a background image. Function signature: add_background ( filename ) Parameters: filename ( str ): The filename. Example usage: add_background ( \"flying-cats.png\" ) Example output: add_background_audio() \u00b6 Adds background audio which plays when you click the Start button. Function signature: add_background_audio ( filename ) Parameters: filename ( str ): The filename. Example usage: add_background_audio ( \"never-gonna-give-you-up.mp3\" ) add_button() \u00b6 Adds a button. Function signature: add_button ( text ) Parameters: text ( str ): The text on the button. Returns: The button element. Example usage: button = add_button ( \"Click Me\" ) Example output: add_image() \u00b6 Adds an image to the page. Function signature: add_image ( filename , size ) Parameters: filename ( str ): The filename. size ( int ): The size, in pixels (optional). Returns: The image element. Example usage: taco_image = add_image ( \"taco.png\" ) Example output: add_text() \u00b6 Adds text to the page. Function signature: add_text ( text , size ) Parameters: text ( str ): The text to add to the page. size ( int ): The size, in pixels (optional, defaults to 18). Returns: The text element. Example usage: wizardlib_text = add_text ( \"Wizardlib is cool!\" ) Example output: add_text_input() \u00b6 Adds a text input to the page. Function signature: add_text_input ( placeholder ) Parameters: placeholder ( str ): The text to display in the input box. Returns: The text input element. Example usage: text_input = add_text_input ( \"Enter your password:\" ) Example output: animate_down() \u00b6 Animates the element down by the given distance . Can optionally change the amount of time the animation takes and whether the element animates down and up repeatedly. Function signature: animate_down ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate down and up (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_down ( taco_image , 100 ) Example output: animate_left() \u00b6 Animates the element left by the given distance . Can optionally change the amount of time the animation takes and whether the element animates left and right repeatedly. Function signature: animate_left ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate left and right (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_left ( taco_image , 100 ) Example output: animate_right() \u00b6 Animates the element right by the given distance . Can optionally change the amount of time the animation takes and whether the element animates right and left repeatedly. Function signature: animate_right ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate right and left (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_right ( taco_image , 100 ) Example output: animate_up() \u00b6 Animates the element up by the given distance . Can optionally change the amount of time the animation takes and whether the element animates up and down repeatedly. Function signature: animate_up ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate up and down (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_up ( taco_image , 100 ) Example output: check_collision() \u00b6 If element1 and element2 collide, function_to_run is called. Function signature: check_collision ( element1 , element2 , function_to_run ) Parameters: element1 ( element ): An element to check for collisions with. element2 ( element ): An element to check for collisions with. function_to_run ( function ): The function to run if element1 hits element2 . Example usage: def cat_caught_taco (): clear () text = add_text ( \"The kitty caught the taco!\" ) position_element ( text , \"center\" , \"center\" ) def move ( key ): if key == \"w\" : move_up ( cat_image , 10 ) elif key == \"a\" : move_left ( cat_image , 10 ) elif key == \"s\" : move_down ( cat_image , 10 ) elif key == \"d\" : move_right ( cat_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) cat_image = add_image ( \"flying-cats.jpg\" , 100 ) position_element ( cat_image , 700 , 300 ) keydown ( move ) check_collision ( taco_image , cat_image , cat_caught_taco ) Example output: clear() \u00b6 Clear the page of all elements. Function signature: clear () Example usage: def clear_page (): clear () after_clear_text = add_text ( \"Page was cleared\" , 32 ) position_element ( after_clear_text , \"center\" , \"center\" ) before_clear_text = add_text ( \"This is on the page before clearing\" , 32 ) position_element ( before_clear_text , \"center\" , \"center\" ) clear_page_button = add_button ( \"Clear Page\" ) position_element ( clear_page_button , \"center\" , 400 ) click ( clear_page_button , clear_page ) Example output: click() \u00b6 Call function_to_run when element is clicked. Function signature: click ( element , function_to_run ) Parameters: element ( element ): The element to click. function_to_run ( function ): The function to run if element is clicked. Example usage: def show_text (): text = add_text ( \"Button was clicked!\" , 32 ) position_element ( text , \"center\" , \"center\" ) button = add_button ( \"Click Me\" ) position_element ( button , \"center\" , 400 ) click ( button , show_text ) Example output: fade_in() \u00b6 Fades the element from invisible to visible. Function signature: fade_in ( element ) Parameters: element ( element ): The element to fade in. Example usage: def fade_text_in (): fade_in ( hidden_text ) hidden_text = add_text ( \"Hidden Text\" , 32 ) position_element ( hidden_text , \"center\" , 400 ) fade_out ( hidden_text ) fade_in_button = add_button ( \"Fade In\" ) position_element ( fade_in_button , \"center\" , \"center\" ) click ( fade_in_button , fade_text_in ) Example output: fade_out() \u00b6 Fades the element from visible to invisible. Function signature: fade_out ( element ) Parameters: element ( element ): The element to fade out. Example usage: def fade_text_out (): fade_out ( text_to_hide ) text_to_hide = add_text ( \"Text To Hide\" , 32 ) position_element ( text_to_hide , \"center\" , 400 ) fade_out_button = add_button ( \"Fade Out\" ) position_element ( fade_out_button , \"center\" , \"center\" ) click ( fade_out_button , fade_text_out ) Example output: get_input_value() \u00b6 Gets the value of the input element . Function signature: get_input_value ( element ) Parameters: element ( element ): The element to get the value from. Example usage: def login (): password = get_input_value ( password_input ) clear () if password == \"secretpassword\" : logged_in_text = add_text ( \"You've logged in!\" , 32 ) position_element ( logged_in_text , \"center\" , 400 ) password_input = add_text_input ( \"Enter your password\" ) position_element ( password_input , \"center\" , 400 ) login_button = add_button ( \"Login\" ) position_element ( login_button , \"center\" , \"center\" ) click ( login_button , login ) Example output: keydown() \u00b6 Runs function_to_run when a key is pressed. The key that is pressed will be passed as the first argument to function_to_run and will always be lowercase. Function signature: keydown ( function_to_run ) Parameters: function_to_run ( function ): The function to run when a key is pressed. Example usage: def key_logger ( pressed_key ): update_text ( last_key_pressed_text , f \"Last key pressed: { pressed_key } \" ) last_key_pressed_text = add_text ( \"Last key pressed: \" , 32 ) position_element ( last_key_pressed_text , \"center\" , 400 ) keydown ( key_logger ) Example output: move_down() \u00b6 Moves the element down by the given distance . Function signature: move_down ( element , distance ) Parameters: element ( element ): The element to move down. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output: move_left() \u00b6 Moves the element left by the given distance . Function signature: move_left ( element , distance ) Parameters: element ( element ): The element to move left. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output: move_right() \u00b6 Moves the element right by the given distance . Function signature: move_right ( element , distance ) Parameters: element ( element ): The element to move right. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output: move_up() \u00b6 Moves the element up by the given distance . Function signature: move_up ( element , distance ) Parameters: element ( element ): The element to move up. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output: play_audio() \u00b6 Plays the audio that element represents. Function signature: play_audio ( element ) Parameters: element ( element ): The audio element to play. Example usage: laugh_audio = add_audio ( \"laugh.mp3\" ) play_audio ( laugh_audio ) position_element() \u00b6 Position the element at the given x and y position. The x and y arguments can be any int , or one of the position helpers: Position Helper1 Helper2 Helper3 x \"left\" \"center\" \"right\" y \"top\" \"center\" \"bottom\" Function signature: position_element ( element , x , y ) Parameters: element ( element ): The element to position. x ( int | str ): The desired x-position of the element . y ( int | str ): The desired y-position of the element . Example usage: taco_image = add_image ( \"taco.jpg\" ) position_element ( taco_image , \"center\" , 400 ) set_background_color() \u00b6 Sets the background color of the page to color . Function signature: set_background_color ( color ) Parameters: color ( str ): The desired background color. Example usage: set_background_color ( \"darksalmon\" ) Example output: set_element_width() \u00b6 Sets the element to the given width . Function signature: set_element_width ( element , width ) Parameters: element ( element ): The element to adjust. width ( int ): The desired width of the element . Example usage: def shrink_taco (): set_element_width ( taco_image , 100 ) shrink_taco_button = add_button ( \"Shrink Taco\" ) position_element ( shrink_taco_button , \"center\" , \"center\" ) taco_image = add_image ( \"taco.jpg\" , 300 ) position_element ( taco_image , \"center\" , 200 ) click ( shrink_taco_button , shrink_taco ) Example output: set_font_size() \u00b6 Sets the font size of the element to the given font_size . Function signature: set_font_size ( element , font_size ) Parameters: element ( element ): The element to adjust. font_size ( int ): The desired font_size of the element . Example usage: def shrink_text (): set_font_size ( text_element , 25 ) shrink_text_button = add_button ( \"Shrink Font\" ) position_element ( shrink_text_button , \"center\" , \"center\" ) text_element = add_text ( \"Shrink this text!\" , 100 ) position_element ( text_element , \"center\" , 300 ) click ( shrink_text_button , shrink_text ) Example output: set_text_color() \u00b6 Sets the color of the text_element . Function signature: set_text_color ( text_element , color ) Parameters: text_element ( element ): The text element to adjust. color ( str ): The desired color of the text_element . Example usage: red_text = add_text ( \"This text is red\" , 32 ) set_text_color ( red_text , \"red\" ) Example output: set_text_decoration() \u00b6 Sets the text decoration of the given text_element . Function signature: set_text_decoration ( text_element , decoration_string ) Parameters: text_element ( element ): The text element to adjust. decoration_string ( str ): The decoration string for the CSS property. Example usage: text_element = add_text ( \"Never Gonna Give You Up\" , 42 ) set_text_decoration ( text_element , \"underline dotted blue\" ) Example output: Read about different options for the decoration_string here set_timeout() \u00b6 Runs function_to_run after time seconds. Function signature: set_timeout ( function_to_run , time ) Parameters: function_to_run ( function ): The function to run. time ( int ): The time (in seconds) to wait before running the function_to_run . Example usage: def show_boo_text (): boo_text = add_text ( \"BOO!!!\" , 100 ) position_element ( boo_text , \"center\" , 300 ) set_timeout ( show_boo_text , 3 ) Example output: update_text() \u00b6 Changes the text in text_element to the new_text . Function signature: update_text ( text_element , new_text ) Parameters: text_element ( element ): The element to adjust. new_text ( str ): The new text for the text_element . Example usage: def update_text_element (): update_text ( text_element , \"Updated text\" ) text_element = add_text ( \"Original text\" , 32 ) position_element ( text_element , \"center\" , 400 ) update_text_button = add_button ( \"Update Text\" ) position_element ( update_text_button , \"center\" , \"center\" ) click ( update_text_button , update_text_element ) Example output: remove_element() \u00b6 Removes the element from the page. Function signature: remove_element ( element ) Parameters: element ( element ): The element to remove. Example usage: def remove_taco (): remove_element ( taco_image ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) remove_taco_button = add_button ( \"Remove Taco\" ) position_element ( remove_taco_button , \"center\" , \"center\" ) click ( remove_taco_button , remove_taco ) Example output: rotate_element() \u00b6 Rotates the element by the given number of degrees . Function signature: rotate_element ( element , degrees ) Parameters: element ( element ): The element to rotate. degrees ( int ): The number of degrees to rotate the element . Example usage: def rotate_taco (): rotate_element ( taco_image , 180 ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) rotate_taco_button = add_button ( \"Rotate Taco\" ) position_element ( rotate_taco_button , \"center\" , \"center\" ) click ( rotate_taco_button , rotate_taco ) Example output: vanish() \u00b6 Removes the element from the page over a 1 second interval. Function signature: vanish ( element ) Parameters: element ( element ): The element to remove. Example usage: def vanish_taco (): vanish ( taco_image ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) vanish_taco_button = add_button ( \"Vanish Taco\" ) position_element ( vanish_taco_button , \"center\" , \"center\" ) click ( vanish_taco_button , vanish_taco ) Example output:","title":"Wizardlib"},{"location":"python/wizardlib/#wizardlib","text":"Here, you'll find the documentation for CodeWizardHQ's Wizardlib Python library. We use this library in the following courses: Elementary Middle School Programming Fundamentals with Python Introduction to Programming with Python Python Game Development","title":"Wizardlib"},{"location":"python/wizardlib/#add_audio","text":"Adds an audio file. Function signature: add_audio ( filename ) Parameters: filename ( str ) : The filename. Returns: The audio element. Example usage: audio_element = add_audio ( \"never-gonna-give-you-up.mp3\" )","title":"add_audio()"},{"location":"python/wizardlib/#add_background","text":"Adds a background image. Function signature: add_background ( filename ) Parameters: filename ( str ): The filename. Example usage: add_background ( \"flying-cats.png\" ) Example output:","title":"add_background()"},{"location":"python/wizardlib/#add_background_audio","text":"Adds background audio which plays when you click the Start button. Function signature: add_background_audio ( filename ) Parameters: filename ( str ): The filename. Example usage: add_background_audio ( \"never-gonna-give-you-up.mp3\" )","title":"add_background_audio()"},{"location":"python/wizardlib/#add_button","text":"Adds a button. Function signature: add_button ( text ) Parameters: text ( str ): The text on the button. Returns: The button element. Example usage: button = add_button ( \"Click Me\" ) Example output:","title":"add_button()"},{"location":"python/wizardlib/#add_image","text":"Adds an image to the page. Function signature: add_image ( filename , size ) Parameters: filename ( str ): The filename. size ( int ): The size, in pixels (optional). Returns: The image element. Example usage: taco_image = add_image ( \"taco.png\" ) Example output:","title":"add_image()"},{"location":"python/wizardlib/#add_text","text":"Adds text to the page. Function signature: add_text ( text , size ) Parameters: text ( str ): The text to add to the page. size ( int ): The size, in pixels (optional, defaults to 18). Returns: The text element. Example usage: wizardlib_text = add_text ( \"Wizardlib is cool!\" ) Example output:","title":"add_text()"},{"location":"python/wizardlib/#add_text_input","text":"Adds a text input to the page. Function signature: add_text_input ( placeholder ) Parameters: placeholder ( str ): The text to display in the input box. Returns: The text input element. Example usage: text_input = add_text_input ( \"Enter your password:\" ) Example output:","title":"add_text_input()"},{"location":"python/wizardlib/#animate_down","text":"Animates the element down by the given distance . Can optionally change the amount of time the animation takes and whether the element animates down and up repeatedly. Function signature: animate_down ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate down and up (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_down ( taco_image , 100 ) Example output:","title":"animate_down()"},{"location":"python/wizardlib/#animate_left","text":"Animates the element left by the given distance . Can optionally change the amount of time the animation takes and whether the element animates left and right repeatedly. Function signature: animate_left ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate left and right (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_left ( taco_image , 100 ) Example output:","title":"animate_left()"},{"location":"python/wizardlib/#animate_right","text":"Animates the element right by the given distance . Can optionally change the amount of time the animation takes and whether the element animates right and left repeatedly. Function signature: animate_right ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate right and left (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_right ( taco_image , 100 ) Example output:","title":"animate_right()"},{"location":"python/wizardlib/#animate_up","text":"Animates the element up by the given distance . Can optionally change the amount of time the animation takes and whether the element animates up and down repeatedly. Function signature: animate_up ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate up and down (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_up ( taco_image , 100 ) Example output:","title":"animate_up()"},{"location":"python/wizardlib/#check_collision","text":"If element1 and element2 collide, function_to_run is called. Function signature: check_collision ( element1 , element2 , function_to_run ) Parameters: element1 ( element ): An element to check for collisions with. element2 ( element ): An element to check for collisions with. function_to_run ( function ): The function to run if element1 hits element2 . Example usage: def cat_caught_taco (): clear () text = add_text ( \"The kitty caught the taco!\" ) position_element ( text , \"center\" , \"center\" ) def move ( key ): if key == \"w\" : move_up ( cat_image , 10 ) elif key == \"a\" : move_left ( cat_image , 10 ) elif key == \"s\" : move_down ( cat_image , 10 ) elif key == \"d\" : move_right ( cat_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) cat_image = add_image ( \"flying-cats.jpg\" , 100 ) position_element ( cat_image , 700 , 300 ) keydown ( move ) check_collision ( taco_image , cat_image , cat_caught_taco ) Example output:","title":"check_collision()"},{"location":"python/wizardlib/#clear","text":"Clear the page of all elements. Function signature: clear () Example usage: def clear_page (): clear () after_clear_text = add_text ( \"Page was cleared\" , 32 ) position_element ( after_clear_text , \"center\" , \"center\" ) before_clear_text = add_text ( \"This is on the page before clearing\" , 32 ) position_element ( before_clear_text , \"center\" , \"center\" ) clear_page_button = add_button ( \"Clear Page\" ) position_element ( clear_page_button , \"center\" , 400 ) click ( clear_page_button , clear_page ) Example output:","title":"clear()"},{"location":"python/wizardlib/#click","text":"Call function_to_run when element is clicked. Function signature: click ( element , function_to_run ) Parameters: element ( element ): The element to click. function_to_run ( function ): The function to run if element is clicked. Example usage: def show_text (): text = add_text ( \"Button was clicked!\" , 32 ) position_element ( text , \"center\" , \"center\" ) button = add_button ( \"Click Me\" ) position_element ( button , \"center\" , 400 ) click ( button , show_text ) Example output:","title":"click()"},{"location":"python/wizardlib/#fade_in","text":"Fades the element from invisible to visible. Function signature: fade_in ( element ) Parameters: element ( element ): The element to fade in. Example usage: def fade_text_in (): fade_in ( hidden_text ) hidden_text = add_text ( \"Hidden Text\" , 32 ) position_element ( hidden_text , \"center\" , 400 ) fade_out ( hidden_text ) fade_in_button = add_button ( \"Fade In\" ) position_element ( fade_in_button , \"center\" , \"center\" ) click ( fade_in_button , fade_text_in ) Example output:","title":"fade_in()"},{"location":"python/wizardlib/#fade_out","text":"Fades the element from visible to invisible. Function signature: fade_out ( element ) Parameters: element ( element ): The element to fade out. Example usage: def fade_text_out (): fade_out ( text_to_hide ) text_to_hide = add_text ( \"Text To Hide\" , 32 ) position_element ( text_to_hide , \"center\" , 400 ) fade_out_button = add_button ( \"Fade Out\" ) position_element ( fade_out_button , \"center\" , \"center\" ) click ( fade_out_button , fade_text_out ) Example output:","title":"fade_out()"},{"location":"python/wizardlib/#get_input_value","text":"Gets the value of the input element . Function signature: get_input_value ( element ) Parameters: element ( element ): The element to get the value from. Example usage: def login (): password = get_input_value ( password_input ) clear () if password == \"secretpassword\" : logged_in_text = add_text ( \"You've logged in!\" , 32 ) position_element ( logged_in_text , \"center\" , 400 ) password_input = add_text_input ( \"Enter your password\" ) position_element ( password_input , \"center\" , 400 ) login_button = add_button ( \"Login\" ) position_element ( login_button , \"center\" , \"center\" ) click ( login_button , login ) Example output:","title":"get_input_value()"},{"location":"python/wizardlib/#keydown","text":"Runs function_to_run when a key is pressed. The key that is pressed will be passed as the first argument to function_to_run and will always be lowercase. Function signature: keydown ( function_to_run ) Parameters: function_to_run ( function ): The function to run when a key is pressed. Example usage: def key_logger ( pressed_key ): update_text ( last_key_pressed_text , f \"Last key pressed: { pressed_key } \" ) last_key_pressed_text = add_text ( \"Last key pressed: \" , 32 ) position_element ( last_key_pressed_text , \"center\" , 400 ) keydown ( key_logger ) Example output:","title":"keydown()"},{"location":"python/wizardlib/#move_down","text":"Moves the element down by the given distance . Function signature: move_down ( element , distance ) Parameters: element ( element ): The element to move down. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output:","title":"move_down()"},{"location":"python/wizardlib/#move_left","text":"Moves the element left by the given distance . Function signature: move_left ( element , distance ) Parameters: element ( element ): The element to move left. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output:","title":"move_left()"},{"location":"python/wizardlib/#move_right","text":"Moves the element right by the given distance . Function signature: move_right ( element , distance ) Parameters: element ( element ): The element to move right. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output:","title":"move_right()"},{"location":"python/wizardlib/#move_up","text":"Moves the element up by the given distance . Function signature: move_up ( element , distance ) Parameters: element ( element ): The element to move up. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output:","title":"move_up()"},{"location":"python/wizardlib/#play_audio","text":"Plays the audio that element represents. Function signature: play_audio ( element ) Parameters: element ( element ): The audio element to play. Example usage: laugh_audio = add_audio ( \"laugh.mp3\" ) play_audio ( laugh_audio )","title":"play_audio()"},{"location":"python/wizardlib/#position_element","text":"Position the element at the given x and y position. The x and y arguments can be any int , or one of the position helpers: Position Helper1 Helper2 Helper3 x \"left\" \"center\" \"right\" y \"top\" \"center\" \"bottom\" Function signature: position_element ( element , x , y ) Parameters: element ( element ): The element to position. x ( int | str ): The desired x-position of the element . y ( int | str ): The desired y-position of the element . Example usage: taco_image = add_image ( \"taco.jpg\" ) position_element ( taco_image , \"center\" , 400 )","title":"position_element()"},{"location":"python/wizardlib/#set_background_color","text":"Sets the background color of the page to color . Function signature: set_background_color ( color ) Parameters: color ( str ): The desired background color. Example usage: set_background_color ( \"darksalmon\" ) Example output:","title":"set_background_color()"},{"location":"python/wizardlib/#set_element_width","text":"Sets the element to the given width . Function signature: set_element_width ( element , width ) Parameters: element ( element ): The element to adjust. width ( int ): The desired width of the element . Example usage: def shrink_taco (): set_element_width ( taco_image , 100 ) shrink_taco_button = add_button ( \"Shrink Taco\" ) position_element ( shrink_taco_button , \"center\" , \"center\" ) taco_image = add_image ( \"taco.jpg\" , 300 ) position_element ( taco_image , \"center\" , 200 ) click ( shrink_taco_button , shrink_taco ) Example output:","title":"set_element_width()"},{"location":"python/wizardlib/#set_font_size","text":"Sets the font size of the element to the given font_size . Function signature: set_font_size ( element , font_size ) Parameters: element ( element ): The element to adjust. font_size ( int ): The desired font_size of the element . Example usage: def shrink_text (): set_font_size ( text_element , 25 ) shrink_text_button = add_button ( \"Shrink Font\" ) position_element ( shrink_text_button , \"center\" , \"center\" ) text_element = add_text ( \"Shrink this text!\" , 100 ) position_element ( text_element , \"center\" , 300 ) click ( shrink_text_button , shrink_text ) Example output:","title":"set_font_size()"},{"location":"python/wizardlib/#set_text_color","text":"Sets the color of the text_element . Function signature: set_text_color ( text_element , color ) Parameters: text_element ( element ): The text element to adjust. color ( str ): The desired color of the text_element . Example usage: red_text = add_text ( \"This text is red\" , 32 ) set_text_color ( red_text , \"red\" ) Example output:","title":"set_text_color()"},{"location":"python/wizardlib/#set_text_decoration","text":"Sets the text decoration of the given text_element . Function signature: set_text_decoration ( text_element , decoration_string ) Parameters: text_element ( element ): The text element to adjust. decoration_string ( str ): The decoration string for the CSS property. Example usage: text_element = add_text ( \"Never Gonna Give You Up\" , 42 ) set_text_decoration ( text_element , \"underline dotted blue\" ) Example output: Read about different options for the decoration_string here","title":"set_text_decoration()"},{"location":"python/wizardlib/#set_timeout","text":"Runs function_to_run after time seconds. Function signature: set_timeout ( function_to_run , time ) Parameters: function_to_run ( function ): The function to run. time ( int ): The time (in seconds) to wait before running the function_to_run . Example usage: def show_boo_text (): boo_text = add_text ( \"BOO!!!\" , 100 ) position_element ( boo_text , \"center\" , 300 ) set_timeout ( show_boo_text , 3 ) Example output:","title":"set_timeout()"},{"location":"python/wizardlib/#update_text","text":"Changes the text in text_element to the new_text . Function signature: update_text ( text_element , new_text ) Parameters: text_element ( element ): The element to adjust. new_text ( str ): The new text for the text_element . Example usage: def update_text_element (): update_text ( text_element , \"Updated text\" ) text_element = add_text ( \"Original text\" , 32 ) position_element ( text_element , \"center\" , 400 ) update_text_button = add_button ( \"Update Text\" ) position_element ( update_text_button , \"center\" , \"center\" ) click ( update_text_button , update_text_element ) Example output:","title":"update_text()"},{"location":"python/wizardlib/#remove_element","text":"Removes the element from the page. Function signature: remove_element ( element ) Parameters: element ( element ): The element to remove. Example usage: def remove_taco (): remove_element ( taco_image ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) remove_taco_button = add_button ( \"Remove Taco\" ) position_element ( remove_taco_button , \"center\" , \"center\" ) click ( remove_taco_button , remove_taco ) Example output:","title":"remove_element()"},{"location":"python/wizardlib/#rotate_element","text":"Rotates the element by the given number of degrees . Function signature: rotate_element ( element , degrees ) Parameters: element ( element ): The element to rotate. degrees ( int ): The number of degrees to rotate the element . Example usage: def rotate_taco (): rotate_element ( taco_image , 180 ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) rotate_taco_button = add_button ( \"Rotate Taco\" ) position_element ( rotate_taco_button , \"center\" , \"center\" ) click ( rotate_taco_button , rotate_taco ) Example output:","title":"rotate_element()"},{"location":"python/wizardlib/#vanish","text":"Removes the element from the page over a 1 second interval. Function signature: vanish ( element ) Parameters: element ( element ): The element to remove. Example usage: def vanish_taco (): vanish ( taco_image ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) vanish_taco_button = add_button ( \"Vanish Taco\" ) position_element ( vanish_taco_button , \"center\" , \"center\" ) click ( vanish_taco_button , vanish_taco ) Example output:","title":"vanish()"},{"location":"sql/sql-language/","text":"SQL Language \u00b6 SQL (Structured Query Language) is a language used to interact with databases. We use SQL in the following courses at CodeWizardsHQ: Middle School High School Intro to Databases APIs and Databases Mastering APIs Professional Web App Development Mastering Databases Capstone 2 Capstone 3 Mastering MVC Framework Object Relational Mapping Capstone 3 In this section of our documentation, you'll find references to most of the core SQL language features that we use in our CodeWizardsHQ courses. All of our courses interact with databases using Python + SQL, so we'll show the core SQL syntax first and then give a working example in Python. You'll also find many Further reading sections, which pull from these excellent SQL/Python resources: SQLBolt SQLite Tutorial Python.org Documentation What Is A Relational Database? \u00b6 In a relational database, you structure your data in tables made up of rows and columns, kind of like an Excel spreadsheet. You can combine data from multiple tables using JOIN s or just pull data from a single table. For example, consider the two tables below: users table user_id username password 1 djs mypa$$word 2 django w0ff 3 alecg c0de teachers table teacher_id user_id username is_admin 1 1 djs 1 2 3 alecg 0 We could get the username and password of all users that are teachers and admins like this: SELECT users . username , users . password FROM users JOIN teachers USING ( user_id ) WHERE teachers . is_admin = 1 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 djs \u2502 mypa$$word \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 There are many different relational database implementations (MySQL, Postgres, etc.) but we use SQLite at CodeWizardsHQ because it is easy to work with and supports most of the common SQL features. Why Do We Need SQL? \u00b6 When working with a database, you need a way to talk to the database and get data into/out of it. SQL is the language we use to do this in a SQLite database. SQL allows you to express relationships in a database in a structured way. Why Do We Use Python And SQL Together? \u00b6 Although you can use raw SQL commands to talk to a SQL database, we use Python at CodeWizardsHQ because often you'll interact with databases this way in the real world. Think about apps you've used that store data about you between visits. That's using a database and a programming language (like Python) to interact with the database! The SQL portions of a Python DB query will be a Python str . Consider this INSERT statement in raw SQL: INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\"); To run that from Python, we would do this: import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\"); \"\"\" sql . execute ( query ) con . commit () The important thing to remember is that the query is just a str that you pass to sql.execute() . If you make a change to a table in the database (as we did above) then you use the con.commit() method to save the change (although in some CWHQ courses you merely view the results without changing the database). The semi-colon ( ; ) isn't required when using a query from Python, but we'll keep it for consistency between the raw SQL examples. Bounded Parameters \u00b6 When accepting user input in a Python program that modifies a SQL database, you'll use ? as placeholders for any user-entered data and then pass the data to sql.execute() as a list like this: import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () username = input ( \"Enter your username: \" ) password = input ( \"Enter your password: \" ) # Use `?` for any user-entered data query = \"\"\" INSERT INTO users (username, password) VALUES (?, ?); \"\"\" # The `username` and `password` are bound to the `?` in the `query` sql . execute ( query , [ username , password ]) con . commit () Further Reading Python Documentation - sqlite3 Aggregate Functions \u00b6 Just like programming languages such as Python and JavaScript, SQL has functions to perform common tasks on result set called Aggregate Functions . The example below shows the different Aggregate Functions we use in CWHQ courses. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the average price of all products SELECT AVG ( product_price ) AS average_product_price FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 average_product_price \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 800 . 7525 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Count the number of products SELECT COUNT ( * ) AS total_products FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 total_products \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the most expensive product SELECT product_name || \" $\" || MAX ( product_price ) AS most_expensive_product FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 most_expensive_product \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 MacBook Pro 16 $ 2100 . 5 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the least expensive product SELECT product_name || \" $\" || MIN ( product_price ) AS least_expensive_product FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 least_expensive_product \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Logitech M1 $ 34 . 99 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the total cost of all products combined SELECT SUM ( product_price ) AS total_cost_all_products FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 total_cost_all_products \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 6406 . 02 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT AVG(product_price) AS average_product_price FROM products; \"\"\" print ( \" \\n Average cost of all products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT COUNT(*) AS total_products FROM products; \"\"\" print ( \" \\n Total number of products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_name || \" $\" || MAX(product_price) AS most_expensive_product FROM products; \"\"\" print ( \" \\n Most expensive product:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_name || \" $\" || MIN(product_price) AS least_expensive_product FROM products; \"\"\" print ( \" \\n Least expensive product:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT SUM(product_price) AS total_cost_all_products FROM products; \"\"\" print ( \" \\n Total cost of all products:\" ) execute_query_and_display_rows ( query ) Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Average cost of all products: (800.7524999999999,) Total number of products: (8,) Most expensive product: ('MacBook Pro 16 $2100.5',) Least expensive product: ('Logitech M1 $34.99',) Total cost of all products: (6406.0199999999995,) Further Reading SQLBolt - Queries with aggregates - Pt. 1 SQLite Tutorial - SQLite Aggregate Functions ALTER TABLE \u00b6 After creating a table, you may need to add or rename a column. The ALTER TABLE command allows you to do this. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Renaming a column ALTER TABLE users RENAME username TO teacher_name ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 teacher_name \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Adding a new column with a default value for each row ALTER TABLE users ADD is_admin INTEGER DEFAULT 0 ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 teacher_name \u2502 password \u2502 is_admin \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 0 \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 0 \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () def display_all_users_and_column_names (): # Don't worry about this, it just shows us the column names query = \"\"\" SELECT name FROM PRAGMA_TABLE_INFO('users'); \"\"\" result = sql . execute ( query ) print ( \" \\n Column names:\" ) print ( * result . fetchall ()) query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( \" \\n Rows:\" ) print ( rows ) display_all_users_and_column_names () query = \"\"\" ALTER TABLE users RENAME username TO teacher_name; \"\"\" sql . execute ( query ) display_all_users_and_column_names () query = \"\"\" ALTER TABLE users ADD is_admin INTEGER DEFAULT 0; \"\"\" sql . execute ( query ) display_all_users_and_column_names () # Make sure to commit the changes to the DB con . commit () Output Column names: ('user_id',) ('username',) ('password',) Rows: [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Column names: ('user_id',) ('teacher_name',) ('password',) Rows: [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Column names: ('user_id',) ('teacher_name',) ('password',) ('is_admin',) Rows: [(1, 'djs', 'mypa$$word', 0), (2, 'django', 'w0ff', 0), (3, 'alecg', 'c0de', 0)] Further Reading SQLBolt - Altering Tables SQLite Tutorial - SQLite Alter Table AS \u00b6 The AS clause is used to alias a column or table name. We only use it at CWHQ for column aliases though, so that's all that is covered here. Aliasing Column Names \u00b6 When aliasing column names, the AS clause comes in handy when you are using the concatenation operator ( || ) to combine multiple columns or when using Aggregate Functions to perform some calculation on a group of rows. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 /* * Build a result set that combines `product_name` and `product_price` * into a single column */ SELECT product_name || \" : $\" || product_price AS product_description FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_description \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Dell XPS 17 : $ 1599 . 99 \u2502 \u2502 Blue Snowball Microphone : $ 99 . 5 \u2502 \u2502 System76 Thelio B1 : $ 1255 . 55 \u2502 \u2502 Logitech M1 : $ 34 . 99 \u2502 \u2502 Seagate S1 SSD : $ 88 . 75 \u2502 \u2502 MacBook Pro 16 : $ 2100 . 5 \u2502 \u2502 Rode Z28 : $ 275 . 99 \u2502 \u2502 Lenovo ThinkPad : $ 950 . 75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the total cost of all the computers in the `products` table SELECT SUM ( product_price ) AS total_price_computers FROM products WHERE product_category = \"Computers\" ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 total_price_computers \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 5906 . 79 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_name || \" : $\" || product_price AS product_description FROM products; \"\"\" print ( \" \\n Formatted product descriptions:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT SUM(product_price) AS total_price_computers FROM products WHERE product_category = \"Computers\"; \"\"\" print ( \" \\n The total price of all computers in the `products` table:\" ) execute_query_and_display_rows ( query ) Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Formatted product descriptions: ('Dell XPS 17 : $1599.99',) ('Blue Snowball Microphone : $99.5',) ('System76 Thelio B1 : $1255.55',) ('Logitech M1 : $34.99',) ('Seagate S1 SSD : $88.75',) ('MacBook Pro 16 : $2100.5',) ('Rode Z28 : $275.99',) ('Lenovo ThinkPad : $950.75',) The total price of all computers in the `products` table: (5906.79,) Further Reading SQLBolt - Queries with expressions Concatenation \u00b6 SQLite uses the || operator for string concatenation. This is used at CWHQ to combine column names together (possibly with other string data) to merge the data from multiple columns into a single column. This is often used in conjunction with the AS clause to rename the combined columns. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 /* * Build a result set that combines `product_name` and `product_price` * into a single column using `||` and `AS` */ SELECT product_name || \" : $\" || product_price AS product_description FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_description \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Dell XPS 17 : $ 1599 . 99 \u2502 \u2502 Blue Snowball Microphone : $ 99 . 5 \u2502 \u2502 System76 Thelio B1 : $ 1255 . 55 \u2502 \u2502 Logitech M1 : $ 34 . 99 \u2502 \u2502 Seagate S1 SSD : $ 88 . 75 \u2502 \u2502 MacBook Pro 16 : $ 2100 . 5 \u2502 \u2502 Rode Z28 : $ 275 . 99 \u2502 \u2502 Lenovo ThinkPad : $ 950 . 75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_name || \" : $\" || product_price AS product_description FROM products; \"\"\" Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Formatted product descriptions: ('Dell XPS 17 : $1599.99',) ('Blue Snowball Microphone : $99.5',) ('System76 Thelio B1 : $1255.55',) ('Logitech M1 : $34.99',) ('Seagate S1 SSD : $88.75',) ('MacBook Pro 16 : $2100.5',) ('Rode Z28 : $275.99',) ('Lenovo ThinkPad : $950.75',) CREATE TABLE \u00b6 Relational databases are made up of tables, and you'll need to create tables to hold your data if we don't provide one for you. We often use IF NOT EXISTS in CWHQ courses when creating a table because we'll run the statement every time our Python script runs, and an error would occur if you tried to create a table that already existed. Most tables should also have a PRIMARY KEY integer to uniquely identify each row of data. The general format of a CREATE TABLE statement is: CREATE TABLE IF NOT EXISTS table_name ( column_one DATATYPE OPTIONAL_CONSTRAINTS ..., column_two DATATYPE OPTIONAL_CONSTRAINTS ..., column_three DATATYPE OPTIONAL_CONSTRAINTS ... -- etc... ); Note that each column definition is separated by a comma ( , ) but the final column definition should not have a comma. Here's an example of a CREATE TABLE statement for the users table from the What Is A Relational Database? section earlier in these docs: Raw SQL CREATE TABLE IF NOT EXISTS users ( user_id INTEGER PRIMARY KEY AUTOINCREMENT , username TEXT UNIQUE NOT NULL , password TEXT NOT NULL ); Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" CREATE TABLE IF NOT EXISTS users ( user_id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE NOT NULL, password TEXT NOT NULL ); \"\"\" sql . execute ( query ) Column Datatypes \u00b6 When writing column definitions, your column can be one of 5 storage classes (which are a generic datatype) in SQLite: NULL : Represents \"nothingness\" INTEGER : Whole numbers REAL : Decimal numbers TEXT : Text data BLOB : Binary data (like images, music, etc.) You'll mainly use INTEGER and TEXT for CWHQ projects. Column Constraints \u00b6 Besides the datatype, you can also put additional constraints on a column definition to enforce that a column is UNIQUE , or NOT NULL , or even a PRIMARY KEY . You can see all of those at work in this example: CREATE TABLE IF NOT EXISTS users ( user_id INTEGER PRIMARY KEY AUTOINCREMENT , username TEXT UNIQUE NOT NULL , password TEXT NOT NULL ); Further Reading SQLBolt - Creating tables SQLite Tutorial - SQLite Create Table DELETE \u00b6 To remove data in a SQL table, use the DELETE statement. Make sure to use a WHERE clause so that you only delete the rows you intend to. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 DELETE FROM users WHERE user_id = 3 ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" DELETE FROM users WHERE id = 3; \"\"\" sql . execute ( query ) # Make sure to commit the changes to the DB con . commit () display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff')] Deleting all rows from a table \u00b6 If you leave out the WHERE clause in a DELETE statement, you remove all rows from the table. This is a handy way to clear out all the rows if you need to start with a fresh table: Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 DELETE FROM users ; SELECT * FROM users ; -- nothing returned because the table is empty Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" DELETE FROM users; \"\"\" sql . execute ( query ) # Make sure to commit the changes to the DB con . commit () display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [] Further Reading SQLBolt - Deleting rows SQLite Tutorial - SQLite Delete DISTINCT \u00b6 If you want to get unique column values for a set of rows, use the DISTINCT clause of a SELECT query For example, in the products table below, it may be hard at a glance to see what categories are present, but with DISTINCT it's easy to see we only have three! Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get only the unique categories for our products. SELECT DISTINCT product_category FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Computers \u2502 \u2502 Microphones \u2502 \u2502 Accessories \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () query = \"\"\" SELECT * FROM products; \"\"\" result = sql . execute ( query ) rows = result . fetchall () # Easier to read if we loop then print each row since there are 8 rows. for row in rows : print ( row ) query = \"\"\" SELECT DISTINCT product_category FROM products; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( \" \\n Distinct categories:\" ) print ( rows ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Distinct categories: [('Computers',), ('Microphones',), ('Accessories',)] Further Reading SQLBolt - Filtering and sorting Query results SQLite Tutorial - SQLite Select Distinct DROP TABLE \u00b6 The DROP TABLE query deletes an entire table and it's definition from the database. You should usually use the IF EXISTS clause with this query to ensure an error isn't thrown if the table you're trying to drop doesn't exist. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 DROP TABLE IF EXISTS users ; SELECT * FROM users ; -- Error: no such table: users Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" DROP TABLE IF EXISTS users; \"\"\" sql . execute ( query ) # This will throw an error since the `users` table doesn't exist. display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Traceback (most recent call last): File \"/home/daniel/documentation-examples/main.py\", line 27, in <module> display_all_users() File \"/home/daniel/documentation-examples/main.py\", line 12, in display_all_users result = sql.execute(query) sqlite3.OperationalError: no such table: users Further Reading SQLBolt - Dropping tables SQLite Tutorial - SQLite Drop Table GROUP BY \u00b6 If you need to \"flatten\" the results of a SELECT query, the GROUP BY clause is helpful. It let's you group the resulting rows by a particular column, effectively filtering out duplicate rows that have the same column value. You almost always use GROUP BY with an Aggregate Function to perform some sort of calculation on a group of rows with similar column values, but you can also use it to filter a column by unique values (as we do to get the unique product categories below): Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the unique product categories SELECT product_category FROM products GROUP BY product_category ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Accessories \u2502 \u2502 Computers \u2502 \u2502 Microphones \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the number of products in each `product_category` SELECT product_category , COUNT ( * ) AS num_products_per_category FROM products GROUP BY product_category ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_category \u2502 num_products_per_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Accessories \u2502 2 \u2502 \u2502 Computers \u2502 4 \u2502 \u2502 Microphones \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_category FROM products GROUP BY product_category; \"\"\" print ( \" \\n Unique `product_categories`:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_category, COUNT(*) AS num_products_per_category FROM products GROUP BY product_category; \"\"\" print ( \" \\n Number of products per category:\" ) execute_query_and_display_rows ( query ) Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Unique `product_categories`: ('Accessories',) ('Computers',) ('Microphones',) Number of products per category: ('Accessories', 2) ('Computers', 4) ('Microphones', 2) Further Reading SQLBolt - Queries with aggregates - Pt. 1 SQLite Tutorial - SQLite Group By INSERT \u00b6 Once you've created a table, you'll want to put data in it. The INSERT statement is used to add data to a SQL table. You list the column names in the () after the table name. Consider this users table definition: CREATE TABLE IF NOT EXISTS users ( user_id INTEGER PRIMARY KEY AUTOINCREMENT , username TEXT UNIQUE NOT NULL , password TEXT NOT NULL ); If we wanted to fill this table with a few users, we would leave out the user_id in the () as this table has the user_id set to AUTOINCREMENT . We would need to add the other two column names in whatever order we wished, though. Raw SQL INSERT INTO users ( username , password ) VALUES ( \"djs\" , \"mypa$$word\" ); INSERT INTO users ( username , password ) VALUES ( \"django\" , \"w0ff\" ); INSERT INTO users ( username , password ) VALUES ( \"alecg\" , \"c0de\" ); SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\"); \"\"\" sql . execute ( query ) query = \"\"\" INSERT INTO users (username, password) VALUES (\"django\", \"w0ff\"); \"\"\" sql . execute ( query ) query = \"\"\" INSERT INTO users (username, password) VALUES (\"alecg\", \"c0de\"); \"\"\" sql . execute ( query ) # Make sure the changes are saved to the DB. con . commit () query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Inserting multiple rows into a table \u00b6 If you want to insert multiple rows into a database table, you can use a single INSERT statement and group each row in () . Raw SQL INSERT INTO users ( username , password ) VALUES ( \"djs\" , \"mypa$$word\" ), ( \"django\" , \"w0ff\" ), ( \"alecg\" , \"c0de\" ); SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\"), (\"django\", \"w0ff\"), (\"alecg\", \"c0de\"); \"\"\" sql . execute ( query ) con . commit () query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Further Reading SQLBolt - Inserting rows SQLite Tutorial - SQLite Insert JOIN \u00b6 Being able to combine data from related tables is one of the things that makes a relational database like SQLite so powerful. Defining Table Relationships \u00b6 Before you can JOIN two tables, they must share a common key. Consider the following two table schemas, which represent data about authors and books: CREATE TABLE authors ( author_id INTEGER PRIMARY KEY AUTOINCREMENT , author_name TEXT NOT NULL ); CREATE TABLE books ( book_id INTEGER PRIMARY KEY AUTOINCREMENT , author_id INTEGER NOT NULL REFERENCES authors ( author_id ), -- the Foreign Key relationship book_title TEXT UNIQUE NOT NULL ); We can relate the two tables with the REFERENCES keyword. The author_id is known as a Foreign Key in the books table because it's merely pointing to the PRIMARY KEY of the authors table. It's the author_id shared between the authors and books tables that allows us to JOIN them together. JOINING Tables Together \u00b6 Now that we have an established relationship between our authors and books tables, we can JOIN them together. We'll preface each column name with the table it references since we'll be referring to multiple tables like this table_name.column_name . This isn't always strictly required, but it makes it easier to understand which table each column references in the query. Raw SQL SELECT * FROM authors ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 author_id \u2502 author_name \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 J . D . Salinger \u2502 \u2502 2 \u2502 Harper Lee \u2502 \u2502 3 \u2502 Truman Capote \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 SELECT * FROM books ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 book_id \u2502 author_id \u2502 book_title \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 2 \u2502 To Kill a Mockingbird \u2502 \u2502 2 \u2502 3 \u2502 In Cold Blood \u2502 \u2502 3 \u2502 1 \u2502 The Catcher in the Rye \u2502 \u2502 4 \u2502 3 \u2502 Breakfast at Tiffanys \u2502 \u2502 5 \u2502 1 \u2502 Franny and Zooey \u2502 \u2502 6 \u2502 3 \u2502 Summer Crossing \u2502 \u2502 7 \u2502 2 \u2502 Go Set a Watchman \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Join the `authors` and `books` tables together SELECT authors . author_name , books . book_title FROM authors JOIN books ON authors . author_id = books . author_id ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 author_name \u2502 book_title \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Harper Lee \u2502 To Kill a Mockingbird \u2502 \u2502 Truman Capote \u2502 In Cold Blood \u2502 \u2502 J . D . Salinger \u2502 The Catcher in the Rye \u2502 \u2502 Truman Capote \u2502 Breakfast at Tiffanys \u2502 \u2502 J . D . Salinger \u2502 Franny and Zooey \u2502 \u2502 Truman Capote \u2502 Summer Crossing \u2502 \u2502 Harper Lee \u2502 Go Set a Watchman \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Getting a bit fancier by ordering by `author_name` SELECT authors . author_name , books . book_title FROM authors JOIN books ON authors . author_id = books . author_id ORDER BY authors . author_name ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 author_name \u2502 book_title \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Harper Lee \u2502 To Kill a Mockingbird \u2502 \u2502 Harper Lee \u2502 Go Set a Watchman \u2502 \u2502 J . D . Salinger \u2502 The Catcher in the Rye \u2502 \u2502 J . D . Salinger \u2502 Franny and Zooey \u2502 \u2502 Truman Capote \u2502 In Cold Blood \u2502 \u2502 Truman Capote \u2502 Breakfast at Tiffanys \u2502 \u2502 Truman Capote \u2502 Summer Crossing \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"library-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM authors; \"\"\" print ( \"All rows in the `authors` table:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT * FROM books; \"\"\" print ( \" \\n All rows in the `books` table:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT authors.author_name, books.book_title FROM authors JOIN books ON authors.author_id = books.author_id; \"\"\" print ( \" \\n Joining the `authors` and `books` tables:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT authors.author_name, books.book_title FROM authors JOIN books ON authors.author_id = books.author_id ORDER BY authors.author_name; \"\"\" print ( \" \\n Joining and sorting the `authors` and `books` tables:\" ) execute_query_and_display_rows ( query ) Output All rows in the `authors` table: (1, 'J.D. Salinger') (2, 'Harper Lee') (3, 'Truman Capote') All rows in the `books` table: (1, 2, 'To Kill a Mockingbird') (2, 3, 'In Cold Blood') (3, 1, 'The Catcher in the Rye') (4, 3, \"Breakfast at Tiffany's\") (5, 1, 'Franny and Zooey') (6, 3, 'Summer Crossing') (7, 2, 'Go Set a Watchman') Joining the `authors` and `books` tables: ('Harper Lee', 'To Kill a Mockingbird') ('Truman Capote', 'In Cold Blood') ('J.D. Salinger', 'The Catcher in the Rye') ('Truman Capote', \"Breakfast at Tiffany's\") ('J.D. Salinger', 'Franny and Zooey') ('Truman Capote', 'Summer Crossing') ('Harper Lee', 'Go Set a Watchman') Joining and sorting the `authors` and `books` tables: ('Harper Lee', 'To Kill a Mockingbird') ('Harper Lee', 'Go Set a Watchman') ('J.D. Salinger', 'The Catcher in the Rye') ('J.D. Salinger', 'Franny and Zooey') ('Truman Capote', 'In Cold Blood') ('Truman Capote', \"Breakfast at Tiffany's\") ('Truman Capote', 'Summer Crossing') The USING() shorthand \u00b6 When using a JOIN , you don't have to use the ON table.column_name = other_table.column_name syntax if the column names are the same in both tables. We could rewrite the last JOIN from the previous example in a shorter way with USING() like so: SELECT authors . author_name , books . book_title FROM authors JOIN books USING ( author_id ) -- This is a nice shorthand ORDER BY authors . author_name ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 author_name \u2502 book_title \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Harper Lee \u2502 To Kill a Mockingbird \u2502 \u2502 Harper Lee \u2502 Go Set a Watchman \u2502 \u2502 J . D . Salinger \u2502 The Catcher in the Rye \u2502 \u2502 J . D . Salinger \u2502 Franny and Zooey \u2502 \u2502 Truman Capote \u2502 In Cold Blood \u2502 \u2502 Truman Capote \u2502 Breakfast at Tiffanys \u2502 \u2502 Truman Capote \u2502 Summer Crossing \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Further Reading SQLBolt - Multi-table queries with JOINs SQLite Tutorial - SQLite Join LIMIT \u00b6 Sometimes, you may want to get a limited number of rows back from a SELECT query. The LIMIT clause allows you to do this: Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Only get the first 3 products in the table (by `product_id`) SELECT * FROM products LIMIT 3 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_rows ( query ) query = \"\"\" SELECT * FROM products LIMIT 3; \"\"\" print ( \" \\n The first three products in the table:\" ) fetch_and_display_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') The first three products in the table: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') Further Reading SQLBolt - Filtering and sorting Query results SQLite Tutorial - SQLite Limit NULL \u00b6 The NULL datatype allows you to express a missing or unknown value. Avoiding NULL Values In CREATE TABLE Statements \u00b6 Generally, NULL values should be avoided by adding a NOT NULL constraint to your CREATE TABLE definitions like so: CREATE TABLE products ( product_id INTEGER PRIMARY KEY AUTOINCREMENT , product_name TEXT UNIQUE NOT NULL , product_price REAL NOT NULL , product_category TEXT NOT NULL ); If a column has a NOT NULL constraint and you try to enter a NULL value for that column, you'll get an error: Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INSERT INTO products ( product_name , product_price , product_category ) VALUES ( \"mousepad\" , NULL , \"Accessories\" ); -- Error: NOT NULL constraint failed: products.product_price Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" INSERT INTO products (product_name, product_price, product_category) VALUES (\"mousepad\", NULL, \"Accessories\"); \"\"\" # This will throw an error sql . execute ( query ) con . commit () Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Traceback (most recent call last): File \"/home/daniel/documentation-examples/main.py\", line 24, in <module> sql.execute(query) sqlite3.IntegrityError: NOT NULL constraint failed: products.product_price Filtering NULL Values In SELECT Statements \u00b6 You can use IS NULL and IS NOT NULL to filter SELECT statements by columns with or without NULL values. This can be valuable to find rows with missing information or to only display rows with no missing information. Note that in Python, NULL translates to the None datatype. Raw SQL /* * We can see that the \"Lenovo ThinkPad\" doesn't have a `product_price`. * That's because it's `NULL`! */ SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 /* * We can filter our results to find products with missing * `product_price` data. */ SELECT * FROM products WHERE product_price IS NULL ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 \u2502 Lenovo ThinkPad \u2502 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 /* * We can also filter out rows that have a `NULL` value for * `product_price`. */ SELECT * FROM products WHERE product_price IS NOT NULL ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price IS NULL; \"\"\" print ( \" \\n Products with `NULL` values for their price:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price IS NOT NULL; \"\"\" print ( \" \\n Products __without__ `NULL` values for their price:\" ) execute_query_and_display_rows ( query ) Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', None, 'Computers') Products with `NULL` values for their price: (8, 'Lenovo ThinkPad', None, 'Computers') Products __without__ `NULL` values for their price: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') Further Reading SQLBolt - A short note on NULLs SQLite Tutorial - SQLite IS NULL OFFSET \u00b6 If you've ever visited a website like Amazon.com, you know that when you search for a particular product, there are multiple pages of results. The OFFSET clause allows you to move the starting point of the returned rows from a query. It's usually used in conjunction with a LIMIT clause for things like pagination (as in the Amazon example). Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Only get the first 3 products in the table (by `product_id`) SELECT * FROM products LIMIT 3 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the next 3 products in the table SELECT * FROM products LIMIT 3 OFFSET 3 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_rows ( query ) query = \"\"\" SELECT * FROM products LIMIT 3; \"\"\" print ( \" \\n The first three products in the table:\" ) fetch_and_display_rows ( query ) query = \"\"\" SELECT * FROM products LIMIT 3 OFFSET 3; \"\"\" print ( \" \\n The second group of three products in the table:\" ) fetch_and_display_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') The first three products in the table: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') The second group of three products in the table: (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') Further Reading SQLBolt - Filtering and sorting Query results SQLite Tutorial - SQLite Limit ORDER BY \u00b6 The ORDER BY clause allows you to order rows in ascending ( ASC ) or descending ( DESC ) order alphanumerically. You use it with a SELECT query to order the output. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Ordering products from lowest price to highest price SELECT * FROM products ORDER BY product_price ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- ASC is the default, so it's the the same as doing nothing after ORDER BY SELECT * FROM products ORDER BY product_price ASC ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Ordering products from highest price to lowest price SELECT * FROM products ORDER BY product_price DESC ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_all_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products ORDER BY product_price; \"\"\" print ( \" \\n Products ordered from price lowest to highest price:\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products ORDER BY product_price DESC; \"\"\" print ( \" \\n Products ordered from price highest to lowest price:\" ) fetch_and_display_all_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Products ordered from price lowest to highest price: (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') (3, 'System76 Thelio B1', 1255.55, 'Computers') (1, 'Dell XPS 17', 1599.99, 'Computers') (6, 'MacBook Pro 16', 2100.5, 'Computers') Products ordered from price highest to lowest price: (6, 'MacBook Pro 16', 2100.5, 'Computers') (1, 'Dell XPS 17', 1599.99, 'Computers') (3, 'System76 Thelio B1', 1255.55, 'Computers') (8, 'Lenovo ThinkPad', 950.75, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (4, 'Logitech M1', 34.99, 'Accessories') Further Reading SQLBolt - Filtering and sorting Query results SQLite Tutorial - SQLite Order By SELECT \u00b6 To see what data is in a SQL table, you use the SELECT statement. Selecting all of the rows and columns from a table \u00b6 You can SELECT * from a table and that'll give you all of the rows in that table along with all the columns. Be aware that the * means \"Give me all the columns\" not \"Give me all the rows\". All rows are returned from a SELECT query unless you begin using filters like WHERE , LIMIT , or DISTINCT . Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 When selecting data from Python, you can fetch all of the rows by using the fetchall() method of the query result. Note that fetchall() returns a list of tuples , so you would need to do further processing from Python to get the individual rows from this list , such as looping through the rows. Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) for row in rows : # Using multiple assignment to get the values from each row user_id , username , password = row print ( f \"User ID: { user_id } \" ) print ( f \"Username: { username } \" ) print ( f \"Password: { password } \" ) Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] User ID: 1 Username: djs Password: mypa$$word User ID: 2 Username: django Password: w0ff User ID: 3 Username: alecg Password: c0de Selecting specific columns from a table \u00b6 If you only want certain columns returned, you can list them separated by commas after the SELECT keyword. Notice how the user_id column is not present in the result set in the query below. Raw SQL SELECT username , password FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 djs \u2502 mypa$$word \u2502 \u2502 django \u2502 w0ff \u2502 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" SELECT username, password FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) Output [('djs', 'mypa$$word'), ('django', 'w0ff'), ('alecg', 'c0de')] Further Reading SQLBolt - SELECT queries 101 SQLite Tutorial - SQLite Select UPDATE \u00b6 If you need to change data in a SQL table, the UPDATE statement is used. Make sure to use a WHERE clause so that you only update the rows you intend to change. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- The `djs` user will now have `danielj` as their username. UPDATE users SET username = \"danielj\" WHERE user_id = 1 ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 danielj \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" UPDATE users SET username = \"danielj\" WHERE id = 1; \"\"\" sql . execute ( query ) # Make sure to commit the changes to the DB con . commit () display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [(1, 'danielj', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Updating multiple columns \u00b6 If you need to update multiple columns, you can separate the SET clauses with commas. We've also put each new SQL command on a new line and added some indentation to make this longer query easier to read. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 UPDATE users SET username = \"danielj\" , -- note the comma here password = \"b3tTerpa$$w0rd\" WHERE user_id = 1 ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 danielj \u2502 b3tTerpa$$w0rd \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" UPDATE users SET username = \"danielj\", password = \"b3tTerpa$$w0rd\" WHERE user_id = 1; \"\"\" sql . execute ( query ) # Make sure to commit the changes to the DB con . commit () display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [(1, 'danielj', 'b3tTerpa$$w0rd'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Further Reading SQLBolt - Updating rows SQLite Tutorial - SQLite Update WHERE \u00b6 To filter the results from a SQL query, use the WHERE clause. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 SELECT * FROM users WHERE username = \"djs\" ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () def run_query_and_display_results ( query ): result = sql . execute ( query ) rows = result . fetchall () print ( rows ) query = \"\"\" SELECT * FROM users; \"\"\" run_query_and_display_results ( query ) query = \"\"\" SELECT * FROM users WHERE username = \"djs\"; \"\"\" run_query_and_display_results ( query ) Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [(1, 'djs', 'mypa$$word')] Getting a single row from Python when using WHERE \u00b6 If you only need a single row from a SELECT statement using a WHERE clause in your Python programs, use fetchone() . This returns a tuple of the data in each column, and you can use techniques like tuple unpacking or indexing to pull the individual values from the tuple . Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" SELECT * FROM users WHERE username = \"djs\"; \"\"\" result = sql . execute ( query ) row = result . fetchone () # This will be a tuple print ( row ) # Getting the values from the row with tuple unpacking user_id , username , password = row print ( f \"User ID: { user_id } \" ) print ( f \"Username: { username } \" ) print ( f \"Password: { password } \" ) Output (1, 'djs', 'mypa$$word') User ID: 1 Username: djs Password: mypa$$word Using conditional logic with WHERE clauses \u00b6 There are many operators available to use in a WHERE clause. The ones that you can use with numerical data are shown below ( = , IN , and NOT IN can also be used with TEXT data): Operator Description = Equality (works for numbers and TEXT) > Greater-than < Less-than >= Greater-than or equal-to <= Less-than or equal-to BETWEEN...AND Number is between two values NOT BETWEEN...AND Number is not between two values IN (...) Number/Text exists in a list NOT IN (...) Number/Text does not exist in a list Here are examples of a few of the operators on a table of products : Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the product where the `product_name` is \"Lenovo ThinkPad\". SELECT * FROM products WHERE product_name = \"Lenovo ThinkPad\" ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the products that cost less than $1000. SELECT * FROM products WHERE product_price < 1000 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the products that cost more than $1000. SELECT * FROM products WHERE product_price > 1000 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the products whose prices are between $50 and $300 (inclusive). SELECT * FROM products WHERE product_price BETWEEN 50 AND 300 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the products that are in the \"Microphones\" and \"Computers\" categories. SELECT * FROM products WHERE product_category IN ( \"Microphones\" , \"Computers\" ); \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_all_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_name = \"Lenovo ThinkPad\"; \"\"\" print ( \" \\n Looking for the 'Lenovo ThinkPad':\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price < 1000; \"\"\" print ( \" \\n Products cheaper than $1000:\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price > 1000; \"\"\" print ( \" \\n Products more expensive than $1000:\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price BETWEEN 50 AND 300; \"\"\" print ( \" \\n Products between $50 and $300 (inclusive):\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_category IN (\"Microphones\", \"Computers\"); \"\"\" print ( \" \\n Products in the 'Microphones' and 'Computers' categories:\" ) fetch_and_display_all_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Looking for the 'Lenovo ThinkPad': (8, 'Lenovo ThinkPad', 950.75, 'Computers') Products cheaper than $1000: (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Products more expensive than $1000: (1, 'Dell XPS 17', 1599.99, 'Computers') (3, 'System76 Thelio B1', 1255.55, 'Computers') (6, 'MacBook Pro 16', 2100.5, 'Computers') Products between $50 and $300 (inclusive): (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (7, 'Rode Z28', 275.99, 'Microphones') Products in the 'Microphones' and 'Computers' categories: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Complex conditional logic with WHERE clauses \u00b6 You can join multiple WHERE clauses with the logical AND and OR operators to make complex conditional statements, just like in a programming language like Python or JavaScript. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get all microphones less than $200. SELECT * FROM products WHERE product_category = \"Microphones\" AND product_price < 200 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get any microphones or computers less than $1000. SELECT * FROM products WHERE product_price < 1000 AND product_category IN ( \"Computers\" , \"Microphones\" ); \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_all_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_category = \"Microphones\" AND product_price < 200; \"\"\" print ( \" \\n Getting microphones less than $200:\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price < 1000 AND product_category IN (\"Computers\", \"Microphones\"); \"\"\" print ( \" \\n Computers and Microphones cheaper than $1000:\" ) fetch_and_display_all_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Getting microphones less than $200: (2, 'Blue Snowball Microphone', 99.5, 'Microphones') Computers and Microphones cheaper than $1000: (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Further Reading SQLBolt - Queries with constraints - Pt. 1 SQLBolt - Queries with constraints - Pt. 2 SQLite Tutorial - SQLite Where","title":"SQL Language"},{"location":"sql/sql-language/#sql-language","text":"SQL (Structured Query Language) is a language used to interact with databases. We use SQL in the following courses at CodeWizardsHQ: Middle School High School Intro to Databases APIs and Databases Mastering APIs Professional Web App Development Mastering Databases Capstone 2 Capstone 3 Mastering MVC Framework Object Relational Mapping Capstone 3 In this section of our documentation, you'll find references to most of the core SQL language features that we use in our CodeWizardsHQ courses. All of our courses interact with databases using Python + SQL, so we'll show the core SQL syntax first and then give a working example in Python. You'll also find many Further reading sections, which pull from these excellent SQL/Python resources: SQLBolt SQLite Tutorial Python.org Documentation","title":"SQL Language"},{"location":"sql/sql-language/#what-is-a-relational-database","text":"In a relational database, you structure your data in tables made up of rows and columns, kind of like an Excel spreadsheet. You can combine data from multiple tables using JOIN s or just pull data from a single table. For example, consider the two tables below: users table user_id username password 1 djs mypa$$word 2 django w0ff 3 alecg c0de teachers table teacher_id user_id username is_admin 1 1 djs 1 2 3 alecg 0 We could get the username and password of all users that are teachers and admins like this: SELECT users . username , users . password FROM users JOIN teachers USING ( user_id ) WHERE teachers . is_admin = 1 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 djs \u2502 mypa$$word \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 There are many different relational database implementations (MySQL, Postgres, etc.) but we use SQLite at CodeWizardsHQ because it is easy to work with and supports most of the common SQL features.","title":"What Is A Relational Database?"},{"location":"sql/sql-language/#why-do-we-need-sql","text":"When working with a database, you need a way to talk to the database and get data into/out of it. SQL is the language we use to do this in a SQLite database. SQL allows you to express relationships in a database in a structured way.","title":"Why Do We Need SQL?"},{"location":"sql/sql-language/#why-do-we-use-python-and-sql-together","text":"Although you can use raw SQL commands to talk to a SQL database, we use Python at CodeWizardsHQ because often you'll interact with databases this way in the real world. Think about apps you've used that store data about you between visits. That's using a database and a programming language (like Python) to interact with the database! The SQL portions of a Python DB query will be a Python str . Consider this INSERT statement in raw SQL: INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\"); To run that from Python, we would do this: import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\"); \"\"\" sql . execute ( query ) con . commit () The important thing to remember is that the query is just a str that you pass to sql.execute() . If you make a change to a table in the database (as we did above) then you use the con.commit() method to save the change (although in some CWHQ courses you merely view the results without changing the database). The semi-colon ( ; ) isn't required when using a query from Python, but we'll keep it for consistency between the raw SQL examples.","title":"Why Do We Use Python And SQL Together?"},{"location":"sql/sql-language/#bounded-parameters","text":"When accepting user input in a Python program that modifies a SQL database, you'll use ? as placeholders for any user-entered data and then pass the data to sql.execute() as a list like this: import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () username = input ( \"Enter your username: \" ) password = input ( \"Enter your password: \" ) # Use `?` for any user-entered data query = \"\"\" INSERT INTO users (username, password) VALUES (?, ?); \"\"\" # The `username` and `password` are bound to the `?` in the `query` sql . execute ( query , [ username , password ]) con . commit () Further Reading Python Documentation - sqlite3","title":"Bounded Parameters"},{"location":"sql/sql-language/#aggregate-functions","text":"Just like programming languages such as Python and JavaScript, SQL has functions to perform common tasks on result set called Aggregate Functions . The example below shows the different Aggregate Functions we use in CWHQ courses. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the average price of all products SELECT AVG ( product_price ) AS average_product_price FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 average_product_price \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 800 . 7525 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Count the number of products SELECT COUNT ( * ) AS total_products FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 total_products \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the most expensive product SELECT product_name || \" $\" || MAX ( product_price ) AS most_expensive_product FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 most_expensive_product \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 MacBook Pro 16 $ 2100 . 5 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the least expensive product SELECT product_name || \" $\" || MIN ( product_price ) AS least_expensive_product FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 least_expensive_product \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Logitech M1 $ 34 . 99 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the total cost of all products combined SELECT SUM ( product_price ) AS total_cost_all_products FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 total_cost_all_products \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 6406 . 02 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT AVG(product_price) AS average_product_price FROM products; \"\"\" print ( \" \\n Average cost of all products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT COUNT(*) AS total_products FROM products; \"\"\" print ( \" \\n Total number of products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_name || \" $\" || MAX(product_price) AS most_expensive_product FROM products; \"\"\" print ( \" \\n Most expensive product:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_name || \" $\" || MIN(product_price) AS least_expensive_product FROM products; \"\"\" print ( \" \\n Least expensive product:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT SUM(product_price) AS total_cost_all_products FROM products; \"\"\" print ( \" \\n Total cost of all products:\" ) execute_query_and_display_rows ( query ) Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Average cost of all products: (800.7524999999999,) Total number of products: (8,) Most expensive product: ('MacBook Pro 16 $2100.5',) Least expensive product: ('Logitech M1 $34.99',) Total cost of all products: (6406.0199999999995,) Further Reading SQLBolt - Queries with aggregates - Pt. 1 SQLite Tutorial - SQLite Aggregate Functions","title":"Aggregate Functions"},{"location":"sql/sql-language/#alter-table","text":"After creating a table, you may need to add or rename a column. The ALTER TABLE command allows you to do this. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Renaming a column ALTER TABLE users RENAME username TO teacher_name ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 teacher_name \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Adding a new column with a default value for each row ALTER TABLE users ADD is_admin INTEGER DEFAULT 0 ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 teacher_name \u2502 password \u2502 is_admin \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 0 \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 0 \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () def display_all_users_and_column_names (): # Don't worry about this, it just shows us the column names query = \"\"\" SELECT name FROM PRAGMA_TABLE_INFO('users'); \"\"\" result = sql . execute ( query ) print ( \" \\n Column names:\" ) print ( * result . fetchall ()) query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( \" \\n Rows:\" ) print ( rows ) display_all_users_and_column_names () query = \"\"\" ALTER TABLE users RENAME username TO teacher_name; \"\"\" sql . execute ( query ) display_all_users_and_column_names () query = \"\"\" ALTER TABLE users ADD is_admin INTEGER DEFAULT 0; \"\"\" sql . execute ( query ) display_all_users_and_column_names () # Make sure to commit the changes to the DB con . commit () Output Column names: ('user_id',) ('username',) ('password',) Rows: [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Column names: ('user_id',) ('teacher_name',) ('password',) Rows: [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Column names: ('user_id',) ('teacher_name',) ('password',) ('is_admin',) Rows: [(1, 'djs', 'mypa$$word', 0), (2, 'django', 'w0ff', 0), (3, 'alecg', 'c0de', 0)] Further Reading SQLBolt - Altering Tables SQLite Tutorial - SQLite Alter Table","title":"ALTER TABLE"},{"location":"sql/sql-language/#as","text":"The AS clause is used to alias a column or table name. We only use it at CWHQ for column aliases though, so that's all that is covered here.","title":"AS"},{"location":"sql/sql-language/#aliasing-column-names","text":"When aliasing column names, the AS clause comes in handy when you are using the concatenation operator ( || ) to combine multiple columns or when using Aggregate Functions to perform some calculation on a group of rows. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 /* * Build a result set that combines `product_name` and `product_price` * into a single column */ SELECT product_name || \" : $\" || product_price AS product_description FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_description \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Dell XPS 17 : $ 1599 . 99 \u2502 \u2502 Blue Snowball Microphone : $ 99 . 5 \u2502 \u2502 System76 Thelio B1 : $ 1255 . 55 \u2502 \u2502 Logitech M1 : $ 34 . 99 \u2502 \u2502 Seagate S1 SSD : $ 88 . 75 \u2502 \u2502 MacBook Pro 16 : $ 2100 . 5 \u2502 \u2502 Rode Z28 : $ 275 . 99 \u2502 \u2502 Lenovo ThinkPad : $ 950 . 75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the total cost of all the computers in the `products` table SELECT SUM ( product_price ) AS total_price_computers FROM products WHERE product_category = \"Computers\" ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 total_price_computers \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 5906 . 79 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_name || \" : $\" || product_price AS product_description FROM products; \"\"\" print ( \" \\n Formatted product descriptions:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT SUM(product_price) AS total_price_computers FROM products WHERE product_category = \"Computers\"; \"\"\" print ( \" \\n The total price of all computers in the `products` table:\" ) execute_query_and_display_rows ( query ) Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Formatted product descriptions: ('Dell XPS 17 : $1599.99',) ('Blue Snowball Microphone : $99.5',) ('System76 Thelio B1 : $1255.55',) ('Logitech M1 : $34.99',) ('Seagate S1 SSD : $88.75',) ('MacBook Pro 16 : $2100.5',) ('Rode Z28 : $275.99',) ('Lenovo ThinkPad : $950.75',) The total price of all computers in the `products` table: (5906.79,) Further Reading SQLBolt - Queries with expressions","title":"Aliasing Column Names"},{"location":"sql/sql-language/#concatenation","text":"SQLite uses the || operator for string concatenation. This is used at CWHQ to combine column names together (possibly with other string data) to merge the data from multiple columns into a single column. This is often used in conjunction with the AS clause to rename the combined columns. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 /* * Build a result set that combines `product_name` and `product_price` * into a single column using `||` and `AS` */ SELECT product_name || \" : $\" || product_price AS product_description FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_description \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Dell XPS 17 : $ 1599 . 99 \u2502 \u2502 Blue Snowball Microphone : $ 99 . 5 \u2502 \u2502 System76 Thelio B1 : $ 1255 . 55 \u2502 \u2502 Logitech M1 : $ 34 . 99 \u2502 \u2502 Seagate S1 SSD : $ 88 . 75 \u2502 \u2502 MacBook Pro 16 : $ 2100 . 5 \u2502 \u2502 Rode Z28 : $ 275 . 99 \u2502 \u2502 Lenovo ThinkPad : $ 950 . 75 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_name || \" : $\" || product_price AS product_description FROM products; \"\"\" Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Formatted product descriptions: ('Dell XPS 17 : $1599.99',) ('Blue Snowball Microphone : $99.5',) ('System76 Thelio B1 : $1255.55',) ('Logitech M1 : $34.99',) ('Seagate S1 SSD : $88.75',) ('MacBook Pro 16 : $2100.5',) ('Rode Z28 : $275.99',) ('Lenovo ThinkPad : $950.75',)","title":"Concatenation"},{"location":"sql/sql-language/#create-table","text":"Relational databases are made up of tables, and you'll need to create tables to hold your data if we don't provide one for you. We often use IF NOT EXISTS in CWHQ courses when creating a table because we'll run the statement every time our Python script runs, and an error would occur if you tried to create a table that already existed. Most tables should also have a PRIMARY KEY integer to uniquely identify each row of data. The general format of a CREATE TABLE statement is: CREATE TABLE IF NOT EXISTS table_name ( column_one DATATYPE OPTIONAL_CONSTRAINTS ..., column_two DATATYPE OPTIONAL_CONSTRAINTS ..., column_three DATATYPE OPTIONAL_CONSTRAINTS ... -- etc... ); Note that each column definition is separated by a comma ( , ) but the final column definition should not have a comma. Here's an example of a CREATE TABLE statement for the users table from the What Is A Relational Database? section earlier in these docs: Raw SQL CREATE TABLE IF NOT EXISTS users ( user_id INTEGER PRIMARY KEY AUTOINCREMENT , username TEXT UNIQUE NOT NULL , password TEXT NOT NULL ); Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" CREATE TABLE IF NOT EXISTS users ( user_id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE NOT NULL, password TEXT NOT NULL ); \"\"\" sql . execute ( query )","title":"CREATE TABLE"},{"location":"sql/sql-language/#column-datatypes","text":"When writing column definitions, your column can be one of 5 storage classes (which are a generic datatype) in SQLite: NULL : Represents \"nothingness\" INTEGER : Whole numbers REAL : Decimal numbers TEXT : Text data BLOB : Binary data (like images, music, etc.) You'll mainly use INTEGER and TEXT for CWHQ projects.","title":"Column Datatypes"},{"location":"sql/sql-language/#column-constraints","text":"Besides the datatype, you can also put additional constraints on a column definition to enforce that a column is UNIQUE , or NOT NULL , or even a PRIMARY KEY . You can see all of those at work in this example: CREATE TABLE IF NOT EXISTS users ( user_id INTEGER PRIMARY KEY AUTOINCREMENT , username TEXT UNIQUE NOT NULL , password TEXT NOT NULL ); Further Reading SQLBolt - Creating tables SQLite Tutorial - SQLite Create Table","title":"Column Constraints"},{"location":"sql/sql-language/#delete","text":"To remove data in a SQL table, use the DELETE statement. Make sure to use a WHERE clause so that you only delete the rows you intend to. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 DELETE FROM users WHERE user_id = 3 ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" DELETE FROM users WHERE id = 3; \"\"\" sql . execute ( query ) # Make sure to commit the changes to the DB con . commit () display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff')]","title":"DELETE"},{"location":"sql/sql-language/#deleting-all-rows-from-a-table","text":"If you leave out the WHERE clause in a DELETE statement, you remove all rows from the table. This is a handy way to clear out all the rows if you need to start with a fresh table: Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 DELETE FROM users ; SELECT * FROM users ; -- nothing returned because the table is empty Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" DELETE FROM users; \"\"\" sql . execute ( query ) # Make sure to commit the changes to the DB con . commit () display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [] Further Reading SQLBolt - Deleting rows SQLite Tutorial - SQLite Delete","title":"Deleting all rows from a table"},{"location":"sql/sql-language/#distinct","text":"If you want to get unique column values for a set of rows, use the DISTINCT clause of a SELECT query For example, in the products table below, it may be hard at a glance to see what categories are present, but with DISTINCT it's easy to see we only have three! Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get only the unique categories for our products. SELECT DISTINCT product_category FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Computers \u2502 \u2502 Microphones \u2502 \u2502 Accessories \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () query = \"\"\" SELECT * FROM products; \"\"\" result = sql . execute ( query ) rows = result . fetchall () # Easier to read if we loop then print each row since there are 8 rows. for row in rows : print ( row ) query = \"\"\" SELECT DISTINCT product_category FROM products; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( \" \\n Distinct categories:\" ) print ( rows ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Distinct categories: [('Computers',), ('Microphones',), ('Accessories',)] Further Reading SQLBolt - Filtering and sorting Query results SQLite Tutorial - SQLite Select Distinct","title":"DISTINCT"},{"location":"sql/sql-language/#drop-table","text":"The DROP TABLE query deletes an entire table and it's definition from the database. You should usually use the IF EXISTS clause with this query to ensure an error isn't thrown if the table you're trying to drop doesn't exist. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 DROP TABLE IF EXISTS users ; SELECT * FROM users ; -- Error: no such table: users Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" DROP TABLE IF EXISTS users; \"\"\" sql . execute ( query ) # This will throw an error since the `users` table doesn't exist. display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Traceback (most recent call last): File \"/home/daniel/documentation-examples/main.py\", line 27, in <module> display_all_users() File \"/home/daniel/documentation-examples/main.py\", line 12, in display_all_users result = sql.execute(query) sqlite3.OperationalError: no such table: users Further Reading SQLBolt - Dropping tables SQLite Tutorial - SQLite Drop Table","title":"DROP TABLE"},{"location":"sql/sql-language/#group-by","text":"If you need to \"flatten\" the results of a SELECT query, the GROUP BY clause is helpful. It let's you group the resulting rows by a particular column, effectively filtering out duplicate rows that have the same column value. You almost always use GROUP BY with an Aggregate Function to perform some sort of calculation on a group of rows with similar column values, but you can also use it to filter a column by unique values (as we do to get the unique product categories below): Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the unique product categories SELECT product_category FROM products GROUP BY product_category ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Accessories \u2502 \u2502 Computers \u2502 \u2502 Microphones \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the number of products in each `product_category` SELECT product_category , COUNT ( * ) AS num_products_per_category FROM products GROUP BY product_category ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_category \u2502 num_products_per_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Accessories \u2502 2 \u2502 \u2502 Computers \u2502 4 \u2502 \u2502 Microphones \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_category FROM products GROUP BY product_category; \"\"\" print ( \" \\n Unique `product_categories`:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT product_category, COUNT(*) AS num_products_per_category FROM products GROUP BY product_category; \"\"\" print ( \" \\n Number of products per category:\" ) execute_query_and_display_rows ( query ) Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Unique `product_categories`: ('Accessories',) ('Computers',) ('Microphones',) Number of products per category: ('Accessories', 2) ('Computers', 4) ('Microphones', 2) Further Reading SQLBolt - Queries with aggregates - Pt. 1 SQLite Tutorial - SQLite Group By","title":"GROUP BY"},{"location":"sql/sql-language/#insert","text":"Once you've created a table, you'll want to put data in it. The INSERT statement is used to add data to a SQL table. You list the column names in the () after the table name. Consider this users table definition: CREATE TABLE IF NOT EXISTS users ( user_id INTEGER PRIMARY KEY AUTOINCREMENT , username TEXT UNIQUE NOT NULL , password TEXT NOT NULL ); If we wanted to fill this table with a few users, we would leave out the user_id in the () as this table has the user_id set to AUTOINCREMENT . We would need to add the other two column names in whatever order we wished, though. Raw SQL INSERT INTO users ( username , password ) VALUES ( \"djs\" , \"mypa$$word\" ); INSERT INTO users ( username , password ) VALUES ( \"django\" , \"w0ff\" ); INSERT INTO users ( username , password ) VALUES ( \"alecg\" , \"c0de\" ); SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\"); \"\"\" sql . execute ( query ) query = \"\"\" INSERT INTO users (username, password) VALUES (\"django\", \"w0ff\"); \"\"\" sql . execute ( query ) query = \"\"\" INSERT INTO users (username, password) VALUES (\"alecg\", \"c0de\"); \"\"\" sql . execute ( query ) # Make sure the changes are saved to the DB. con . commit () query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]","title":"INSERT"},{"location":"sql/sql-language/#inserting-multiple-rows-into-a-table","text":"If you want to insert multiple rows into a database table, you can use a single INSERT statement and group each row in () . Raw SQL INSERT INTO users ( username , password ) VALUES ( \"djs\" , \"mypa$$word\" ), ( \"django\" , \"w0ff\" ), ( \"alecg\" , \"c0de\" ); SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" INSERT INTO users (username, password) VALUES (\"djs\", \"mypa$$word\"), (\"django\", \"w0ff\"), (\"alecg\", \"c0de\"); \"\"\" sql . execute ( query ) con . commit () query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Further Reading SQLBolt - Inserting rows SQLite Tutorial - SQLite Insert","title":"Inserting multiple rows into a table"},{"location":"sql/sql-language/#join","text":"Being able to combine data from related tables is one of the things that makes a relational database like SQLite so powerful.","title":"JOIN"},{"location":"sql/sql-language/#defining-table-relationships","text":"Before you can JOIN two tables, they must share a common key. Consider the following two table schemas, which represent data about authors and books: CREATE TABLE authors ( author_id INTEGER PRIMARY KEY AUTOINCREMENT , author_name TEXT NOT NULL ); CREATE TABLE books ( book_id INTEGER PRIMARY KEY AUTOINCREMENT , author_id INTEGER NOT NULL REFERENCES authors ( author_id ), -- the Foreign Key relationship book_title TEXT UNIQUE NOT NULL ); We can relate the two tables with the REFERENCES keyword. The author_id is known as a Foreign Key in the books table because it's merely pointing to the PRIMARY KEY of the authors table. It's the author_id shared between the authors and books tables that allows us to JOIN them together.","title":"Defining Table Relationships"},{"location":"sql/sql-language/#joining-tables-together","text":"Now that we have an established relationship between our authors and books tables, we can JOIN them together. We'll preface each column name with the table it references since we'll be referring to multiple tables like this table_name.column_name . This isn't always strictly required, but it makes it easier to understand which table each column references in the query. Raw SQL SELECT * FROM authors ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 author_id \u2502 author_name \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 J . D . Salinger \u2502 \u2502 2 \u2502 Harper Lee \u2502 \u2502 3 \u2502 Truman Capote \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 SELECT * FROM books ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 book_id \u2502 author_id \u2502 book_title \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 2 \u2502 To Kill a Mockingbird \u2502 \u2502 2 \u2502 3 \u2502 In Cold Blood \u2502 \u2502 3 \u2502 1 \u2502 The Catcher in the Rye \u2502 \u2502 4 \u2502 3 \u2502 Breakfast at Tiffanys \u2502 \u2502 5 \u2502 1 \u2502 Franny and Zooey \u2502 \u2502 6 \u2502 3 \u2502 Summer Crossing \u2502 \u2502 7 \u2502 2 \u2502 Go Set a Watchman \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Join the `authors` and `books` tables together SELECT authors . author_name , books . book_title FROM authors JOIN books ON authors . author_id = books . author_id ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 author_name \u2502 book_title \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Harper Lee \u2502 To Kill a Mockingbird \u2502 \u2502 Truman Capote \u2502 In Cold Blood \u2502 \u2502 J . D . Salinger \u2502 The Catcher in the Rye \u2502 \u2502 Truman Capote \u2502 Breakfast at Tiffanys \u2502 \u2502 J . D . Salinger \u2502 Franny and Zooey \u2502 \u2502 Truman Capote \u2502 Summer Crossing \u2502 \u2502 Harper Lee \u2502 Go Set a Watchman \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Getting a bit fancier by ordering by `author_name` SELECT authors . author_name , books . book_title FROM authors JOIN books ON authors . author_id = books . author_id ORDER BY authors . author_name ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 author_name \u2502 book_title \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Harper Lee \u2502 To Kill a Mockingbird \u2502 \u2502 Harper Lee \u2502 Go Set a Watchman \u2502 \u2502 J . D . Salinger \u2502 The Catcher in the Rye \u2502 \u2502 J . D . Salinger \u2502 Franny and Zooey \u2502 \u2502 Truman Capote \u2502 In Cold Blood \u2502 \u2502 Truman Capote \u2502 Breakfast at Tiffanys \u2502 \u2502 Truman Capote \u2502 Summer Crossing \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"library-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM authors; \"\"\" print ( \"All rows in the `authors` table:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT * FROM books; \"\"\" print ( \" \\n All rows in the `books` table:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT authors.author_name, books.book_title FROM authors JOIN books ON authors.author_id = books.author_id; \"\"\" print ( \" \\n Joining the `authors` and `books` tables:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT authors.author_name, books.book_title FROM authors JOIN books ON authors.author_id = books.author_id ORDER BY authors.author_name; \"\"\" print ( \" \\n Joining and sorting the `authors` and `books` tables:\" ) execute_query_and_display_rows ( query ) Output All rows in the `authors` table: (1, 'J.D. Salinger') (2, 'Harper Lee') (3, 'Truman Capote') All rows in the `books` table: (1, 2, 'To Kill a Mockingbird') (2, 3, 'In Cold Blood') (3, 1, 'The Catcher in the Rye') (4, 3, \"Breakfast at Tiffany's\") (5, 1, 'Franny and Zooey') (6, 3, 'Summer Crossing') (7, 2, 'Go Set a Watchman') Joining the `authors` and `books` tables: ('Harper Lee', 'To Kill a Mockingbird') ('Truman Capote', 'In Cold Blood') ('J.D. Salinger', 'The Catcher in the Rye') ('Truman Capote', \"Breakfast at Tiffany's\") ('J.D. Salinger', 'Franny and Zooey') ('Truman Capote', 'Summer Crossing') ('Harper Lee', 'Go Set a Watchman') Joining and sorting the `authors` and `books` tables: ('Harper Lee', 'To Kill a Mockingbird') ('Harper Lee', 'Go Set a Watchman') ('J.D. Salinger', 'The Catcher in the Rye') ('J.D. Salinger', 'Franny and Zooey') ('Truman Capote', 'In Cold Blood') ('Truman Capote', \"Breakfast at Tiffany's\") ('Truman Capote', 'Summer Crossing')","title":"JOINING Tables Together"},{"location":"sql/sql-language/#the-using-shorthand","text":"When using a JOIN , you don't have to use the ON table.column_name = other_table.column_name syntax if the column names are the same in both tables. We could rewrite the last JOIN from the previous example in a shorter way with USING() like so: SELECT authors . author_name , books . book_title FROM authors JOIN books USING ( author_id ) -- This is a nice shorthand ORDER BY authors . author_name ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 author_name \u2502 book_title \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Harper Lee \u2502 To Kill a Mockingbird \u2502 \u2502 Harper Lee \u2502 Go Set a Watchman \u2502 \u2502 J . D . Salinger \u2502 The Catcher in the Rye \u2502 \u2502 J . D . Salinger \u2502 Franny and Zooey \u2502 \u2502 Truman Capote \u2502 In Cold Blood \u2502 \u2502 Truman Capote \u2502 Breakfast at Tiffanys \u2502 \u2502 Truman Capote \u2502 Summer Crossing \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Further Reading SQLBolt - Multi-table queries with JOINs SQLite Tutorial - SQLite Join","title":"The USING() shorthand"},{"location":"sql/sql-language/#limit","text":"Sometimes, you may want to get a limited number of rows back from a SELECT query. The LIMIT clause allows you to do this: Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Only get the first 3 products in the table (by `product_id`) SELECT * FROM products LIMIT 3 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_rows ( query ) query = \"\"\" SELECT * FROM products LIMIT 3; \"\"\" print ( \" \\n The first three products in the table:\" ) fetch_and_display_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') The first three products in the table: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') Further Reading SQLBolt - Filtering and sorting Query results SQLite Tutorial - SQLite Limit","title":"LIMIT"},{"location":"sql/sql-language/#null","text":"The NULL datatype allows you to express a missing or unknown value.","title":"NULL"},{"location":"sql/sql-language/#avoiding-null-values-in-create-table-statements","text":"Generally, NULL values should be avoided by adding a NOT NULL constraint to your CREATE TABLE definitions like so: CREATE TABLE products ( product_id INTEGER PRIMARY KEY AUTOINCREMENT , product_name TEXT UNIQUE NOT NULL , product_price REAL NOT NULL , product_category TEXT NOT NULL ); If a column has a NOT NULL constraint and you try to enter a NULL value for that column, you'll get an error: Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 INSERT INTO products ( product_name , product_price , product_category ) VALUES ( \"mousepad\" , NULL , \"Accessories\" ); -- Error: NOT NULL constraint failed: products.product_price Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" INSERT INTO products (product_name, product_price, product_category) VALUES (\"mousepad\", NULL, \"Accessories\"); \"\"\" # This will throw an error sql . execute ( query ) con . commit () Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Traceback (most recent call last): File \"/home/daniel/documentation-examples/main.py\", line 24, in <module> sql.execute(query) sqlite3.IntegrityError: NOT NULL constraint failed: products.product_price","title":"Avoiding NULL Values In CREATE TABLE Statements"},{"location":"sql/sql-language/#filtering-null-values-in-select-statements","text":"You can use IS NULL and IS NOT NULL to filter SELECT statements by columns with or without NULL values. This can be valuable to find rows with missing information or to only display rows with no missing information. Note that in Python, NULL translates to the None datatype. Raw SQL /* * We can see that the \"Lenovo ThinkPad\" doesn't have a `product_price`. * That's because it's `NULL`! */ SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 /* * We can filter our results to find products with missing * `product_price` data. */ SELECT * FROM products WHERE product_price IS NULL ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 \u2502 Lenovo ThinkPad \u2502 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 /* * We can also filter out rows that have a `NULL` value for * `product_price`. */ SELECT * FROM products WHERE product_price IS NOT NULL ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () def execute_query_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" print ( \"All products:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price IS NULL; \"\"\" print ( \" \\n Products with `NULL` values for their price:\" ) execute_query_and_display_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price IS NOT NULL; \"\"\" print ( \" \\n Products __without__ `NULL` values for their price:\" ) execute_query_and_display_rows ( query ) Output All products: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', None, 'Computers') Products with `NULL` values for their price: (8, 'Lenovo ThinkPad', None, 'Computers') Products __without__ `NULL` values for their price: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') Further Reading SQLBolt - A short note on NULLs SQLite Tutorial - SQLite IS NULL","title":"Filtering NULL Values In SELECT Statements"},{"location":"sql/sql-language/#offset","text":"If you've ever visited a website like Amazon.com, you know that when you search for a particular product, there are multiple pages of results. The OFFSET clause allows you to move the starting point of the returned rows from a query. It's usually used in conjunction with a LIMIT clause for things like pagination (as in the Amazon example). Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Only get the first 3 products in the table (by `product_id`) SELECT * FROM products LIMIT 3 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the next 3 products in the table SELECT * FROM products LIMIT 3 OFFSET 3 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_rows ( query ) query = \"\"\" SELECT * FROM products LIMIT 3; \"\"\" print ( \" \\n The first three products in the table:\" ) fetch_and_display_rows ( query ) query = \"\"\" SELECT * FROM products LIMIT 3 OFFSET 3; \"\"\" print ( \" \\n The second group of three products in the table:\" ) fetch_and_display_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') The first three products in the table: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') The second group of three products in the table: (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') Further Reading SQLBolt - Filtering and sorting Query results SQLite Tutorial - SQLite Limit","title":"OFFSET"},{"location":"sql/sql-language/#order-by","text":"The ORDER BY clause allows you to order rows in ascending ( ASC ) or descending ( DESC ) order alphanumerically. You use it with a SELECT query to order the output. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Ordering products from lowest price to highest price SELECT * FROM products ORDER BY product_price ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- ASC is the default, so it's the the same as doing nothing after ORDER BY SELECT * FROM products ORDER BY product_price ASC ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Ordering products from highest price to lowest price SELECT * FROM products ORDER BY product_price DESC ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_all_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products ORDER BY product_price; \"\"\" print ( \" \\n Products ordered from price lowest to highest price:\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products ORDER BY product_price DESC; \"\"\" print ( \" \\n Products ordered from price highest to lowest price:\" ) fetch_and_display_all_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Products ordered from price lowest to highest price: (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') (3, 'System76 Thelio B1', 1255.55, 'Computers') (1, 'Dell XPS 17', 1599.99, 'Computers') (6, 'MacBook Pro 16', 2100.5, 'Computers') Products ordered from price highest to lowest price: (6, 'MacBook Pro 16', 2100.5, 'Computers') (1, 'Dell XPS 17', 1599.99, 'Computers') (3, 'System76 Thelio B1', 1255.55, 'Computers') (8, 'Lenovo ThinkPad', 950.75, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (4, 'Logitech M1', 34.99, 'Accessories') Further Reading SQLBolt - Filtering and sorting Query results SQLite Tutorial - SQLite Order By","title":"ORDER BY"},{"location":"sql/sql-language/#select","text":"To see what data is in a SQL table, you use the SELECT statement.","title":"SELECT"},{"location":"sql/sql-language/#selecting-all-of-the-rows-and-columns-from-a-table","text":"You can SELECT * from a table and that'll give you all of the rows in that table along with all the columns. Be aware that the * means \"Give me all the columns\" not \"Give me all the rows\". All rows are returned from a SELECT query unless you begin using filters like WHERE , LIMIT , or DISTINCT . Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 When selecting data from Python, you can fetch all of the rows by using the fetchall() method of the query result. Note that fetchall() returns a list of tuples , so you would need to do further processing from Python to get the individual rows from this list , such as looping through the rows. Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) for row in rows : # Using multiple assignment to get the values from each row user_id , username , password = row print ( f \"User ID: { user_id } \" ) print ( f \"Username: { username } \" ) print ( f \"Password: { password } \" ) Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] User ID: 1 Username: djs Password: mypa$$word User ID: 2 Username: django Password: w0ff User ID: 3 Username: alecg Password: c0de","title":"Selecting all of the rows and columns from a table"},{"location":"sql/sql-language/#selecting-specific-columns-from-a-table","text":"If you only want certain columns returned, you can list them separated by commas after the SELECT keyword. Notice how the user_id column is not present in the result set in the query below. Raw SQL SELECT username , password FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 djs \u2502 mypa$$word \u2502 \u2502 django \u2502 w0ff \u2502 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" SELECT username, password FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) Output [('djs', 'mypa$$word'), ('django', 'w0ff'), ('alecg', 'c0de')] Further Reading SQLBolt - SELECT queries 101 SQLite Tutorial - SQLite Select","title":"Selecting specific columns from a table"},{"location":"sql/sql-language/#update","text":"If you need to change data in a SQL table, the UPDATE statement is used. Make sure to use a WHERE clause so that you only update the rows you intend to change. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- The `djs` user will now have `danielj` as their username. UPDATE users SET username = \"danielj\" WHERE user_id = 1 ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 danielj \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" UPDATE users SET username = \"danielj\" WHERE id = 1; \"\"\" sql . execute ( query ) # Make sure to commit the changes to the DB con . commit () display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [(1, 'danielj', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')]","title":"UPDATE"},{"location":"sql/sql-language/#updating-multiple-columns","text":"If you need to update multiple columns, you can separate the SET clauses with commas. We've also put each new SQL command on a new line and added some indentation to make this longer query easier to read. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 UPDATE users SET username = \"danielj\" , -- note the comma here password = \"b3tTerpa$$w0rd\" WHERE user_id = 1 ; SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 danielj \u2502 b3tTerpa$$w0rd \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () # We'll use this twice, so it makes sense to be a function def display_all_users (): query = \"\"\" SELECT * FROM users; \"\"\" result = sql . execute ( query ) rows = result . fetchall () print ( rows ) display_all_users () query = \"\"\" UPDATE users SET username = \"danielj\", password = \"b3tTerpa$$w0rd\" WHERE user_id = 1; \"\"\" sql . execute ( query ) # Make sure to commit the changes to the DB con . commit () display_all_users () Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [(1, 'danielj', 'b3tTerpa$$w0rd'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] Further Reading SQLBolt - Updating rows SQLite Tutorial - SQLite Update","title":"Updating multiple columns"},{"location":"sql/sql-language/#where","text":"To filter the results from a SQL query, use the WHERE clause. Raw SQL SELECT * FROM users ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2502 2 \u2502 django \u2502 w0ff \u2502 \u2502 3 \u2502 alecg \u2502 c0de \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 SELECT * FROM users WHERE username = \"djs\" ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 user_id \u2502 username \u2502 password \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 djs \u2502 mypa$$word \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () def run_query_and_display_results ( query ): result = sql . execute ( query ) rows = result . fetchall () print ( rows ) query = \"\"\" SELECT * FROM users; \"\"\" run_query_and_display_results ( query ) query = \"\"\" SELECT * FROM users WHERE username = \"djs\"; \"\"\" run_query_and_display_results ( query ) Output [(1, 'djs', 'mypa$$word'), (2, 'django', 'w0ff'), (3, 'alecg', 'c0de')] [(1, 'djs', 'mypa$$word')]","title":"WHERE"},{"location":"sql/sql-language/#getting-a-single-row-from-python-when-using-where","text":"If you only need a single row from a SELECT statement using a WHERE clause in your Python programs, use fetchone() . This returns a tuple of the data in each column, and you can use techniques like tuple unpacking or indexing to pull the individual values from the tuple . Python + SQL import sqlite3 con = sqlite3 . connect ( \"users-database.db\" ) sql = con . cursor () query = \"\"\" SELECT * FROM users WHERE username = \"djs\"; \"\"\" result = sql . execute ( query ) row = result . fetchone () # This will be a tuple print ( row ) # Getting the values from the row with tuple unpacking user_id , username , password = row print ( f \"User ID: { user_id } \" ) print ( f \"Username: { username } \" ) print ( f \"Password: { password } \" ) Output (1, 'djs', 'mypa$$word') User ID: 1 Username: djs Password: mypa$$word","title":"Getting a single row from Python when using WHERE"},{"location":"sql/sql-language/#using-conditional-logic-with-where-clauses","text":"There are many operators available to use in a WHERE clause. The ones that you can use with numerical data are shown below ( = , IN , and NOT IN can also be used with TEXT data): Operator Description = Equality (works for numbers and TEXT) > Greater-than < Less-than >= Greater-than or equal-to <= Less-than or equal-to BETWEEN...AND Number is between two values NOT BETWEEN...AND Number is not between two values IN (...) Number/Text exists in a list NOT IN (...) Number/Text does not exist in a list Here are examples of a few of the operators on a table of products : Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the product where the `product_name` is \"Lenovo ThinkPad\". SELECT * FROM products WHERE product_name = \"Lenovo ThinkPad\" ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the products that cost less than $1000. SELECT * FROM products WHERE product_price < 1000 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the products that cost more than $1000. SELECT * FROM products WHERE product_price > 1000 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the products whose prices are between $50 and $300 (inclusive). SELECT * FROM products WHERE product_price BETWEEN 50 AND 300 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get the products that are in the \"Microphones\" and \"Computers\" categories. SELECT * FROM products WHERE product_category IN ( \"Microphones\" , \"Computers\" ); \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_all_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_name = \"Lenovo ThinkPad\"; \"\"\" print ( \" \\n Looking for the 'Lenovo ThinkPad':\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price < 1000; \"\"\" print ( \" \\n Products cheaper than $1000:\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price > 1000; \"\"\" print ( \" \\n Products more expensive than $1000:\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price BETWEEN 50 AND 300; \"\"\" print ( \" \\n Products between $50 and $300 (inclusive):\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_category IN (\"Microphones\", \"Computers\"); \"\"\" print ( \" \\n Products in the 'Microphones' and 'Computers' categories:\" ) fetch_and_display_all_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Looking for the 'Lenovo ThinkPad': (8, 'Lenovo ThinkPad', 950.75, 'Computers') Products cheaper than $1000: (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Products more expensive than $1000: (1, 'Dell XPS 17', 1599.99, 'Computers') (3, 'System76 Thelio B1', 1255.55, 'Computers') (6, 'MacBook Pro 16', 2100.5, 'Computers') Products between $50 and $300 (inclusive): (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (7, 'Rode Z28', 275.99, 'Microphones') Products in the 'Microphones' and 'Computers' categories: (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers')","title":"Using conditional logic with WHERE clauses"},{"location":"sql/sql-language/#complex-conditional-logic-with-where-clauses","text":"You can join multiple WHERE clauses with the logical AND and OR operators to make complex conditional statements, just like in a programming language like Python or JavaScript. Raw SQL SELECT * FROM products ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Dell XPS 17 \u2502 1599 . 99 \u2502 Computers \u2502 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 3 \u2502 System76 Thelio B1 \u2502 1255 . 55 \u2502 Computers \u2502 \u2502 4 \u2502 Logitech M1 \u2502 34 . 99 \u2502 Accessories \u2502 \u2502 5 \u2502 Seagate S1 SSD \u2502 88 . 75 \u2502 Accessories \u2502 \u2502 6 \u2502 MacBook Pro 16 \u2502 2100 . 5 \u2502 Computers \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get all microphones less than $200. SELECT * FROM products WHERE product_category = \"Microphones\" AND product_price < 200 ; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 -- Get any microphones or computers less than $1000. SELECT * FROM products WHERE product_price < 1000 AND product_category IN ( \"Computers\" , \"Microphones\" ); \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 product_id \u2502 product_name \u2502 product_price \u2502 product_category \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 \u2502 Blue Snowball Microphone \u2502 99 . 5 \u2502 Microphones \u2502 \u2502 7 \u2502 Rode Z28 \u2502 275 . 99 \u2502 Microphones \u2502 \u2502 8 \u2502 Lenovo ThinkPad \u2502 950 . 75 \u2502 Computers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Python + SQL import sqlite3 con = sqlite3 . connect ( \"products-database.db\" ) sql = con . cursor () # We'll use this a few times so it makes sense for it to be a function def fetch_and_display_all_rows ( query ): result = sql . execute ( query ) rows = result . fetchall () for row in rows : print ( row ) query = \"\"\" SELECT * FROM products; \"\"\" fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_category = \"Microphones\" AND product_price < 200; \"\"\" print ( \" \\n Getting microphones less than $200:\" ) fetch_and_display_all_rows ( query ) query = \"\"\" SELECT * FROM products WHERE product_price < 1000 AND product_category IN (\"Computers\", \"Microphones\"); \"\"\" print ( \" \\n Computers and Microphones cheaper than $1000:\" ) fetch_and_display_all_rows ( query ) Output (1, 'Dell XPS 17', 1599.99, 'Computers') (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (3, 'System76 Thelio B1', 1255.55, 'Computers') (4, 'Logitech M1', 34.99, 'Accessories') (5, 'Seagate S1 SSD', 88.75, 'Accessories') (6, 'MacBook Pro 16', 2100.5, 'Computers') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Getting microphones less than $200: (2, 'Blue Snowball Microphone', 99.5, 'Microphones') Computers and Microphones cheaper than $1000: (2, 'Blue Snowball Microphone', 99.5, 'Microphones') (7, 'Rode Z28', 275.99, 'Microphones') (8, 'Lenovo ThinkPad', 950.75, 'Computers') Further Reading SQLBolt - Queries with constraints - Pt. 1 SQLBolt - Queries with constraints - Pt. 2 SQLite Tutorial - SQLite Where","title":"Complex conditional logic with WHERE clauses"}]}